{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Matrix Admin SDK \u00b6 Async wrapper for the Matrix.org Admin API. Installation \u00b6 pip install matrix-admin-sdk Usage \u00b6 Quick Start \u00b6 import asyncio import httpx from matrix_admin_sdk import MatrixAdminClient from matrix_admin_sdk.endpoints.v1 import EditRoomMembership async def main (): admin_key = \"admin_key\" http_client = httpx . AsyncClient () server_url = \"https://matrix.server.com\" admin_client = MatrixAdminClient ( http_client , admin_key , server_url ) api = EditRoomMembership ( admin_client ) res = await api . join_user_to_room ( \"room_id\" , \"user_id\" ) if __name__ == \"__main__\" : asyncio . run ( main ()) Index \u00b6 Endpoints \u00b6 v1 \u00b6 Account Validity Background Updates Delete Group Delete Local Media Edit Room Membership Event Reports Purge History Purge Remote Media Quarantine Media Querying Media Register Users Registration Tokens Rooms Forward Extremities Server Notices User Media Statistics User User Rate Limits Server Federation v2 \u00b6 Users User Devices Rooms","title":"Matrix Admin SDK"},{"location":"#matrix-admin-sdk","text":"Async wrapper for the Matrix.org Admin API.","title":"Matrix Admin SDK"},{"location":"#installation","text":"pip install matrix-admin-sdk","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#quick-start","text":"import asyncio import httpx from matrix_admin_sdk import MatrixAdminClient from matrix_admin_sdk.endpoints.v1 import EditRoomMembership async def main (): admin_key = \"admin_key\" http_client = httpx . AsyncClient () server_url = \"https://matrix.server.com\" admin_client = MatrixAdminClient ( http_client , admin_key , server_url ) api = EditRoomMembership ( admin_client ) res = await api . join_user_to_room ( \"room_id\" , \"user_id\" ) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"Quick Start"},{"location":"#index","text":"","title":"Index"},{"location":"#endpoints","text":"","title":"Endpoints"},{"location":"#v1","text":"Account Validity Background Updates Delete Group Delete Local Media Edit Room Membership Event Reports Purge History Purge Remote Media Quarantine Media Querying Media Register Users Registration Tokens Rooms Forward Extremities Server Notices User Media Statistics User User Rate Limits Server Federation","title":"v1"},{"location":"#v2","text":"Users User Devices Rooms","title":"v2"},{"location":"endpoints/v1/account_validity/","text":"Account Validity \u00b6 Endpoints \u00b6 AccountValidity \u00b6 This API allows a server administrator to manage the validity of an account. To use it, you must enable the account validity feature (under account_validity) in Synapse's configuration. Source code in matrix_admin_sdk/endpoints/v1/account_validity.py class AccountValidity ( Endpoint ): \"\"\" This API allows a server administrator to manage the validity of an account. To use it, you must enable the account validity feature (under account_validity) in Synapse's configuration. \"\"\" async def renew_account ( self , user_id : str , expiration_ts : int = 0 , enable_renewal_emails : bool = True ) -> RenewAccountModel : \"\"\" This API extends the validity of an account by as much time as configured in the period parameter from the account_validity configuration. Args: user_id: user ID for the account to renew expiration_ts: overrides the expiration date, which otherwise defaults to now + validity period. enable_renewal_emails: enables/disables sending renewal emails to the user. Returns: RenewAccountModel \"\"\" url = self . url ( \"account_validity/validity\" ) data = { \"user_id\" : user_id , \"expiration_ts\" : expiration_ts , \"enable_renewal_emails\" : enable_renewal_emails , } response = await self . request ( RequestMethods . POST , url , json = data ) res : RenewAccountModel = RenewAccountModel . from_dict ( response ) return res renew_account ( self , user_id , expiration_ts = 0 , enable_renewal_emails = True ) async \u00b6 This API extends the validity of an account by as much time as configured in the period parameter from the account_validity configuration. Parameters: Name Type Description Default user_id str user ID for the account to renew required expiration_ts int overrides the expiration date, which otherwise defaults to now + validity period. 0 enable_renewal_emails bool enables/disables sending renewal emails to the user. True Source code in matrix_admin_sdk/endpoints/v1/account_validity.py async def renew_account ( self , user_id : str , expiration_ts : int = 0 , enable_renewal_emails : bool = True ) -> RenewAccountModel : \"\"\" This API extends the validity of an account by as much time as configured in the period parameter from the account_validity configuration. Args: user_id: user ID for the account to renew expiration_ts: overrides the expiration date, which otherwise defaults to now + validity period. enable_renewal_emails: enables/disables sending renewal emails to the user. Returns: RenewAccountModel \"\"\" url = self . url ( \"account_validity/validity\" ) data = { \"user_id\" : user_id , \"expiration_ts\" : expiration_ts , \"enable_renewal_emails\" : enable_renewal_emails , } response = await self . request ( RequestMethods . POST , url , json = data ) res : RenewAccountModel = RenewAccountModel . from_dict ( response ) return res Models \u00b6 RenewAccountModel \u00b6 Attributes: Name Type Description expiration_ts int new expiration date for this account, as a timestamp in milliseconds since epoch expiration_date datetime new expiration date for this account, as a datetime object Source code in matrix_admin_sdk/models/v1/account_validity.py class RenewAccountModel ( BaseModel ): \"\"\" Attributes: expiration_ts (int): new expiration date for this account, as a timestamp in milliseconds since epoch expiration_date (datetime): new expiration date for this account, as a datetime object \"\"\" expiration_ts : int @property def expiration_date ( self ) -> datetime : return datetime . fromtimestamp ( self . expiration_ts / 1000 )","title":"Account Validity"},{"location":"endpoints/v1/account_validity/#account-validity","text":"","title":"Account Validity"},{"location":"endpoints/v1/account_validity/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/account_validity/#accountvalidity","text":"This API allows a server administrator to manage the validity of an account. To use it, you must enable the account validity feature (under account_validity) in Synapse's configuration. Source code in matrix_admin_sdk/endpoints/v1/account_validity.py class AccountValidity ( Endpoint ): \"\"\" This API allows a server administrator to manage the validity of an account. To use it, you must enable the account validity feature (under account_validity) in Synapse's configuration. \"\"\" async def renew_account ( self , user_id : str , expiration_ts : int = 0 , enable_renewal_emails : bool = True ) -> RenewAccountModel : \"\"\" This API extends the validity of an account by as much time as configured in the period parameter from the account_validity configuration. Args: user_id: user ID for the account to renew expiration_ts: overrides the expiration date, which otherwise defaults to now + validity period. enable_renewal_emails: enables/disables sending renewal emails to the user. Returns: RenewAccountModel \"\"\" url = self . url ( \"account_validity/validity\" ) data = { \"user_id\" : user_id , \"expiration_ts\" : expiration_ts , \"enable_renewal_emails\" : enable_renewal_emails , } response = await self . request ( RequestMethods . POST , url , json = data ) res : RenewAccountModel = RenewAccountModel . from_dict ( response ) return res","title":"AccountValidity"},{"location":"endpoints/v1/account_validity/#matrix_admin_sdk.endpoints.v1.account_validity.AccountValidity.renew_account","text":"This API extends the validity of an account by as much time as configured in the period parameter from the account_validity configuration. Parameters: Name Type Description Default user_id str user ID for the account to renew required expiration_ts int overrides the expiration date, which otherwise defaults to now + validity period. 0 enable_renewal_emails bool enables/disables sending renewal emails to the user. True Source code in matrix_admin_sdk/endpoints/v1/account_validity.py async def renew_account ( self , user_id : str , expiration_ts : int = 0 , enable_renewal_emails : bool = True ) -> RenewAccountModel : \"\"\" This API extends the validity of an account by as much time as configured in the period parameter from the account_validity configuration. Args: user_id: user ID for the account to renew expiration_ts: overrides the expiration date, which otherwise defaults to now + validity period. enable_renewal_emails: enables/disables sending renewal emails to the user. Returns: RenewAccountModel \"\"\" url = self . url ( \"account_validity/validity\" ) data = { \"user_id\" : user_id , \"expiration_ts\" : expiration_ts , \"enable_renewal_emails\" : enable_renewal_emails , } response = await self . request ( RequestMethods . POST , url , json = data ) res : RenewAccountModel = RenewAccountModel . from_dict ( response ) return res","title":"renew_account()"},{"location":"endpoints/v1/account_validity/#models","text":"","title":"Models"},{"location":"endpoints/v1/account_validity/#renewaccountmodel","text":"Attributes: Name Type Description expiration_ts int new expiration date for this account, as a timestamp in milliseconds since epoch expiration_date datetime new expiration date for this account, as a datetime object Source code in matrix_admin_sdk/models/v1/account_validity.py class RenewAccountModel ( BaseModel ): \"\"\" Attributes: expiration_ts (int): new expiration date for this account, as a timestamp in milliseconds since epoch expiration_date (datetime): new expiration date for this account, as a datetime object \"\"\" expiration_ts : int @property def expiration_date ( self ) -> datetime : return datetime . fromtimestamp ( self . expiration_ts / 1000 )","title":"RenewAccountModel"},{"location":"endpoints/v1/background_updates/","text":"Background Updates \u00b6 Endpoints \u00b6 BackgroundUpdates \u00b6 This API allows a server administrator to manage the background updates being run against the database. Source code in matrix_admin_sdk/endpoints/v1/background_updates.py class BackgroundUpdates ( Endpoint ): \"\"\" This API allows a server administrator to manage the background updates being run against the database. \"\"\" async def status ( self ) -> StatusModel : \"\"\" This API gets the current status of the background updates. \"\"\" url = self . url ( \"background_updates/status\" ) result = await self . request ( RequestMethods . GET , url ) return StatusModel . from_dict ( result ) async def enabled ( self , enabled : bool ) -> EnabledModel : \"\"\" This API allows pausing background updates. Background updates should not be paused for significant periods of time, as this can affect the performance of Synapse. Note: This won't persist over restarts. Note: This won't cancel any update query that is currently running. This is usually fine since most queries are short lived, except for CREATE INDEX background updates which won't be cancelled once started. Args: enabled: sets whether the background updates are enabled or disabled. Returns: The new status of the background updates. \"\"\" url = self . url ( \"background_updates/enabled\" ) data = { \"enabled\" : enabled } result = await self . request ( RequestMethods . POST , url , json = data ) res : EnabledModel = EnabledModel . from_dict ( result ) return res async def run ( self , job_name : str ) -> None : \"\"\" This API schedules a specific background update to run. The job starts immediately after calling the API. Args: job_name: A string which job to run. Valid values are: - \"populate_stats_process_rooms\": Recalculate the stats for all rooms. - \"regenerate_directory\":Recalculate the user directory if it is stale or out of sync. \"\"\" url = self . url ( \"background_updates/start_job\" ) data = { \"job_name\" : job_name } await self . request ( RequestMethods . POST , url , json = data ) enabled ( self , enabled ) async \u00b6 This API allows pausing background updates. Background updates should not be paused for significant periods of time, as this can affect the performance of Synapse. Note: This won't persist over restarts. Note: This won't cancel any update query that is currently running. This is usually fine since most queries are short lived, except for CREATE INDEX background updates which won't be cancelled once started. Parameters: Name Type Description Default enabled bool sets whether the background updates are enabled or disabled. required Source code in matrix_admin_sdk/endpoints/v1/background_updates.py async def enabled ( self , enabled : bool ) -> EnabledModel : \"\"\" This API allows pausing background updates. Background updates should not be paused for significant periods of time, as this can affect the performance of Synapse. Note: This won't persist over restarts. Note: This won't cancel any update query that is currently running. This is usually fine since most queries are short lived, except for CREATE INDEX background updates which won't be cancelled once started. Args: enabled: sets whether the background updates are enabled or disabled. Returns: The new status of the background updates. \"\"\" url = self . url ( \"background_updates/enabled\" ) data = { \"enabled\" : enabled } result = await self . request ( RequestMethods . POST , url , json = data ) res : EnabledModel = EnabledModel . from_dict ( result ) return res run ( self , job_name ) async \u00b6 This API schedules a specific background update to run. The job starts immediately after calling the API. Parameters: Name Type Description Default job_name str A string which job to run. Valid values are: - \"populate_stats_process_rooms\": Recalculate the stats for all rooms. - \"regenerate_directory\":Recalculate the user directory if it is stale or out of sync. required Source code in matrix_admin_sdk/endpoints/v1/background_updates.py async def run ( self , job_name : str ) -> None : \"\"\" This API schedules a specific background update to run. The job starts immediately after calling the API. Args: job_name: A string which job to run. Valid values are: - \"populate_stats_process_rooms\": Recalculate the stats for all rooms. - \"regenerate_directory\":Recalculate the user directory if it is stale or out of sync. \"\"\" url = self . url ( \"background_updates/start_job\" ) data = { \"job_name\" : job_name } await self . request ( RequestMethods . POST , url , json = data ) status ( self ) async \u00b6 This API gets the current status of the background updates. Source code in matrix_admin_sdk/endpoints/v1/background_updates.py async def status ( self ) -> StatusModel : \"\"\" This API gets the current status of the background updates. \"\"\" url = self . url ( \"background_updates/status\" ) result = await self . request ( RequestMethods . GET , url ) return StatusModel . from_dict ( result ) Models \u00b6 CurrentUpdate \u00b6 CurrentUpdate Attributes: Name Type Description db_name str the database name (usually Synapse is configured with a single database named 'master') name str the name of the update total_item_count int total number of \"items\" processed (the meaning of 'items' depends on the update in question) total_duration_ms float how long the background process has been running, not including time spent sleeping average_items_per_ms float how many items are processed per millisecond based on an exponential average Source code in matrix_admin_sdk/models/v1/background_updates.py class CurrentUpdate ( BaseModel ): \"\"\" CurrentUpdate Attributes: db_name: the database name (usually Synapse is configured with a single database named 'master') name (str): the name of the update total_item_count (int):total number of \"items\" processed (the meaning of 'items' depends on the update in question) total_duration_ms (float): how long the background process has been running, not including time spent sleeping average_items_per_ms (float): how many items are processed per millisecond based on an exponential average \"\"\" db_name : str name : str total_item_count : int total_duration_ms : float average_items_per_ms : float StatusModel \u00b6 StatusModel Attributes: Name Type Description enabled bool whether the background updates are enabled or disabled current_updates List[matrix_admin_sdk.models.v1.background_updates.CurrentUpdate] a list of the current updates being processed Source code in matrix_admin_sdk/models/v1/background_updates.py class StatusModel ( BaseModel ): \"\"\" StatusModel Attributes: enabled: whether the background updates are enabled or disabled current_updates: a list of the current updates being processed \"\"\" enabled : bool current_updates : List [ CurrentUpdate ] @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"StatusModel\" : current_updates = [] for k , v in data [ \"current_updates\" ] . items (): v [ \"db_name\" ] = k current_updates . append ( CurrentUpdate . from_dict ( v )) return cls ( enabled = data [ \"enabled\" ], current_updates = current_updates ) EnabledModel \u00b6 EnabledModel Attributes: Name Type Description enabled bool whether the background updates are enabled or disabled Source code in matrix_admin_sdk/models/v1/background_updates.py class EnabledModel ( BaseModel ): \"\"\" EnabledModel Attributes: enabled (bool): whether the background updates are enabled or disabled \"\"\" enabled : bool","title":"Background Updates"},{"location":"endpoints/v1/background_updates/#background-updates","text":"","title":"Background Updates"},{"location":"endpoints/v1/background_updates/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/background_updates/#backgroundupdates","text":"This API allows a server administrator to manage the background updates being run against the database. Source code in matrix_admin_sdk/endpoints/v1/background_updates.py class BackgroundUpdates ( Endpoint ): \"\"\" This API allows a server administrator to manage the background updates being run against the database. \"\"\" async def status ( self ) -> StatusModel : \"\"\" This API gets the current status of the background updates. \"\"\" url = self . url ( \"background_updates/status\" ) result = await self . request ( RequestMethods . GET , url ) return StatusModel . from_dict ( result ) async def enabled ( self , enabled : bool ) -> EnabledModel : \"\"\" This API allows pausing background updates. Background updates should not be paused for significant periods of time, as this can affect the performance of Synapse. Note: This won't persist over restarts. Note: This won't cancel any update query that is currently running. This is usually fine since most queries are short lived, except for CREATE INDEX background updates which won't be cancelled once started. Args: enabled: sets whether the background updates are enabled or disabled. Returns: The new status of the background updates. \"\"\" url = self . url ( \"background_updates/enabled\" ) data = { \"enabled\" : enabled } result = await self . request ( RequestMethods . POST , url , json = data ) res : EnabledModel = EnabledModel . from_dict ( result ) return res async def run ( self , job_name : str ) -> None : \"\"\" This API schedules a specific background update to run. The job starts immediately after calling the API. Args: job_name: A string which job to run. Valid values are: - \"populate_stats_process_rooms\": Recalculate the stats for all rooms. - \"regenerate_directory\":Recalculate the user directory if it is stale or out of sync. \"\"\" url = self . url ( \"background_updates/start_job\" ) data = { \"job_name\" : job_name } await self . request ( RequestMethods . POST , url , json = data )","title":"BackgroundUpdates"},{"location":"endpoints/v1/background_updates/#matrix_admin_sdk.endpoints.v1.background_updates.BackgroundUpdates.enabled","text":"This API allows pausing background updates. Background updates should not be paused for significant periods of time, as this can affect the performance of Synapse. Note: This won't persist over restarts. Note: This won't cancel any update query that is currently running. This is usually fine since most queries are short lived, except for CREATE INDEX background updates which won't be cancelled once started. Parameters: Name Type Description Default enabled bool sets whether the background updates are enabled or disabled. required Source code in matrix_admin_sdk/endpoints/v1/background_updates.py async def enabled ( self , enabled : bool ) -> EnabledModel : \"\"\" This API allows pausing background updates. Background updates should not be paused for significant periods of time, as this can affect the performance of Synapse. Note: This won't persist over restarts. Note: This won't cancel any update query that is currently running. This is usually fine since most queries are short lived, except for CREATE INDEX background updates which won't be cancelled once started. Args: enabled: sets whether the background updates are enabled or disabled. Returns: The new status of the background updates. \"\"\" url = self . url ( \"background_updates/enabled\" ) data = { \"enabled\" : enabled } result = await self . request ( RequestMethods . POST , url , json = data ) res : EnabledModel = EnabledModel . from_dict ( result ) return res","title":"enabled()"},{"location":"endpoints/v1/background_updates/#matrix_admin_sdk.endpoints.v1.background_updates.BackgroundUpdates.run","text":"This API schedules a specific background update to run. The job starts immediately after calling the API. Parameters: Name Type Description Default job_name str A string which job to run. Valid values are: - \"populate_stats_process_rooms\": Recalculate the stats for all rooms. - \"regenerate_directory\":Recalculate the user directory if it is stale or out of sync. required Source code in matrix_admin_sdk/endpoints/v1/background_updates.py async def run ( self , job_name : str ) -> None : \"\"\" This API schedules a specific background update to run. The job starts immediately after calling the API. Args: job_name: A string which job to run. Valid values are: - \"populate_stats_process_rooms\": Recalculate the stats for all rooms. - \"regenerate_directory\":Recalculate the user directory if it is stale or out of sync. \"\"\" url = self . url ( \"background_updates/start_job\" ) data = { \"job_name\" : job_name } await self . request ( RequestMethods . POST , url , json = data )","title":"run()"},{"location":"endpoints/v1/background_updates/#matrix_admin_sdk.endpoints.v1.background_updates.BackgroundUpdates.status","text":"This API gets the current status of the background updates. Source code in matrix_admin_sdk/endpoints/v1/background_updates.py async def status ( self ) -> StatusModel : \"\"\" This API gets the current status of the background updates. \"\"\" url = self . url ( \"background_updates/status\" ) result = await self . request ( RequestMethods . GET , url ) return StatusModel . from_dict ( result )","title":"status()"},{"location":"endpoints/v1/background_updates/#models","text":"","title":"Models"},{"location":"endpoints/v1/background_updates/#currentupdate","text":"CurrentUpdate Attributes: Name Type Description db_name str the database name (usually Synapse is configured with a single database named 'master') name str the name of the update total_item_count int total number of \"items\" processed (the meaning of 'items' depends on the update in question) total_duration_ms float how long the background process has been running, not including time spent sleeping average_items_per_ms float how many items are processed per millisecond based on an exponential average Source code in matrix_admin_sdk/models/v1/background_updates.py class CurrentUpdate ( BaseModel ): \"\"\" CurrentUpdate Attributes: db_name: the database name (usually Synapse is configured with a single database named 'master') name (str): the name of the update total_item_count (int):total number of \"items\" processed (the meaning of 'items' depends on the update in question) total_duration_ms (float): how long the background process has been running, not including time spent sleeping average_items_per_ms (float): how many items are processed per millisecond based on an exponential average \"\"\" db_name : str name : str total_item_count : int total_duration_ms : float average_items_per_ms : float","title":"CurrentUpdate"},{"location":"endpoints/v1/background_updates/#statusmodel","text":"StatusModel Attributes: Name Type Description enabled bool whether the background updates are enabled or disabled current_updates List[matrix_admin_sdk.models.v1.background_updates.CurrentUpdate] a list of the current updates being processed Source code in matrix_admin_sdk/models/v1/background_updates.py class StatusModel ( BaseModel ): \"\"\" StatusModel Attributes: enabled: whether the background updates are enabled or disabled current_updates: a list of the current updates being processed \"\"\" enabled : bool current_updates : List [ CurrentUpdate ] @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"StatusModel\" : current_updates = [] for k , v in data [ \"current_updates\" ] . items (): v [ \"db_name\" ] = k current_updates . append ( CurrentUpdate . from_dict ( v )) return cls ( enabled = data [ \"enabled\" ], current_updates = current_updates )","title":"StatusModel"},{"location":"endpoints/v1/background_updates/#enabledmodel","text":"EnabledModel Attributes: Name Type Description enabled bool whether the background updates are enabled or disabled Source code in matrix_admin_sdk/models/v1/background_updates.py class EnabledModel ( BaseModel ): \"\"\" EnabledModel Attributes: enabled (bool): whether the background updates are enabled or disabled \"\"\" enabled : bool","title":"EnabledModel"},{"location":"endpoints/v1/delete_group/","text":"Delete Group \u00b6 Endpoints \u00b6 DeleteGroup \u00b6 Delete a group. Source code in matrix_admin_sdk/endpoints/v1/delete_group.py class DeleteGroup ( Endpoint ): \"\"\" Delete a group. \"\"\" async def delete ( self , group_id ) -> None : \"\"\" This API lets a server admin delete a local group. Doing so will kick all users out of the group so that their clients will correctly handle the group being deleted. Args: group_id: The group ID to delete. \"\"\" url = self . url ( f \"delete_group/ { group_id } \" ) await self . request ( RequestMethods . POST , url , json = {}) delete ( self , group_id ) async \u00b6 This API lets a server admin delete a local group. Doing so will kick all users out of the group so that their clients will correctly handle the group being deleted. Parameters: Name Type Description Default group_id The group ID to delete. required Source code in matrix_admin_sdk/endpoints/v1/delete_group.py async def delete ( self , group_id ) -> None : \"\"\" This API lets a server admin delete a local group. Doing so will kick all users out of the group so that their clients will correctly handle the group being deleted. Args: group_id: The group ID to delete. \"\"\" url = self . url ( f \"delete_group/ { group_id } \" ) await self . request ( RequestMethods . POST , url , json = {})","title":"Delete Group"},{"location":"endpoints/v1/delete_group/#delete-group","text":"","title":"Delete Group"},{"location":"endpoints/v1/delete_group/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/delete_group/#deletegroup","text":"Delete a group. Source code in matrix_admin_sdk/endpoints/v1/delete_group.py class DeleteGroup ( Endpoint ): \"\"\" Delete a group. \"\"\" async def delete ( self , group_id ) -> None : \"\"\" This API lets a server admin delete a local group. Doing so will kick all users out of the group so that their clients will correctly handle the group being deleted. Args: group_id: The group ID to delete. \"\"\" url = self . url ( f \"delete_group/ { group_id } \" ) await self . request ( RequestMethods . POST , url , json = {})","title":"DeleteGroup"},{"location":"endpoints/v1/delete_group/#matrix_admin_sdk.endpoints.v1.delete_group.DeleteGroup.delete","text":"This API lets a server admin delete a local group. Doing so will kick all users out of the group so that their clients will correctly handle the group being deleted. Parameters: Name Type Description Default group_id The group ID to delete. required Source code in matrix_admin_sdk/endpoints/v1/delete_group.py async def delete ( self , group_id ) -> None : \"\"\" This API lets a server admin delete a local group. Doing so will kick all users out of the group so that their clients will correctly handle the group being deleted. Args: group_id: The group ID to delete. \"\"\" url = self . url ( f \"delete_group/ { group_id } \" ) await self . request ( RequestMethods . POST , url , json = {})","title":"delete()"},{"location":"endpoints/v1/delete_local_media/","text":"Delete Local Media \u00b6 Endpoints \u00b6 DeleteLocalMedia \u00b6 This API deletes the local media from the disk of your own server. This includes any local thumbnails and copies of media downloaded from remote homeservers. This API will not affect media that has been uploaded to external media repositories (e.g https://github.com/turt2live/matrix-media-repo/ ). Source code in matrix_admin_sdk/endpoints/v1/delete_local_media.py class DeleteLocalMedia ( Endpoint ): \"\"\" This API deletes the local media from the disk of your own server. This includes any local thumbnails and copies of media downloaded from remote homeservers. This API will not affect media that has been uploaded to external media repositories (e.g https://github.com/turt2live/matrix-media-repo/). \"\"\" async def specific_local_media ( self , server_name : str , media_id : str ) -> DeleteLocalMediaModel : \"\"\" Delete a specific media_id Args: server_name: The name of your local server (e.g matrix.org) media_id:The ID of the media (e.g abcdefghijklmnopqrstuvwx) Returns: DeleteLocalMediaModel \"\"\" url = self . url ( f \"media/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . DELETE , url ) res : DeleteLocalMediaModel = DeleteLocalMediaModel . from_dict ( result ) return res async def local_media_by_date_or_size ( self , server_name : str , before_ts : int , size_gt : int = 0 , keep_profiles : bool = True , ): \"\"\" Delete local media by date or size Args: server_name: The name of your local server (e.g matrix.org). before_ts: Unix timestamp in milliseconds. Files that were last used before this timestamp will be deleted. It is the timestamp of last access, not the timestamp when the file was created. size_gt: Size of the media in bytes. Files that are larger will be deleted. Defaults to 0. keep_profiles: Switch to also delete files that are still used in image data (e.g user profile, room avatar). If false these files will be deleted. Defaults to true. Returns: \"\"\" keep_profile_string = \"true\" if keep_profiles else \"false\" url = self . url ( f \"media/ { server_name } /delete?before_ts= { before_ts } &size_gt= { size_gt } &keep_profiles= { keep_profile_string } \" ) result = await self . request ( RequestMethods . POST , url , json = {}) return DeleteLocalMediaModel . from_dict ( result ) local_media_by_date_or_size ( self , server_name , before_ts , size_gt = 0 , keep_profiles = True ) async \u00b6 Delete local media by date or size Parameters: Name Type Description Default server_name str The name of your local server (e.g matrix.org). required before_ts int Unix timestamp in milliseconds. Files that were last used before this timestamp will be deleted. It is the timestamp of last access, not the timestamp when the file was created. required size_gt int Size of the media in bytes. Files that are larger will be deleted. Defaults to 0. 0 keep_profiles bool Switch to also delete files that are still used in image data (e.g user profile, room avatar). If false these files will be deleted. Defaults to true. True Source code in matrix_admin_sdk/endpoints/v1/delete_local_media.py async def local_media_by_date_or_size ( self , server_name : str , before_ts : int , size_gt : int = 0 , keep_profiles : bool = True , ): \"\"\" Delete local media by date or size Args: server_name: The name of your local server (e.g matrix.org). before_ts: Unix timestamp in milliseconds. Files that were last used before this timestamp will be deleted. It is the timestamp of last access, not the timestamp when the file was created. size_gt: Size of the media in bytes. Files that are larger will be deleted. Defaults to 0. keep_profiles: Switch to also delete files that are still used in image data (e.g user profile, room avatar). If false these files will be deleted. Defaults to true. Returns: \"\"\" keep_profile_string = \"true\" if keep_profiles else \"false\" url = self . url ( f \"media/ { server_name } /delete?before_ts= { before_ts } &size_gt= { size_gt } &keep_profiles= { keep_profile_string } \" ) result = await self . request ( RequestMethods . POST , url , json = {}) return DeleteLocalMediaModel . from_dict ( result ) specific_local_media ( self , server_name , media_id ) async \u00b6 Delete a specific media_id Parameters: Name Type Description Default server_name str The name of your local server (e.g matrix.org) required media_id str The ID of the media (e.g abcdefghijklmnopqrstuvwx) required Source code in matrix_admin_sdk/endpoints/v1/delete_local_media.py async def specific_local_media ( self , server_name : str , media_id : str ) -> DeleteLocalMediaModel : \"\"\" Delete a specific media_id Args: server_name: The name of your local server (e.g matrix.org) media_id:The ID of the media (e.g abcdefghijklmnopqrstuvwx) Returns: DeleteLocalMediaModel \"\"\" url = self . url ( f \"media/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . DELETE , url ) res : DeleteLocalMediaModel = DeleteLocalMediaModel . from_dict ( result ) return res Models \u00b6 DeleteLocalMediaModel \u00b6 DeleteLocalMedia class Attributes: Name Type Description deleted_media list[str] List of deleted media_id total int Total number of deleted media_id Source code in matrix_admin_sdk/models/v1/delete_local_media.py class DeleteLocalMediaModel ( BaseModel ): \"\"\" DeleteLocalMedia class Attributes: deleted_media (list[str]): List of deleted media_id total (int): Total number of deleted media_id \"\"\" deleted_media : List [ str ] total : int","title":"Delete Local Media"},{"location":"endpoints/v1/delete_local_media/#delete-local-media","text":"","title":"Delete Local Media"},{"location":"endpoints/v1/delete_local_media/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/delete_local_media/#deletelocalmedia","text":"This API deletes the local media from the disk of your own server. This includes any local thumbnails and copies of media downloaded from remote homeservers. This API will not affect media that has been uploaded to external media repositories (e.g https://github.com/turt2live/matrix-media-repo/ ). Source code in matrix_admin_sdk/endpoints/v1/delete_local_media.py class DeleteLocalMedia ( Endpoint ): \"\"\" This API deletes the local media from the disk of your own server. This includes any local thumbnails and copies of media downloaded from remote homeservers. This API will not affect media that has been uploaded to external media repositories (e.g https://github.com/turt2live/matrix-media-repo/). \"\"\" async def specific_local_media ( self , server_name : str , media_id : str ) -> DeleteLocalMediaModel : \"\"\" Delete a specific media_id Args: server_name: The name of your local server (e.g matrix.org) media_id:The ID of the media (e.g abcdefghijklmnopqrstuvwx) Returns: DeleteLocalMediaModel \"\"\" url = self . url ( f \"media/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . DELETE , url ) res : DeleteLocalMediaModel = DeleteLocalMediaModel . from_dict ( result ) return res async def local_media_by_date_or_size ( self , server_name : str , before_ts : int , size_gt : int = 0 , keep_profiles : bool = True , ): \"\"\" Delete local media by date or size Args: server_name: The name of your local server (e.g matrix.org). before_ts: Unix timestamp in milliseconds. Files that were last used before this timestamp will be deleted. It is the timestamp of last access, not the timestamp when the file was created. size_gt: Size of the media in bytes. Files that are larger will be deleted. Defaults to 0. keep_profiles: Switch to also delete files that are still used in image data (e.g user profile, room avatar). If false these files will be deleted. Defaults to true. Returns: \"\"\" keep_profile_string = \"true\" if keep_profiles else \"false\" url = self . url ( f \"media/ { server_name } /delete?before_ts= { before_ts } &size_gt= { size_gt } &keep_profiles= { keep_profile_string } \" ) result = await self . request ( RequestMethods . POST , url , json = {}) return DeleteLocalMediaModel . from_dict ( result )","title":"DeleteLocalMedia"},{"location":"endpoints/v1/delete_local_media/#matrix_admin_sdk.endpoints.v1.delete_local_media.DeleteLocalMedia.local_media_by_date_or_size","text":"Delete local media by date or size Parameters: Name Type Description Default server_name str The name of your local server (e.g matrix.org). required before_ts int Unix timestamp in milliseconds. Files that were last used before this timestamp will be deleted. It is the timestamp of last access, not the timestamp when the file was created. required size_gt int Size of the media in bytes. Files that are larger will be deleted. Defaults to 0. 0 keep_profiles bool Switch to also delete files that are still used in image data (e.g user profile, room avatar). If false these files will be deleted. Defaults to true. True Source code in matrix_admin_sdk/endpoints/v1/delete_local_media.py async def local_media_by_date_or_size ( self , server_name : str , before_ts : int , size_gt : int = 0 , keep_profiles : bool = True , ): \"\"\" Delete local media by date or size Args: server_name: The name of your local server (e.g matrix.org). before_ts: Unix timestamp in milliseconds. Files that were last used before this timestamp will be deleted. It is the timestamp of last access, not the timestamp when the file was created. size_gt: Size of the media in bytes. Files that are larger will be deleted. Defaults to 0. keep_profiles: Switch to also delete files that are still used in image data (e.g user profile, room avatar). If false these files will be deleted. Defaults to true. Returns: \"\"\" keep_profile_string = \"true\" if keep_profiles else \"false\" url = self . url ( f \"media/ { server_name } /delete?before_ts= { before_ts } &size_gt= { size_gt } &keep_profiles= { keep_profile_string } \" ) result = await self . request ( RequestMethods . POST , url , json = {}) return DeleteLocalMediaModel . from_dict ( result )","title":"local_media_by_date_or_size()"},{"location":"endpoints/v1/delete_local_media/#matrix_admin_sdk.endpoints.v1.delete_local_media.DeleteLocalMedia.specific_local_media","text":"Delete a specific media_id Parameters: Name Type Description Default server_name str The name of your local server (e.g matrix.org) required media_id str The ID of the media (e.g abcdefghijklmnopqrstuvwx) required Source code in matrix_admin_sdk/endpoints/v1/delete_local_media.py async def specific_local_media ( self , server_name : str , media_id : str ) -> DeleteLocalMediaModel : \"\"\" Delete a specific media_id Args: server_name: The name of your local server (e.g matrix.org) media_id:The ID of the media (e.g abcdefghijklmnopqrstuvwx) Returns: DeleteLocalMediaModel \"\"\" url = self . url ( f \"media/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . DELETE , url ) res : DeleteLocalMediaModel = DeleteLocalMediaModel . from_dict ( result ) return res","title":"specific_local_media()"},{"location":"endpoints/v1/delete_local_media/#models","text":"","title":"Models"},{"location":"endpoints/v1/delete_local_media/#deletelocalmediamodel","text":"DeleteLocalMedia class Attributes: Name Type Description deleted_media list[str] List of deleted media_id total int Total number of deleted media_id Source code in matrix_admin_sdk/models/v1/delete_local_media.py class DeleteLocalMediaModel ( BaseModel ): \"\"\" DeleteLocalMedia class Attributes: deleted_media (list[str]): List of deleted media_id total (int): Total number of deleted media_id \"\"\" deleted_media : List [ str ] total : int","title":"DeleteLocalMediaModel"},{"location":"endpoints/v1/edit_room_membership/","text":"Edit Room Membership \u00b6 Endpoints \u00b6 EditRoomMembership \u00b6 Endpoint to edit a room membership. Source code in matrix_admin_sdk/endpoints/v1/edit_room_membership.py class EditRoomMembership ( Endpoint ): \"\"\" Endpoint to edit a room membership. \"\"\" async def join_user_to_room ( self , room_id_or_alias : str , user_id : str ) -> Dict [ str , str ]: \"\"\" This API allows an administrator to join an user account with a given user_id to a room with a given room_id_or_alias. You can only modify the membership of local users. The server administrator must be in the room and have permission to invite users. Args: room_id_or_alias: The room identifier or alias to join: for example, !636q39766251:server.com user_id: Fully qualified user: for example, @user:server.com Returns: {\"room_id\": \"!636q39766251:server.com\"} \"\"\" url = self . url ( f \"join/ { room_id_or_alias } \" ) data = { \"user_id\" : user_id } result = await self . request ( RequestMethods . POST , url , json = data ) return result join_user_to_room ( self , room_id_or_alias , user_id ) async \u00b6 This API allows an administrator to join an user account with a given user_id to a room with a given room_id_or_alias. You can only modify the membership of local users. The server administrator must be in the room and have permission to invite users. Parameters: Name Type Description Default room_id_or_alias str The room identifier or alias to join: for example, !636q39766251:server.com required user_id str Fully qualified user: for example, @user :server.com required Source code in matrix_admin_sdk/endpoints/v1/edit_room_membership.py async def join_user_to_room ( self , room_id_or_alias : str , user_id : str ) -> Dict [ str , str ]: \"\"\" This API allows an administrator to join an user account with a given user_id to a room with a given room_id_or_alias. You can only modify the membership of local users. The server administrator must be in the room and have permission to invite users. Args: room_id_or_alias: The room identifier or alias to join: for example, !636q39766251:server.com user_id: Fully qualified user: for example, @user:server.com Returns: {\"room_id\": \"!636q39766251:server.com\"} \"\"\" url = self . url ( f \"join/ { room_id_or_alias } \" ) data = { \"user_id\" : user_id } result = await self . request ( RequestMethods . POST , url , json = data ) return result","title":"Edit Room Membership"},{"location":"endpoints/v1/edit_room_membership/#edit-room-membership","text":"","title":"Edit Room Membership"},{"location":"endpoints/v1/edit_room_membership/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/edit_room_membership/#editroommembership","text":"Endpoint to edit a room membership. Source code in matrix_admin_sdk/endpoints/v1/edit_room_membership.py class EditRoomMembership ( Endpoint ): \"\"\" Endpoint to edit a room membership. \"\"\" async def join_user_to_room ( self , room_id_or_alias : str , user_id : str ) -> Dict [ str , str ]: \"\"\" This API allows an administrator to join an user account with a given user_id to a room with a given room_id_or_alias. You can only modify the membership of local users. The server administrator must be in the room and have permission to invite users. Args: room_id_or_alias: The room identifier or alias to join: for example, !636q39766251:server.com user_id: Fully qualified user: for example, @user:server.com Returns: {\"room_id\": \"!636q39766251:server.com\"} \"\"\" url = self . url ( f \"join/ { room_id_or_alias } \" ) data = { \"user_id\" : user_id } result = await self . request ( RequestMethods . POST , url , json = data ) return result","title":"EditRoomMembership"},{"location":"endpoints/v1/edit_room_membership/#matrix_admin_sdk.endpoints.v1.edit_room_membership.EditRoomMembership.join_user_to_room","text":"This API allows an administrator to join an user account with a given user_id to a room with a given room_id_or_alias. You can only modify the membership of local users. The server administrator must be in the room and have permission to invite users. Parameters: Name Type Description Default room_id_or_alias str The room identifier or alias to join: for example, !636q39766251:server.com required user_id str Fully qualified user: for example, @user :server.com required Source code in matrix_admin_sdk/endpoints/v1/edit_room_membership.py async def join_user_to_room ( self , room_id_or_alias : str , user_id : str ) -> Dict [ str , str ]: \"\"\" This API allows an administrator to join an user account with a given user_id to a room with a given room_id_or_alias. You can only modify the membership of local users. The server administrator must be in the room and have permission to invite users. Args: room_id_or_alias: The room identifier or alias to join: for example, !636q39766251:server.com user_id: Fully qualified user: for example, @user:server.com Returns: {\"room_id\": \"!636q39766251:server.com\"} \"\"\" url = self . url ( f \"join/ { room_id_or_alias } \" ) data = { \"user_id\" : user_id } result = await self . request ( RequestMethods . POST , url , json = data ) return result","title":"join_user_to_room()"},{"location":"endpoints/v1/event_reports/","text":"Event Reports \u00b6 Endpoints \u00b6 EventReports \u00b6 Event Reports endpoint Source code in matrix_admin_sdk/endpoints/v1/event_reports.py class EventReports ( Endpoint ): \"\"\"Event Reports endpoint\"\"\" async def show_reported_events ( self , limit : int = 100 , from_ : int = 0 , dir_ : str = \"b\" , user_id : Optional [ str ] = None , room_id : Optional [ str ] = None , ) -> EventReportsModel : \"\"\" This API returns information about reported events Args: limit: used for pagination, denoting the maximum number of items to return in this call from_: used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of `next_token` from a previous call dir_: Direction of event report order. Whether to fetch the most recent first (b) or the oldest first (f). user_id: filters to only return users with user IDs that contain this value. This is the user who reported the event and wrote the reason room_id: filters to only return rooms with room IDs that contain this value. Returns: list of event reports \"\"\" url = self . url ( \"event_reports\" ) params = { \"limit\" : limit , \"from\" : from_ , \"dir\" : dir_ , \"user_id\" : user_id , \"room_id\" : room_id , } result = await self . request ( RequestMethods . GET , url , params = params ) return EventReportsModel . from_dict ( result ) async def show_details ( self , report_id : str ) -> EventDetails : \"\"\" This API returns information about a specific event report. Args: report_id: The ID of the event report Returns: event details \"\"\" url = self . url ( f \"event_reports/ { report_id } \" ) result = await self . request ( RequestMethods . GET , url ) return EventDetails . from_dict ( result ) show_details ( self , report_id ) async \u00b6 This API returns information about a specific event report. Parameters: Name Type Description Default report_id str The ID of the event report required Source code in matrix_admin_sdk/endpoints/v1/event_reports.py async def show_details ( self , report_id : str ) -> EventDetails : \"\"\" This API returns information about a specific event report. Args: report_id: The ID of the event report Returns: event details \"\"\" url = self . url ( f \"event_reports/ { report_id } \" ) result = await self . request ( RequestMethods . GET , url ) return EventDetails . from_dict ( result ) show_reported_events ( self , limit = 100 , from_ = 0 , dir_ = 'b' , user_id = None , room_id = None ) async \u00b6 This API returns information about reported events Parameters: Name Type Description Default limit int used for pagination, denoting the maximum number of items to return in this call 100 from_ int used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call 0 dir_ str Direction of event report order. Whether to fetch the most recent first (b) or the oldest first (f). 'b' user_id Optional[str] filters to only return users with user IDs that contain this value. This is the user who reported the event and wrote the reason None room_id Optional[str] filters to only return rooms with room IDs that contain this value. None Source code in matrix_admin_sdk/endpoints/v1/event_reports.py async def show_reported_events ( self , limit : int = 100 , from_ : int = 0 , dir_ : str = \"b\" , user_id : Optional [ str ] = None , room_id : Optional [ str ] = None , ) -> EventReportsModel : \"\"\" This API returns information about reported events Args: limit: used for pagination, denoting the maximum number of items to return in this call from_: used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of `next_token` from a previous call dir_: Direction of event report order. Whether to fetch the most recent first (b) or the oldest first (f). user_id: filters to only return users with user IDs that contain this value. This is the user who reported the event and wrote the reason room_id: filters to only return rooms with room IDs that contain this value. Returns: list of event reports \"\"\" url = self . url ( \"event_reports\" ) params = { \"limit\" : limit , \"from\" : from_ , \"dir\" : dir_ , \"user_id\" : user_id , \"room_id\" : room_id , } result = await self . request ( RequestMethods . GET , url , params = params ) return EventReportsModel . from_dict ( result ) Models \u00b6 EventDetails \u00b6 Event details model. Attributes: Name Type Description id int ID of event report. received_ts int The timestamp (in milliseconds since the unix epoch) when this report was sent. room_id str The ID of the room in which the event being reported is located. name str The name of the room. event_id str The ID of the reported event. user_id str This is the user who reported the event and wrote the reason. reason str Comment made by the user_id in this report. May be blank. score int Content is reported based upon a negative score, where -100 is \"most offensive\" and 0 is \"inoffensive\". sender str This is the ID of the user who sent the original message/event that was reported. canonical_alias str The canonical alias of the room. null if the room does not have a canonical alias set. event_json EventJson Details of the original event that was reported. Source code in matrix_admin_sdk/models/v1/event_reports.py class EventDetails : \"\"\" Event details model. Attributes: id (int): ID of event report. received_ts (int): The timestamp (in milliseconds since the unix epoch) when this report was sent. room_id (str): The ID of the room in which the event being reported is located. name (str): The name of the room. event_id (str): The ID of the reported event. user_id (str): This is the user who reported the event and wrote the reason. reason (str): Comment made by the user_id in this report. May be blank. score (int): Content is reported based upon a negative score, where -100 is \"most offensive\" and 0 is \"inoffensive\". sender (str): This is the ID of the user who sent the original message/event that was reported. canonical_alias (str): The canonical alias of the room. null if the room does not have a canonical alias set. event_json (EventJson): Details of the original event that was reported. \"\"\" event_json : EventJson id : int received_ts : int room_id : str name : str event_id : str user_id : str reason : str score : int sender : str canonical_alias : str @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"EventDetails\" : event_json = EventJson . from_dict ( data [ \"event_json\" ]) del data [ \"event_json\" ] return cls ( ** data , event_json = event_json ) EventJson \u00b6 EventJson(auth_events: List[str], content: matrix_admin_sdk.models.v1.event_reports.EventContent, depth: int, hashes: Dict[str, str], origin: str, origin_server_ts: int, prev_events: List[str], prev_state: List[str], room_id: str, sender: str, signatures: Dict[str, Dict[str, str]], type: str, unsigned: Dict[str, int]) Source code in matrix_admin_sdk/models/v1/event_reports.py class EventJson ( BaseModel ): auth_events : List [ str ] content : EventContent depth : int hashes : Dict [ str , str ] origin : str origin_server_ts : int prev_events : List [ str ] prev_state : List [ str ] room_id : str sender : str signatures : Signatures type : str unsigned : Dict [ str , int ] @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"EventJson\" : data = data . copy () content = EventContent . from_dict ( data [ \"content\" ]) del data [ \"content\" ] return cls ( ** data , content = content ) EventContent \u00b6 EventContent(body: str, format: str, formatted_body: str, msgtype: str) Source code in matrix_admin_sdk/models/v1/event_reports.py class EventContent ( BaseModel ): body : str format : str formatted_body : str msgtype : str EventReports \u00b6 List of Event Reports Attributes: Name Type Description event_reports List[EventReport] List of Event Reports next_token int Indication for pagination total int Total number of event reports related to the query Source code in matrix_admin_sdk/models/v1/event_reports.py class EventReports ( BaseModel ): \"\"\" List of Event Reports Attributes: event_reports (List[EventReport]): List of Event Reports next_token (int): Indication for pagination total (int): Total number of event reports related to the query \"\"\" event_reports : List [ EventReport ] next_token : int total : int @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"EventReports\" : return cls ( next_token = data [ \"next_token\" ], total = data [ \"total\" ], event_reports = [ EventReport . from_dict ( i ) for i in data [ \"event_reports\" ]], ) EventReport \u00b6 Event report model. Attributes: Name Type Description event_id str The ID of the reported event id int ID of event report reason str|None Comment made by the user_id in this report score int|None Content is reported based upon a negative score, where -100 is \"most offensive\" and 0 is \"inoffensive\" received_ts int The timestamp (in milliseconds since the unix epoch) when this report was sent canonical_alias str The canonical alias of the room. null if the room does not have a canonical alias set. room_id str The ID of the room in which the event being reported is located name str The name of the room sender str This is the ID of the user who sent the original message/event that was reported. user_id str This is the user who reported the event and wrote the reason Source code in matrix_admin_sdk/models/v1/event_reports.py class EventReport ( BaseModel ): \"\"\" Event report model. Attributes: event_id (str): The ID of the reported event id (int): ID of event report reason (str|None): Comment made by the user_id in this report score (int|None): Content is reported based upon a negative score, where -100 is \"most offensive\" and 0 is \"inoffensive\" received_ts (int): The timestamp (in milliseconds since the unix epoch) when this report was sent canonical_alias (str): The canonical alias of the room. null if the room does not have a canonical alias set. room_id (str): The ID of the room in which the event being reported is located name (str): The name of the room sender (str): This is the ID of the user who sent the original message/event that was reported. user_id (str): This is the user who reported the event and wrote the reason \"\"\" event_id : str id : int reason : Optional [ str ] score : Optional [ int ] received_ts : int canonical_alias : str room_id : str name : str sender : str user_id : str","title":"Event Reports"},{"location":"endpoints/v1/event_reports/#event-reports","text":"","title":"Event Reports"},{"location":"endpoints/v1/event_reports/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/event_reports/#eventreports","text":"Event Reports endpoint Source code in matrix_admin_sdk/endpoints/v1/event_reports.py class EventReports ( Endpoint ): \"\"\"Event Reports endpoint\"\"\" async def show_reported_events ( self , limit : int = 100 , from_ : int = 0 , dir_ : str = \"b\" , user_id : Optional [ str ] = None , room_id : Optional [ str ] = None , ) -> EventReportsModel : \"\"\" This API returns information about reported events Args: limit: used for pagination, denoting the maximum number of items to return in this call from_: used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of `next_token` from a previous call dir_: Direction of event report order. Whether to fetch the most recent first (b) or the oldest first (f). user_id: filters to only return users with user IDs that contain this value. This is the user who reported the event and wrote the reason room_id: filters to only return rooms with room IDs that contain this value. Returns: list of event reports \"\"\" url = self . url ( \"event_reports\" ) params = { \"limit\" : limit , \"from\" : from_ , \"dir\" : dir_ , \"user_id\" : user_id , \"room_id\" : room_id , } result = await self . request ( RequestMethods . GET , url , params = params ) return EventReportsModel . from_dict ( result ) async def show_details ( self , report_id : str ) -> EventDetails : \"\"\" This API returns information about a specific event report. Args: report_id: The ID of the event report Returns: event details \"\"\" url = self . url ( f \"event_reports/ { report_id } \" ) result = await self . request ( RequestMethods . GET , url ) return EventDetails . from_dict ( result )","title":"EventReports"},{"location":"endpoints/v1/event_reports/#matrix_admin_sdk.endpoints.v1.event_reports.EventReports.show_details","text":"This API returns information about a specific event report. Parameters: Name Type Description Default report_id str The ID of the event report required Source code in matrix_admin_sdk/endpoints/v1/event_reports.py async def show_details ( self , report_id : str ) -> EventDetails : \"\"\" This API returns information about a specific event report. Args: report_id: The ID of the event report Returns: event details \"\"\" url = self . url ( f \"event_reports/ { report_id } \" ) result = await self . request ( RequestMethods . GET , url ) return EventDetails . from_dict ( result )","title":"show_details()"},{"location":"endpoints/v1/event_reports/#matrix_admin_sdk.endpoints.v1.event_reports.EventReports.show_reported_events","text":"This API returns information about reported events Parameters: Name Type Description Default limit int used for pagination, denoting the maximum number of items to return in this call 100 from_ int used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call 0 dir_ str Direction of event report order. Whether to fetch the most recent first (b) or the oldest first (f). 'b' user_id Optional[str] filters to only return users with user IDs that contain this value. This is the user who reported the event and wrote the reason None room_id Optional[str] filters to only return rooms with room IDs that contain this value. None Source code in matrix_admin_sdk/endpoints/v1/event_reports.py async def show_reported_events ( self , limit : int = 100 , from_ : int = 0 , dir_ : str = \"b\" , user_id : Optional [ str ] = None , room_id : Optional [ str ] = None , ) -> EventReportsModel : \"\"\" This API returns information about reported events Args: limit: used for pagination, denoting the maximum number of items to return in this call from_: used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of `next_token` from a previous call dir_: Direction of event report order. Whether to fetch the most recent first (b) or the oldest first (f). user_id: filters to only return users with user IDs that contain this value. This is the user who reported the event and wrote the reason room_id: filters to only return rooms with room IDs that contain this value. Returns: list of event reports \"\"\" url = self . url ( \"event_reports\" ) params = { \"limit\" : limit , \"from\" : from_ , \"dir\" : dir_ , \"user_id\" : user_id , \"room_id\" : room_id , } result = await self . request ( RequestMethods . GET , url , params = params ) return EventReportsModel . from_dict ( result )","title":"show_reported_events()"},{"location":"endpoints/v1/event_reports/#models","text":"","title":"Models"},{"location":"endpoints/v1/event_reports/#eventdetails","text":"Event details model. Attributes: Name Type Description id int ID of event report. received_ts int The timestamp (in milliseconds since the unix epoch) when this report was sent. room_id str The ID of the room in which the event being reported is located. name str The name of the room. event_id str The ID of the reported event. user_id str This is the user who reported the event and wrote the reason. reason str Comment made by the user_id in this report. May be blank. score int Content is reported based upon a negative score, where -100 is \"most offensive\" and 0 is \"inoffensive\". sender str This is the ID of the user who sent the original message/event that was reported. canonical_alias str The canonical alias of the room. null if the room does not have a canonical alias set. event_json EventJson Details of the original event that was reported. Source code in matrix_admin_sdk/models/v1/event_reports.py class EventDetails : \"\"\" Event details model. Attributes: id (int): ID of event report. received_ts (int): The timestamp (in milliseconds since the unix epoch) when this report was sent. room_id (str): The ID of the room in which the event being reported is located. name (str): The name of the room. event_id (str): The ID of the reported event. user_id (str): This is the user who reported the event and wrote the reason. reason (str): Comment made by the user_id in this report. May be blank. score (int): Content is reported based upon a negative score, where -100 is \"most offensive\" and 0 is \"inoffensive\". sender (str): This is the ID of the user who sent the original message/event that was reported. canonical_alias (str): The canonical alias of the room. null if the room does not have a canonical alias set. event_json (EventJson): Details of the original event that was reported. \"\"\" event_json : EventJson id : int received_ts : int room_id : str name : str event_id : str user_id : str reason : str score : int sender : str canonical_alias : str @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"EventDetails\" : event_json = EventJson . from_dict ( data [ \"event_json\" ]) del data [ \"event_json\" ] return cls ( ** data , event_json = event_json )","title":"EventDetails"},{"location":"endpoints/v1/event_reports/#eventjson","text":"EventJson(auth_events: List[str], content: matrix_admin_sdk.models.v1.event_reports.EventContent, depth: int, hashes: Dict[str, str], origin: str, origin_server_ts: int, prev_events: List[str], prev_state: List[str], room_id: str, sender: str, signatures: Dict[str, Dict[str, str]], type: str, unsigned: Dict[str, int]) Source code in matrix_admin_sdk/models/v1/event_reports.py class EventJson ( BaseModel ): auth_events : List [ str ] content : EventContent depth : int hashes : Dict [ str , str ] origin : str origin_server_ts : int prev_events : List [ str ] prev_state : List [ str ] room_id : str sender : str signatures : Signatures type : str unsigned : Dict [ str , int ] @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"EventJson\" : data = data . copy () content = EventContent . from_dict ( data [ \"content\" ]) del data [ \"content\" ] return cls ( ** data , content = content )","title":"EventJson"},{"location":"endpoints/v1/event_reports/#eventcontent","text":"EventContent(body: str, format: str, formatted_body: str, msgtype: str) Source code in matrix_admin_sdk/models/v1/event_reports.py class EventContent ( BaseModel ): body : str format : str formatted_body : str msgtype : str","title":"EventContent"},{"location":"endpoints/v1/event_reports/#eventreports_1","text":"List of Event Reports Attributes: Name Type Description event_reports List[EventReport] List of Event Reports next_token int Indication for pagination total int Total number of event reports related to the query Source code in matrix_admin_sdk/models/v1/event_reports.py class EventReports ( BaseModel ): \"\"\" List of Event Reports Attributes: event_reports (List[EventReport]): List of Event Reports next_token (int): Indication for pagination total (int): Total number of event reports related to the query \"\"\" event_reports : List [ EventReport ] next_token : int total : int @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"EventReports\" : return cls ( next_token = data [ \"next_token\" ], total = data [ \"total\" ], event_reports = [ EventReport . from_dict ( i ) for i in data [ \"event_reports\" ]], )","title":"EventReports"},{"location":"endpoints/v1/event_reports/#eventreport","text":"Event report model. Attributes: Name Type Description event_id str The ID of the reported event id int ID of event report reason str|None Comment made by the user_id in this report score int|None Content is reported based upon a negative score, where -100 is \"most offensive\" and 0 is \"inoffensive\" received_ts int The timestamp (in milliseconds since the unix epoch) when this report was sent canonical_alias str The canonical alias of the room. null if the room does not have a canonical alias set. room_id str The ID of the room in which the event being reported is located name str The name of the room sender str This is the ID of the user who sent the original message/event that was reported. user_id str This is the user who reported the event and wrote the reason Source code in matrix_admin_sdk/models/v1/event_reports.py class EventReport ( BaseModel ): \"\"\" Event report model. Attributes: event_id (str): The ID of the reported event id (int): ID of event report reason (str|None): Comment made by the user_id in this report score (int|None): Content is reported based upon a negative score, where -100 is \"most offensive\" and 0 is \"inoffensive\" received_ts (int): The timestamp (in milliseconds since the unix epoch) when this report was sent canonical_alias (str): The canonical alias of the room. null if the room does not have a canonical alias set. room_id (str): The ID of the room in which the event being reported is located name (str): The name of the room sender (str): This is the ID of the user who sent the original message/event that was reported. user_id (str): This is the user who reported the event and wrote the reason \"\"\" event_id : str id : int reason : Optional [ str ] score : Optional [ int ] received_ts : int canonical_alias : str room_id : str name : str sender : str user_id : str","title":"EventReport"},{"location":"endpoints/v1/federation/","text":"Federation \u00b6 Endpoints \u00b6 Federation \u00b6 This API allows a server administrator to manage Synapse's federation with other homeservers. Source code in matrix_admin_sdk/endpoints/v1/federation.py class Federation ( Endpoint ): \"\"\" This API allows a server administrator to manage Synapse's federation with other homeservers. \"\"\" async def get_destinations ( self , from_ : int = 0 , limit : int = 100 , order_by : Optional [ OrderBy ] = None , dir_ : str = \"f\" , ) -> DestinationsModel : \"\"\" This API gets the current destination retry timing info for all remote servers. The list contains all the servers with which the server federates, regardless of whether an error occurred or not. If an error occurs, it may take up to 20 minutes for the error to be displayed here, as a complete retry must have failed. Args: from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of destinations to return. Defaults to 100. order_by: The method in which to sort the returned list of destinations. Default: OrderBy.DESTINATION dir_: Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f Returns: \"\"\" url = self . url ( \"federation/destinations\" ) order_by = order_by if order_by is not None else OrderBy . DESTINATION params = { \"from\" : from_ , \"limit\" : limit , \"order_by\" : order_by . value , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : DestinationsModel = DestinationsModel . from_dict ( result ) return res async def get_destination_details ( self , destination : str ) -> DestinationModel : \"\"\" This API gets the retry timing info for a specific remote server. Args: destination: Name of the remote server Returns: DestinationModel \"\"\" url = self . url ( f \"federation/destinations/ { destination } \" ) result = await self . request ( RequestMethods . GET , url ) res : DestinationModel = DestinationModel . from_dict ( result ) return res async def get_destination_rooms ( self , destination : str , from_ : int = 0 , limit : int = 100 , dir_ : str = \"f\" , ) -> DestinationRoomsModel : \"\"\" This API gets the rooms that federate with a specific remote server. Args: destination: Name of the remote server from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of destinations to return. Defaults to 100. dir_: Direction of room order by room_id. Either f for forwards or b for backwards. Defaults to f Returns: DestinationRoomsModel \"\"\" url = self . url ( f \"federation/destinations/ { destination } /rooms\" ) params = { \"from\" : from_ , \"limit\" : limit , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : DestinationRoomsModel = DestinationRoomsModel . from_dict ( result ) return res async def reset_connection_timeout ( self , destination : str ) -> None : \"\"\" Synapse makes federation requests to other homeservers. If a federation request fails, Synapse will mark the destination homeserver as offline, preventing any future requests to that server for a \"cooldown\" period. This period grows over time if the server continues to fail its responses (exponential backoff). Admins can cancel the cooldown period with this API. This API resets the retry timing for a specific remote server and tries to connect to the remote server again. It does not wait for the next retry_interval. The connection must have previously run into an error and retry_last_ts (Destination Details API) must not be equal to 0. The connection attempt is carried out in the background and can take a while even if the API already returns the http status 200. Args: destination: Name of the remote server Returns: None \"\"\" url = self . url ( f \"federation/destinations/ { destination } /reset_connection\" ) await self . request ( RequestMethods . POST , url , json = {}) get_destination_details ( self , destination ) async \u00b6 This API gets the retry timing info for a specific remote server. Parameters: Name Type Description Default destination str Name of the remote server required Source code in matrix_admin_sdk/endpoints/v1/federation.py async def get_destination_details ( self , destination : str ) -> DestinationModel : \"\"\" This API gets the retry timing info for a specific remote server. Args: destination: Name of the remote server Returns: DestinationModel \"\"\" url = self . url ( f \"federation/destinations/ { destination } \" ) result = await self . request ( RequestMethods . GET , url ) res : DestinationModel = DestinationModel . from_dict ( result ) return res get_destination_rooms ( self , destination , from_ = 0 , limit = 100 , dir_ = 'f' ) async \u00b6 This API gets the rooms that federate with a specific remote server. Parameters: Name Type Description Default destination str Name of the remote server required from_ int Offset in the returned list. Defaults to 0 0 limit int Maximum amount of destinations to return. Defaults to 100. 100 dir_ str Direction of room order by room_id. Either f for forwards or b for backwards. Defaults to f 'f' Source code in matrix_admin_sdk/endpoints/v1/federation.py async def get_destination_rooms ( self , destination : str , from_ : int = 0 , limit : int = 100 , dir_ : str = \"f\" , ) -> DestinationRoomsModel : \"\"\" This API gets the rooms that federate with a specific remote server. Args: destination: Name of the remote server from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of destinations to return. Defaults to 100. dir_: Direction of room order by room_id. Either f for forwards or b for backwards. Defaults to f Returns: DestinationRoomsModel \"\"\" url = self . url ( f \"federation/destinations/ { destination } /rooms\" ) params = { \"from\" : from_ , \"limit\" : limit , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : DestinationRoomsModel = DestinationRoomsModel . from_dict ( result ) return res get_destinations ( self , from_ = 0 , limit = 100 , order_by = None , dir_ = 'f' ) async \u00b6 This API gets the current destination retry timing info for all remote servers. The list contains all the servers with which the server federates, regardless of whether an error occurred or not. If an error occurs, it may take up to 20 minutes for the error to be displayed here, as a complete retry must have failed. Parameters: Name Type Description Default from_ int Offset in the returned list. Defaults to 0 0 limit int Maximum amount of destinations to return. Defaults to 100. 100 order_by Optional[matrix_admin_sdk.endpoints.v1.federation.OrderBy] The method in which to sort the returned list of destinations. Default: OrderBy.DESTINATION None dir_ str Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f 'f' Source code in matrix_admin_sdk/endpoints/v1/federation.py async def get_destinations ( self , from_ : int = 0 , limit : int = 100 , order_by : Optional [ OrderBy ] = None , dir_ : str = \"f\" , ) -> DestinationsModel : \"\"\" This API gets the current destination retry timing info for all remote servers. The list contains all the servers with which the server federates, regardless of whether an error occurred or not. If an error occurs, it may take up to 20 minutes for the error to be displayed here, as a complete retry must have failed. Args: from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of destinations to return. Defaults to 100. order_by: The method in which to sort the returned list of destinations. Default: OrderBy.DESTINATION dir_: Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f Returns: \"\"\" url = self . url ( \"federation/destinations\" ) order_by = order_by if order_by is not None else OrderBy . DESTINATION params = { \"from\" : from_ , \"limit\" : limit , \"order_by\" : order_by . value , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : DestinationsModel = DestinationsModel . from_dict ( result ) return res reset_connection_timeout ( self , destination ) async \u00b6 Synapse makes federation requests to other homeservers. If a federation request fails, Synapse will mark the destination homeserver as offline, preventing any future requests to that server for a \"cooldown\" period. This period grows over time if the server continues to fail its responses (exponential backoff). Admins can cancel the cooldown period with this API. This API resets the retry timing for a specific remote server and tries to connect to the remote server again. It does not wait for the next retry_interval. The connection must have previously run into an error and retry_last_ts (Destination Details API) must not be equal to 0. The connection attempt is carried out in the background and can take a while even if the API already returns the http status 200. Parameters: Name Type Description Default destination str Name of the remote server required Source code in matrix_admin_sdk/endpoints/v1/federation.py async def reset_connection_timeout ( self , destination : str ) -> None : \"\"\" Synapse makes federation requests to other homeservers. If a federation request fails, Synapse will mark the destination homeserver as offline, preventing any future requests to that server for a \"cooldown\" period. This period grows over time if the server continues to fail its responses (exponential backoff). Admins can cancel the cooldown period with this API. This API resets the retry timing for a specific remote server and tries to connect to the remote server again. It does not wait for the next retry_interval. The connection must have previously run into an error and retry_last_ts (Destination Details API) must not be equal to 0. The connection attempt is carried out in the background and can take a while even if the API already returns the http status 200. Args: destination: Name of the remote server Returns: None \"\"\" url = self . url ( f \"federation/destinations/ { destination } /reset_connection\" ) await self . request ( RequestMethods . POST , url , json = {}) Models \u00b6 DestinationsModel \u00b6 A list of destinations. Attributes: Name Type Description destinations list[DestinationModel] An array of objects, each containing information about a destination total int Total number of destinations next_token int|None Indication for pagination Source code in matrix_admin_sdk/models/v1/federation.py class DestinationsModel ( BaseModel ): \"\"\" A list of destinations. Attributes: destinations (list[DestinationModel]): An array of objects, each containing information about a destination total (int): Total number of destinations next_token (int|None): Indication for pagination \"\"\" destinations : List [ DestinationModel ] total : int next_token : Optional [ int ] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"DestinationsModel\" : destinations = [ DestinationModel . from_dict ( d ) for d in data [ \"destinations\" ]] return cls ( destinations = destinations , total = data [ \"total\" ], next_token = data . get ( \"next_token\" ), ) DestinationModel \u00b6 Class representing a destination model. Attributes: Name Type Description destination str Name of the remote server to federate retry_last_ts int The last time Synapse tried and failed to reach the remote server, in ms. This is 0 if the last attempt to communicate with the remote server was successful retry_interval int How long since the last time Synapse tried to reach the remote server before trying again, in ms. This is 0 if no further retrying occuring failure_ts Optional[int] (int|None): The first time Synapse tried and failed to reach the remote server, in ms. This is null if communication with the remote server has never failed. last_successful_stream_ordering Optional[int] (int|None): The stream ordering of the most recent successfully-sent PDU to this destination, or null if this information has not been tracked yet. Source code in matrix_admin_sdk/models/v1/federation.py class DestinationModel ( BaseModel ): \"\"\" Class representing a destination model. Attributes: destination (str): Name of the remote server to federate retry_last_ts (int): The last time Synapse tried and failed to reach the remote server, in ms. This is 0 if the last attempt to communicate with the remote server was successful retry_interval (int): How long since the last time Synapse tried to reach the remote server before trying again, in ms. This is 0 if no further retrying occuring failure_ts: (int|None): The first time Synapse tried and failed to reach the remote server, in ms. This is null if communication with the remote server has never failed. last_successful_stream_ordering: (int|None): The stream ordering of the most recent successfully-sent PDU to this destination, or null if this information has not been tracked yet. \"\"\" destination : str retry_last_ts : int retry_interval : int failure_ts : Optional [ int ] = None last_successful_stream_ordering : Optional [ int ] = None DestinationRoomsModel \u00b6 A list of rooms in a destination. Attributes: Name Type Description rooms list[DestinationRoomModel] An array of objects, each containing information about a room total int Total number of destinations next_token int|None Indication for pagination Source code in matrix_admin_sdk/models/v1/federation.py class DestinationRoomsModel ( BaseModel ): \"\"\" A list of rooms in a destination. Attributes: rooms (list[DestinationRoomModel]): An array of objects, each containing information about a room total (int): Total number of destinations next_token (int|None): Indication for pagination \"\"\" rooms : List [ DestinationRoomModel ] total : int next_token : Optional [ int ] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"DestinationRoomsModel\" : rooms = [ DestinationRoomModel . from_dict ( d ) for d in data [ \"rooms\" ]] return cls ( rooms = rooms , total = data [ \"total\" ], next_token = data . get ( \"next_token\" ), ) DestinationRoomModel \u00b6 Class representing a destination room model. Attributes: Name Type Description room_id str The ID of the room stream_ordering int The stream ordering of the most recent successfully-sent PDU to this destination in this room Source code in matrix_admin_sdk/models/v1/federation.py class DestinationRoomModel ( BaseModel ): \"\"\" Class representing a destination room model. Attributes: room_id (str): The ID of the room stream_ordering (int): The stream ordering of the most recent successfully-sent PDU to this destination in this room \"\"\" room_id : str stream_ordering : int","title":"Federation"},{"location":"endpoints/v1/federation/#federation","text":"","title":"Federation"},{"location":"endpoints/v1/federation/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/federation/#federation_1","text":"This API allows a server administrator to manage Synapse's federation with other homeservers. Source code in matrix_admin_sdk/endpoints/v1/federation.py class Federation ( Endpoint ): \"\"\" This API allows a server administrator to manage Synapse's federation with other homeservers. \"\"\" async def get_destinations ( self , from_ : int = 0 , limit : int = 100 , order_by : Optional [ OrderBy ] = None , dir_ : str = \"f\" , ) -> DestinationsModel : \"\"\" This API gets the current destination retry timing info for all remote servers. The list contains all the servers with which the server federates, regardless of whether an error occurred or not. If an error occurs, it may take up to 20 minutes for the error to be displayed here, as a complete retry must have failed. Args: from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of destinations to return. Defaults to 100. order_by: The method in which to sort the returned list of destinations. Default: OrderBy.DESTINATION dir_: Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f Returns: \"\"\" url = self . url ( \"federation/destinations\" ) order_by = order_by if order_by is not None else OrderBy . DESTINATION params = { \"from\" : from_ , \"limit\" : limit , \"order_by\" : order_by . value , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : DestinationsModel = DestinationsModel . from_dict ( result ) return res async def get_destination_details ( self , destination : str ) -> DestinationModel : \"\"\" This API gets the retry timing info for a specific remote server. Args: destination: Name of the remote server Returns: DestinationModel \"\"\" url = self . url ( f \"federation/destinations/ { destination } \" ) result = await self . request ( RequestMethods . GET , url ) res : DestinationModel = DestinationModel . from_dict ( result ) return res async def get_destination_rooms ( self , destination : str , from_ : int = 0 , limit : int = 100 , dir_ : str = \"f\" , ) -> DestinationRoomsModel : \"\"\" This API gets the rooms that federate with a specific remote server. Args: destination: Name of the remote server from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of destinations to return. Defaults to 100. dir_: Direction of room order by room_id. Either f for forwards or b for backwards. Defaults to f Returns: DestinationRoomsModel \"\"\" url = self . url ( f \"federation/destinations/ { destination } /rooms\" ) params = { \"from\" : from_ , \"limit\" : limit , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : DestinationRoomsModel = DestinationRoomsModel . from_dict ( result ) return res async def reset_connection_timeout ( self , destination : str ) -> None : \"\"\" Synapse makes federation requests to other homeservers. If a federation request fails, Synapse will mark the destination homeserver as offline, preventing any future requests to that server for a \"cooldown\" period. This period grows over time if the server continues to fail its responses (exponential backoff). Admins can cancel the cooldown period with this API. This API resets the retry timing for a specific remote server and tries to connect to the remote server again. It does not wait for the next retry_interval. The connection must have previously run into an error and retry_last_ts (Destination Details API) must not be equal to 0. The connection attempt is carried out in the background and can take a while even if the API already returns the http status 200. Args: destination: Name of the remote server Returns: None \"\"\" url = self . url ( f \"federation/destinations/ { destination } /reset_connection\" ) await self . request ( RequestMethods . POST , url , json = {})","title":"Federation"},{"location":"endpoints/v1/federation/#matrix_admin_sdk.endpoints.v1.federation.Federation.get_destination_details","text":"This API gets the retry timing info for a specific remote server. Parameters: Name Type Description Default destination str Name of the remote server required Source code in matrix_admin_sdk/endpoints/v1/federation.py async def get_destination_details ( self , destination : str ) -> DestinationModel : \"\"\" This API gets the retry timing info for a specific remote server. Args: destination: Name of the remote server Returns: DestinationModel \"\"\" url = self . url ( f \"federation/destinations/ { destination } \" ) result = await self . request ( RequestMethods . GET , url ) res : DestinationModel = DestinationModel . from_dict ( result ) return res","title":"get_destination_details()"},{"location":"endpoints/v1/federation/#matrix_admin_sdk.endpoints.v1.federation.Federation.get_destination_rooms","text":"This API gets the rooms that federate with a specific remote server. Parameters: Name Type Description Default destination str Name of the remote server required from_ int Offset in the returned list. Defaults to 0 0 limit int Maximum amount of destinations to return. Defaults to 100. 100 dir_ str Direction of room order by room_id. Either f for forwards or b for backwards. Defaults to f 'f' Source code in matrix_admin_sdk/endpoints/v1/federation.py async def get_destination_rooms ( self , destination : str , from_ : int = 0 , limit : int = 100 , dir_ : str = \"f\" , ) -> DestinationRoomsModel : \"\"\" This API gets the rooms that federate with a specific remote server. Args: destination: Name of the remote server from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of destinations to return. Defaults to 100. dir_: Direction of room order by room_id. Either f for forwards or b for backwards. Defaults to f Returns: DestinationRoomsModel \"\"\" url = self . url ( f \"federation/destinations/ { destination } /rooms\" ) params = { \"from\" : from_ , \"limit\" : limit , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : DestinationRoomsModel = DestinationRoomsModel . from_dict ( result ) return res","title":"get_destination_rooms()"},{"location":"endpoints/v1/federation/#matrix_admin_sdk.endpoints.v1.federation.Federation.get_destinations","text":"This API gets the current destination retry timing info for all remote servers. The list contains all the servers with which the server federates, regardless of whether an error occurred or not. If an error occurs, it may take up to 20 minutes for the error to be displayed here, as a complete retry must have failed. Parameters: Name Type Description Default from_ int Offset in the returned list. Defaults to 0 0 limit int Maximum amount of destinations to return. Defaults to 100. 100 order_by Optional[matrix_admin_sdk.endpoints.v1.federation.OrderBy] The method in which to sort the returned list of destinations. Default: OrderBy.DESTINATION None dir_ str Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f 'f' Source code in matrix_admin_sdk/endpoints/v1/federation.py async def get_destinations ( self , from_ : int = 0 , limit : int = 100 , order_by : Optional [ OrderBy ] = None , dir_ : str = \"f\" , ) -> DestinationsModel : \"\"\" This API gets the current destination retry timing info for all remote servers. The list contains all the servers with which the server federates, regardless of whether an error occurred or not. If an error occurs, it may take up to 20 minutes for the error to be displayed here, as a complete retry must have failed. Args: from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of destinations to return. Defaults to 100. order_by: The method in which to sort the returned list of destinations. Default: OrderBy.DESTINATION dir_: Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f Returns: \"\"\" url = self . url ( \"federation/destinations\" ) order_by = order_by if order_by is not None else OrderBy . DESTINATION params = { \"from\" : from_ , \"limit\" : limit , \"order_by\" : order_by . value , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : DestinationsModel = DestinationsModel . from_dict ( result ) return res","title":"get_destinations()"},{"location":"endpoints/v1/federation/#matrix_admin_sdk.endpoints.v1.federation.Federation.reset_connection_timeout","text":"Synapse makes federation requests to other homeservers. If a federation request fails, Synapse will mark the destination homeserver as offline, preventing any future requests to that server for a \"cooldown\" period. This period grows over time if the server continues to fail its responses (exponential backoff). Admins can cancel the cooldown period with this API. This API resets the retry timing for a specific remote server and tries to connect to the remote server again. It does not wait for the next retry_interval. The connection must have previously run into an error and retry_last_ts (Destination Details API) must not be equal to 0. The connection attempt is carried out in the background and can take a while even if the API already returns the http status 200. Parameters: Name Type Description Default destination str Name of the remote server required Source code in matrix_admin_sdk/endpoints/v1/federation.py async def reset_connection_timeout ( self , destination : str ) -> None : \"\"\" Synapse makes federation requests to other homeservers. If a federation request fails, Synapse will mark the destination homeserver as offline, preventing any future requests to that server for a \"cooldown\" period. This period grows over time if the server continues to fail its responses (exponential backoff). Admins can cancel the cooldown period with this API. This API resets the retry timing for a specific remote server and tries to connect to the remote server again. It does not wait for the next retry_interval. The connection must have previously run into an error and retry_last_ts (Destination Details API) must not be equal to 0. The connection attempt is carried out in the background and can take a while even if the API already returns the http status 200. Args: destination: Name of the remote server Returns: None \"\"\" url = self . url ( f \"federation/destinations/ { destination } /reset_connection\" ) await self . request ( RequestMethods . POST , url , json = {})","title":"reset_connection_timeout()"},{"location":"endpoints/v1/federation/#models","text":"","title":"Models"},{"location":"endpoints/v1/federation/#destinationsmodel","text":"A list of destinations. Attributes: Name Type Description destinations list[DestinationModel] An array of objects, each containing information about a destination total int Total number of destinations next_token int|None Indication for pagination Source code in matrix_admin_sdk/models/v1/federation.py class DestinationsModel ( BaseModel ): \"\"\" A list of destinations. Attributes: destinations (list[DestinationModel]): An array of objects, each containing information about a destination total (int): Total number of destinations next_token (int|None): Indication for pagination \"\"\" destinations : List [ DestinationModel ] total : int next_token : Optional [ int ] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"DestinationsModel\" : destinations = [ DestinationModel . from_dict ( d ) for d in data [ \"destinations\" ]] return cls ( destinations = destinations , total = data [ \"total\" ], next_token = data . get ( \"next_token\" ), )","title":"DestinationsModel"},{"location":"endpoints/v1/federation/#destinationmodel","text":"Class representing a destination model. Attributes: Name Type Description destination str Name of the remote server to federate retry_last_ts int The last time Synapse tried and failed to reach the remote server, in ms. This is 0 if the last attempt to communicate with the remote server was successful retry_interval int How long since the last time Synapse tried to reach the remote server before trying again, in ms. This is 0 if no further retrying occuring failure_ts Optional[int] (int|None): The first time Synapse tried and failed to reach the remote server, in ms. This is null if communication with the remote server has never failed. last_successful_stream_ordering Optional[int] (int|None): The stream ordering of the most recent successfully-sent PDU to this destination, or null if this information has not been tracked yet. Source code in matrix_admin_sdk/models/v1/federation.py class DestinationModel ( BaseModel ): \"\"\" Class representing a destination model. Attributes: destination (str): Name of the remote server to federate retry_last_ts (int): The last time Synapse tried and failed to reach the remote server, in ms. This is 0 if the last attempt to communicate with the remote server was successful retry_interval (int): How long since the last time Synapse tried to reach the remote server before trying again, in ms. This is 0 if no further retrying occuring failure_ts: (int|None): The first time Synapse tried and failed to reach the remote server, in ms. This is null if communication with the remote server has never failed. last_successful_stream_ordering: (int|None): The stream ordering of the most recent successfully-sent PDU to this destination, or null if this information has not been tracked yet. \"\"\" destination : str retry_last_ts : int retry_interval : int failure_ts : Optional [ int ] = None last_successful_stream_ordering : Optional [ int ] = None","title":"DestinationModel"},{"location":"endpoints/v1/federation/#destinationroomsmodel","text":"A list of rooms in a destination. Attributes: Name Type Description rooms list[DestinationRoomModel] An array of objects, each containing information about a room total int Total number of destinations next_token int|None Indication for pagination Source code in matrix_admin_sdk/models/v1/federation.py class DestinationRoomsModel ( BaseModel ): \"\"\" A list of rooms in a destination. Attributes: rooms (list[DestinationRoomModel]): An array of objects, each containing information about a room total (int): Total number of destinations next_token (int|None): Indication for pagination \"\"\" rooms : List [ DestinationRoomModel ] total : int next_token : Optional [ int ] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"DestinationRoomsModel\" : rooms = [ DestinationRoomModel . from_dict ( d ) for d in data [ \"rooms\" ]] return cls ( rooms = rooms , total = data [ \"total\" ], next_token = data . get ( \"next_token\" ), )","title":"DestinationRoomsModel"},{"location":"endpoints/v1/federation/#destinationroommodel","text":"Class representing a destination room model. Attributes: Name Type Description room_id str The ID of the room stream_ordering int The stream ordering of the most recent successfully-sent PDU to this destination in this room Source code in matrix_admin_sdk/models/v1/federation.py class DestinationRoomModel ( BaseModel ): \"\"\" Class representing a destination room model. Attributes: room_id (str): The ID of the room stream_ordering (int): The stream ordering of the most recent successfully-sent PDU to this destination in this room \"\"\" room_id : str stream_ordering : int","title":"DestinationRoomModel"},{"location":"endpoints/v1/forward_extremities/","text":"Forward Extremities \u00b6 Endpoints \u00b6 ForwardExtremities \u00b6 Enables querying and deleting forward extremities from rooms. When a lot of forward extremities accumulate in a room, performance can become degraded. For details, see https://github.com/matrix-org/synapse/issues/1760 Source code in matrix_admin_sdk/endpoints/v1/forward_extremities.py class ForwardExtremities ( Endpoint ): \"\"\" Enables querying and deleting forward extremities from rooms. When a lot of forward extremities accumulate in a room, performance can become degraded. For details, see https://github.com/matrix-org/synapse/issues/1760 \"\"\" async def check_for_forward_extremities ( self , room_id_or_alias : str ) -> List [ ForwardExtremitiesModel ]: \"\"\" To check the status of forward extremities for a room Args: room_id_or_alias: The room id or alias to check Returns: list of ForwardExtremitiesModel \"\"\" url = self . url ( f \"rooms/ { room_id_or_alias } /forward_extremities\" ) result = await self . request ( RequestMethods . GET , url ) res : List [ ForwardExtremitiesModel ] = [ ForwardExtremitiesModel . from_dict ( item ) for item in result [ \"results\" ] ] return res async def deleting_forward_extremities ( self , room_id_or_alias : str ) -> Dict [ str , int ]: \"\"\" **WARNING**: Please ensure you know what you're doing and have read the related issue #1760. Under no situations should this API be executed as an automated maintenance task! Args: room_id_or_alias: The room id or alias to delete Returns: {\"deleted\": 1} \"\"\" url = f \"rooms/ { room_id_or_alias } /forward_extremities\" result = await self . request ( RequestMethods . DELETE , url ) return result check_for_forward_extremities ( self , room_id_or_alias ) async \u00b6 To check the status of forward extremities for a room Parameters: Name Type Description Default room_id_or_alias str The room id or alias to check required Source code in matrix_admin_sdk/endpoints/v1/forward_extremities.py async def check_for_forward_extremities ( self , room_id_or_alias : str ) -> List [ ForwardExtremitiesModel ]: \"\"\" To check the status of forward extremities for a room Args: room_id_or_alias: The room id or alias to check Returns: list of ForwardExtremitiesModel \"\"\" url = self . url ( f \"rooms/ { room_id_or_alias } /forward_extremities\" ) result = await self . request ( RequestMethods . GET , url ) res : List [ ForwardExtremitiesModel ] = [ ForwardExtremitiesModel . from_dict ( item ) for item in result [ \"results\" ] ] return res deleting_forward_extremities ( self , room_id_or_alias ) async \u00b6 WARNING : Please ensure you know what you're doing and have read the related issue #1760 . Under no situations should this API be executed as an automated maintenance task! Parameters: Name Type Description Default room_id_or_alias str The room id or alias to delete required Source code in matrix_admin_sdk/endpoints/v1/forward_extremities.py async def deleting_forward_extremities ( self , room_id_or_alias : str ) -> Dict [ str , int ]: \"\"\" **WARNING**: Please ensure you know what you're doing and have read the related issue #1760. Under no situations should this API be executed as an automated maintenance task! Args: room_id_or_alias: The room id or alias to delete Returns: {\"deleted\": 1} \"\"\" url = f \"rooms/ { room_id_or_alias } /forward_extremities\" result = await self . request ( RequestMethods . DELETE , url ) return result Models \u00b6 ForwardExtremitiesModel \u00b6 ForwardExtremitiesModel() Source code in matrix_admin_sdk/models/v1/forward_extremities.py class ForwardExtremitiesModel ( BaseModel ): pass","title":"Forward Extremities"},{"location":"endpoints/v1/forward_extremities/#forward-extremities","text":"","title":"Forward Extremities"},{"location":"endpoints/v1/forward_extremities/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/forward_extremities/#forwardextremities","text":"Enables querying and deleting forward extremities from rooms. When a lot of forward extremities accumulate in a room, performance can become degraded. For details, see https://github.com/matrix-org/synapse/issues/1760 Source code in matrix_admin_sdk/endpoints/v1/forward_extremities.py class ForwardExtremities ( Endpoint ): \"\"\" Enables querying and deleting forward extremities from rooms. When a lot of forward extremities accumulate in a room, performance can become degraded. For details, see https://github.com/matrix-org/synapse/issues/1760 \"\"\" async def check_for_forward_extremities ( self , room_id_or_alias : str ) -> List [ ForwardExtremitiesModel ]: \"\"\" To check the status of forward extremities for a room Args: room_id_or_alias: The room id or alias to check Returns: list of ForwardExtremitiesModel \"\"\" url = self . url ( f \"rooms/ { room_id_or_alias } /forward_extremities\" ) result = await self . request ( RequestMethods . GET , url ) res : List [ ForwardExtremitiesModel ] = [ ForwardExtremitiesModel . from_dict ( item ) for item in result [ \"results\" ] ] return res async def deleting_forward_extremities ( self , room_id_or_alias : str ) -> Dict [ str , int ]: \"\"\" **WARNING**: Please ensure you know what you're doing and have read the related issue #1760. Under no situations should this API be executed as an automated maintenance task! Args: room_id_or_alias: The room id or alias to delete Returns: {\"deleted\": 1} \"\"\" url = f \"rooms/ { room_id_or_alias } /forward_extremities\" result = await self . request ( RequestMethods . DELETE , url ) return result","title":"ForwardExtremities"},{"location":"endpoints/v1/forward_extremities/#matrix_admin_sdk.endpoints.v1.forward_extremities.ForwardExtremities.check_for_forward_extremities","text":"To check the status of forward extremities for a room Parameters: Name Type Description Default room_id_or_alias str The room id or alias to check required Source code in matrix_admin_sdk/endpoints/v1/forward_extremities.py async def check_for_forward_extremities ( self , room_id_or_alias : str ) -> List [ ForwardExtremitiesModel ]: \"\"\" To check the status of forward extremities for a room Args: room_id_or_alias: The room id or alias to check Returns: list of ForwardExtremitiesModel \"\"\" url = self . url ( f \"rooms/ { room_id_or_alias } /forward_extremities\" ) result = await self . request ( RequestMethods . GET , url ) res : List [ ForwardExtremitiesModel ] = [ ForwardExtremitiesModel . from_dict ( item ) for item in result [ \"results\" ] ] return res","title":"check_for_forward_extremities()"},{"location":"endpoints/v1/forward_extremities/#matrix_admin_sdk.endpoints.v1.forward_extremities.ForwardExtremities.deleting_forward_extremities","text":"WARNING : Please ensure you know what you're doing and have read the related issue #1760 . Under no situations should this API be executed as an automated maintenance task! Parameters: Name Type Description Default room_id_or_alias str The room id or alias to delete required Source code in matrix_admin_sdk/endpoints/v1/forward_extremities.py async def deleting_forward_extremities ( self , room_id_or_alias : str ) -> Dict [ str , int ]: \"\"\" **WARNING**: Please ensure you know what you're doing and have read the related issue #1760. Under no situations should this API be executed as an automated maintenance task! Args: room_id_or_alias: The room id or alias to delete Returns: {\"deleted\": 1} \"\"\" url = f \"rooms/ { room_id_or_alias } /forward_extremities\" result = await self . request ( RequestMethods . DELETE , url ) return result","title":"deleting_forward_extremities()"},{"location":"endpoints/v1/forward_extremities/#models","text":"","title":"Models"},{"location":"endpoints/v1/forward_extremities/#forwardextremitiesmodel","text":"ForwardExtremitiesModel() Source code in matrix_admin_sdk/models/v1/forward_extremities.py class ForwardExtremitiesModel ( BaseModel ): pass","title":"ForwardExtremitiesModel"},{"location":"endpoints/v1/purge_history/","text":"Purge History \u00b6 Edpoints \u00b6 PurgeHistory \u00b6 The purge history API allows server admins to purge historic events from their database, reclaiming disk space. Depending on the amount of history being purged a call to the API may take several minutes or longer. During this period users will not be able to paginate further back in the room from the point being purged from. Source code in matrix_admin_sdk/endpoints/v1/purge_history.py class PurgeHistory ( Endpoint ): \"\"\" The purge history API allows server admins to purge historic events from their database, reclaiming disk space. Depending on the amount of history being purged a call to the API may take several minutes or longer. During this period users will not be able to paginate further back in the room from the point being purged from. \"\"\" async def purge_room_history ( self , room_id : str , event_id : str , delete_local_events : bool = False , purge_up_to_event_id : Optional [ str ] = None , purge_up_to_ts : Optional [ int ] = None , ) -> Dict [ str , str ]: \"\"\" By default, events sent by local users are not deleted, as they may represent the only copies of this content in existence. (Events sent by remote users are deleted.) Room state data (such as joins, leaves, topic) is always preserved. To delete local message events as well, set delete_local_events in the body The caller must specify the point in the room to purge up to. This can be specified by including an event_id in the URI, or by setting a purge_up_to_event_id or purge_up_to_ts in the request body. If an event id is given, that event (and others at the same graph depth) will be retained. If purge_up_to_ts is given, it should be a timestamp since the unix epoch, in milliseconds. The API starts the purge running, and returns immediately with a JSON body with a purge id Args: room_id: room id to purge history for event_id: event id delete_local_events: To delete local message events, Default: False purge_up_to_event_id purge_up_to_ts Returns: {\"purge_id\": \"<opaque id>\"} \"\"\" url = self . url ( f \"purge_history/ { room_id } / { event_id } \" ) data : Dict [ str , Any ] = { \"delete_local_events\" : delete_local_events , } if purge_up_to_event_id is not None : data [ \"purge_up_to_event_id\" ] = purge_up_to_event_id if purge_up_to_ts is not None : data [ \"purge_up_to_ts\" ] = purge_up_to_ts result = await self . request ( RequestMethods . POST , url , json = data ) return result async def purge_status_query ( self , purge_id : str ) -> Dict [ str , str ]: \"\"\" It is possible to poll for updates on recent purges Args: purge_id: Returns: {\"status\": \"active\"}. The status will be one of active, complete, or failed. If status is failed there will be a string error with the error message. \"\"\" url = self . url ( f \"purge_history_status/ { purge_id } \" ) result = await self . request ( RequestMethods . GET , url ) return result purge_room_history ( self , room_id , event_id , delete_local_events = False , purge_up_to_event_id = None , purge_up_to_ts = None ) async \u00b6 By default, events sent by local users are not deleted, as they may represent the only copies of this content in existence. (Events sent by remote users are deleted.) Room state data (such as joins, leaves, topic) is always preserved. To delete local message events as well, set delete_local_events in the body The caller must specify the point in the room to purge up to. This can be specified by including an event_id in the URI, or by setting a purge_up_to_event_id or purge_up_to_ts in the request body. If an event id is given, that event (and others at the same graph depth) will be retained. If purge_up_to_ts is given, it should be a timestamp since the unix epoch, in milliseconds. The API starts the purge running, and returns immediately with a JSON body with a purge id Parameters: Name Type Description Default room_id str room id to purge history for required event_id str event id required delete_local_events bool To delete local message events, Default: False False Source code in matrix_admin_sdk/endpoints/v1/purge_history.py async def purge_room_history ( self , room_id : str , event_id : str , delete_local_events : bool = False , purge_up_to_event_id : Optional [ str ] = None , purge_up_to_ts : Optional [ int ] = None , ) -> Dict [ str , str ]: \"\"\" By default, events sent by local users are not deleted, as they may represent the only copies of this content in existence. (Events sent by remote users are deleted.) Room state data (such as joins, leaves, topic) is always preserved. To delete local message events as well, set delete_local_events in the body The caller must specify the point in the room to purge up to. This can be specified by including an event_id in the URI, or by setting a purge_up_to_event_id or purge_up_to_ts in the request body. If an event id is given, that event (and others at the same graph depth) will be retained. If purge_up_to_ts is given, it should be a timestamp since the unix epoch, in milliseconds. The API starts the purge running, and returns immediately with a JSON body with a purge id Args: room_id: room id to purge history for event_id: event id delete_local_events: To delete local message events, Default: False purge_up_to_event_id purge_up_to_ts Returns: {\"purge_id\": \"<opaque id>\"} \"\"\" url = self . url ( f \"purge_history/ { room_id } / { event_id } \" ) data : Dict [ str , Any ] = { \"delete_local_events\" : delete_local_events , } if purge_up_to_event_id is not None : data [ \"purge_up_to_event_id\" ] = purge_up_to_event_id if purge_up_to_ts is not None : data [ \"purge_up_to_ts\" ] = purge_up_to_ts result = await self . request ( RequestMethods . POST , url , json = data ) return result purge_status_query ( self , purge_id ) async \u00b6 It is possible to poll for updates on recent purges Parameters: Name Type Description Default purge_id str required {\"status\": \"active\"}. The status will be one of active, complete, or failed. If status is failed there will be a string error with the error message. Source code in matrix_admin_sdk/endpoints/v1/purge_history.py async def purge_status_query ( self , purge_id : str ) -> Dict [ str , str ]: \"\"\" It is possible to poll for updates on recent purges Args: purge_id: Returns: {\"status\": \"active\"}. The status will be one of active, complete, or failed. If status is failed there will be a string error with the error message. \"\"\" url = self . url ( f \"purge_history_status/ { purge_id } \" ) result = await self . request ( RequestMethods . GET , url ) return result","title":"Purge History"},{"location":"endpoints/v1/purge_history/#purge-history","text":"","title":"Purge History"},{"location":"endpoints/v1/purge_history/#edpoints","text":"","title":"Edpoints"},{"location":"endpoints/v1/purge_history/#purgehistory","text":"The purge history API allows server admins to purge historic events from their database, reclaiming disk space. Depending on the amount of history being purged a call to the API may take several minutes or longer. During this period users will not be able to paginate further back in the room from the point being purged from. Source code in matrix_admin_sdk/endpoints/v1/purge_history.py class PurgeHistory ( Endpoint ): \"\"\" The purge history API allows server admins to purge historic events from their database, reclaiming disk space. Depending on the amount of history being purged a call to the API may take several minutes or longer. During this period users will not be able to paginate further back in the room from the point being purged from. \"\"\" async def purge_room_history ( self , room_id : str , event_id : str , delete_local_events : bool = False , purge_up_to_event_id : Optional [ str ] = None , purge_up_to_ts : Optional [ int ] = None , ) -> Dict [ str , str ]: \"\"\" By default, events sent by local users are not deleted, as they may represent the only copies of this content in existence. (Events sent by remote users are deleted.) Room state data (such as joins, leaves, topic) is always preserved. To delete local message events as well, set delete_local_events in the body The caller must specify the point in the room to purge up to. This can be specified by including an event_id in the URI, or by setting a purge_up_to_event_id or purge_up_to_ts in the request body. If an event id is given, that event (and others at the same graph depth) will be retained. If purge_up_to_ts is given, it should be a timestamp since the unix epoch, in milliseconds. The API starts the purge running, and returns immediately with a JSON body with a purge id Args: room_id: room id to purge history for event_id: event id delete_local_events: To delete local message events, Default: False purge_up_to_event_id purge_up_to_ts Returns: {\"purge_id\": \"<opaque id>\"} \"\"\" url = self . url ( f \"purge_history/ { room_id } / { event_id } \" ) data : Dict [ str , Any ] = { \"delete_local_events\" : delete_local_events , } if purge_up_to_event_id is not None : data [ \"purge_up_to_event_id\" ] = purge_up_to_event_id if purge_up_to_ts is not None : data [ \"purge_up_to_ts\" ] = purge_up_to_ts result = await self . request ( RequestMethods . POST , url , json = data ) return result async def purge_status_query ( self , purge_id : str ) -> Dict [ str , str ]: \"\"\" It is possible to poll for updates on recent purges Args: purge_id: Returns: {\"status\": \"active\"}. The status will be one of active, complete, or failed. If status is failed there will be a string error with the error message. \"\"\" url = self . url ( f \"purge_history_status/ { purge_id } \" ) result = await self . request ( RequestMethods . GET , url ) return result","title":"PurgeHistory"},{"location":"endpoints/v1/purge_history/#matrix_admin_sdk.endpoints.v1.purge_history.PurgeHistory.purge_room_history","text":"By default, events sent by local users are not deleted, as they may represent the only copies of this content in existence. (Events sent by remote users are deleted.) Room state data (such as joins, leaves, topic) is always preserved. To delete local message events as well, set delete_local_events in the body The caller must specify the point in the room to purge up to. This can be specified by including an event_id in the URI, or by setting a purge_up_to_event_id or purge_up_to_ts in the request body. If an event id is given, that event (and others at the same graph depth) will be retained. If purge_up_to_ts is given, it should be a timestamp since the unix epoch, in milliseconds. The API starts the purge running, and returns immediately with a JSON body with a purge id Parameters: Name Type Description Default room_id str room id to purge history for required event_id str event id required delete_local_events bool To delete local message events, Default: False False Source code in matrix_admin_sdk/endpoints/v1/purge_history.py async def purge_room_history ( self , room_id : str , event_id : str , delete_local_events : bool = False , purge_up_to_event_id : Optional [ str ] = None , purge_up_to_ts : Optional [ int ] = None , ) -> Dict [ str , str ]: \"\"\" By default, events sent by local users are not deleted, as they may represent the only copies of this content in existence. (Events sent by remote users are deleted.) Room state data (such as joins, leaves, topic) is always preserved. To delete local message events as well, set delete_local_events in the body The caller must specify the point in the room to purge up to. This can be specified by including an event_id in the URI, or by setting a purge_up_to_event_id or purge_up_to_ts in the request body. If an event id is given, that event (and others at the same graph depth) will be retained. If purge_up_to_ts is given, it should be a timestamp since the unix epoch, in milliseconds. The API starts the purge running, and returns immediately with a JSON body with a purge id Args: room_id: room id to purge history for event_id: event id delete_local_events: To delete local message events, Default: False purge_up_to_event_id purge_up_to_ts Returns: {\"purge_id\": \"<opaque id>\"} \"\"\" url = self . url ( f \"purge_history/ { room_id } / { event_id } \" ) data : Dict [ str , Any ] = { \"delete_local_events\" : delete_local_events , } if purge_up_to_event_id is not None : data [ \"purge_up_to_event_id\" ] = purge_up_to_event_id if purge_up_to_ts is not None : data [ \"purge_up_to_ts\" ] = purge_up_to_ts result = await self . request ( RequestMethods . POST , url , json = data ) return result","title":"purge_room_history()"},{"location":"endpoints/v1/purge_history/#matrix_admin_sdk.endpoints.v1.purge_history.PurgeHistory.purge_status_query","text":"It is possible to poll for updates on recent purges Parameters: Name Type Description Default purge_id str required {\"status\": \"active\"}. The status will be one of active, complete, or failed. If status is failed there will be a string error with the error message. Source code in matrix_admin_sdk/endpoints/v1/purge_history.py async def purge_status_query ( self , purge_id : str ) -> Dict [ str , str ]: \"\"\" It is possible to poll for updates on recent purges Args: purge_id: Returns: {\"status\": \"active\"}. The status will be one of active, complete, or failed. If status is failed there will be a string error with the error message. \"\"\" url = self . url ( f \"purge_history_status/ { purge_id } \" ) result = await self . request ( RequestMethods . GET , url ) return result","title":"purge_status_query()"},{"location":"endpoints/v1/purge_remote_media/","text":"Purge Remote Media \u00b6 Endpoints \u00b6 PurgeRemoteMedia \u00b6 The purge remote media API allows server admins to purge old cached remote media. Source code in matrix_admin_sdk/endpoints/v1/purge_remote_media.py class PurgeRemoteMedia ( Endpoint ): \"\"\" The purge remote media API allows server admins to purge old cached remote media. \"\"\" async def purge_remove_media ( self , unix_timestamp_in_ms : int ) -> Dict [ Any , Any ]: \"\"\" The purge remote media API allows server admins to purge old cached remote media. Args: unix_timestamp_in_ms: Unix timestamp in milliseconds. All cached media that was last accessed before this timestamp will be removed. Returns:{\"deleted\": 10} \"\"\" url = self . url ( f \"purge_media_cache?before_ts= { unix_timestamp_in_ms } \" ) result = await self . request ( RequestMethods . POST , url ) return result purge_remove_media ( self , unix_timestamp_in_ms ) async \u00b6 The purge remote media API allows server admins to purge old cached remote media. Parameters: Name Type Description Default unix_timestamp_in_ms int Unix timestamp in milliseconds. All cached media that was last accessed before this timestamp will be removed. required Source code in matrix_admin_sdk/endpoints/v1/purge_remote_media.py async def purge_remove_media ( self , unix_timestamp_in_ms : int ) -> Dict [ Any , Any ]: \"\"\" The purge remote media API allows server admins to purge old cached remote media. Args: unix_timestamp_in_ms: Unix timestamp in milliseconds. All cached media that was last accessed before this timestamp will be removed. Returns:{\"deleted\": 10} \"\"\" url = self . url ( f \"purge_media_cache?before_ts= { unix_timestamp_in_ms } \" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"Purge Remote Media"},{"location":"endpoints/v1/purge_remote_media/#purge-remote-media","text":"","title":"Purge Remote Media"},{"location":"endpoints/v1/purge_remote_media/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/purge_remote_media/#purgeremotemedia","text":"The purge remote media API allows server admins to purge old cached remote media. Source code in matrix_admin_sdk/endpoints/v1/purge_remote_media.py class PurgeRemoteMedia ( Endpoint ): \"\"\" The purge remote media API allows server admins to purge old cached remote media. \"\"\" async def purge_remove_media ( self , unix_timestamp_in_ms : int ) -> Dict [ Any , Any ]: \"\"\" The purge remote media API allows server admins to purge old cached remote media. Args: unix_timestamp_in_ms: Unix timestamp in milliseconds. All cached media that was last accessed before this timestamp will be removed. Returns:{\"deleted\": 10} \"\"\" url = self . url ( f \"purge_media_cache?before_ts= { unix_timestamp_in_ms } \" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"PurgeRemoteMedia"},{"location":"endpoints/v1/purge_remote_media/#matrix_admin_sdk.endpoints.v1.purge_remote_media.PurgeRemoteMedia.purge_remove_media","text":"The purge remote media API allows server admins to purge old cached remote media. Parameters: Name Type Description Default unix_timestamp_in_ms int Unix timestamp in milliseconds. All cached media that was last accessed before this timestamp will be removed. required Source code in matrix_admin_sdk/endpoints/v1/purge_remote_media.py async def purge_remove_media ( self , unix_timestamp_in_ms : int ) -> Dict [ Any , Any ]: \"\"\" The purge remote media API allows server admins to purge old cached remote media. Args: unix_timestamp_in_ms: Unix timestamp in milliseconds. All cached media that was last accessed before this timestamp will be removed. Returns:{\"deleted\": 10} \"\"\" url = self . url ( f \"purge_media_cache?before_ts= { unix_timestamp_in_ms } \" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"purge_remove_media()"},{"location":"endpoints/v1/quarantine_media/","text":"Quarantine Media \u00b6 Endpoints \u00b6 QuarantineMedia \u00b6 Quarantining media means that it is marked as inaccessible by users. It applies to any local media, and any locally-cached copies of remote media. The media file itself (and any thumbnails) is not deleted from the server. Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py class QuarantineMedia ( Endpoint ): \"\"\" Quarantining media means that it is marked as inaccessible by users. It applies to any local media, and any locally-cached copies of remote media. The media file itself (and any thumbnails) is not deleted from the server. \"\"\" async def quarantining_media_by_id ( self , server_name : str , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API quarantines a single piece of local or remote media. Args: server_name: e.g. example.org media_id: e.g. abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/quarantine/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result async def remove_media_from_quarantine_by_id ( self , server_name : str , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API removes a single piece of local or remote media from quarantine. Args: server_name: e.g. example.org media_id: e.g. abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/unquarantine/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result async def quarantining_media_in_room ( self , room_id ) -> Dict [ str , int ]: \"\"\" This API quarantines all local and remote media in a room. Args: room_id: e.g. !roomid12345:example.org Returns: {\"num_quarantined\": 10} \"\"\" url = self . url ( f \"room/ { room_id } /media/quarantine\" ) result = await self . request ( RequestMethods . POST , url ) return result async def quarantining_all_media_of_user ( self , user_id : str ) -> Dict [ str , int ]: \"\"\" This API quarantines all local media that a local user has uploaded. That is to say, if you would like to quarantine media uploaded by a user on a remote homeserver, you should instead use one of the other APIs. Args: user_id: User ID in the form of @bob:example.org Returns: {\"num_quarantined\": 10} \"\"\" url = self . url ( f \"user/ { user_id } /media/quarantine\" ) result = await self . request ( RequestMethods . POST , url ) return result async def protecting_media_from_being_quarantined ( self , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Args: media_id: in the form of abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/protect/ { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result async def unprotecting_media_from_being_quarantined ( self , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Args: media_id: in the form of abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/unprotect/ { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result protecting_media_from_being_quarantined ( self , media_id ) async \u00b6 This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Parameters: Name Type Description Default media_id str in the form of abcdefg12345... required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def protecting_media_from_being_quarantined ( self , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Args: media_id: in the form of abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/protect/ { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result quarantining_all_media_of_user ( self , user_id ) async \u00b6 This API quarantines all local media that a local user has uploaded. That is to say, if you would like to quarantine media uploaded by a user on a remote homeserver, you should instead use one of the other APIs. Parameters: Name Type Description Default user_id str User ID in the form of @bob :example.org required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def quarantining_all_media_of_user ( self , user_id : str ) -> Dict [ str , int ]: \"\"\" This API quarantines all local media that a local user has uploaded. That is to say, if you would like to quarantine media uploaded by a user on a remote homeserver, you should instead use one of the other APIs. Args: user_id: User ID in the form of @bob:example.org Returns: {\"num_quarantined\": 10} \"\"\" url = self . url ( f \"user/ { user_id } /media/quarantine\" ) result = await self . request ( RequestMethods . POST , url ) return result quarantining_media_by_id ( self , server_name , media_id ) async \u00b6 This API quarantines a single piece of local or remote media. Parameters: Name Type Description Default server_name str e.g. example.org required media_id str e.g. abcdefg12345... required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def quarantining_media_by_id ( self , server_name : str , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API quarantines a single piece of local or remote media. Args: server_name: e.g. example.org media_id: e.g. abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/quarantine/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result quarantining_media_in_room ( self , room_id ) async \u00b6 This API quarantines all local and remote media in a room. Parameters: Name Type Description Default room_id e.g. !roomid12345:example.org required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def quarantining_media_in_room ( self , room_id ) -> Dict [ str , int ]: \"\"\" This API quarantines all local and remote media in a room. Args: room_id: e.g. !roomid12345:example.org Returns: {\"num_quarantined\": 10} \"\"\" url = self . url ( f \"room/ { room_id } /media/quarantine\" ) result = await self . request ( RequestMethods . POST , url ) return result remove_media_from_quarantine_by_id ( self , server_name , media_id ) async \u00b6 This API removes a single piece of local or remote media from quarantine. Parameters: Name Type Description Default server_name str e.g. example.org required media_id str e.g. abcdefg12345... required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def remove_media_from_quarantine_by_id ( self , server_name : str , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API removes a single piece of local or remote media from quarantine. Args: server_name: e.g. example.org media_id: e.g. abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/unquarantine/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result unprotecting_media_from_being_quarantined ( self , media_id ) async \u00b6 This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Parameters: Name Type Description Default media_id str in the form of abcdefg12345... required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def unprotecting_media_from_being_quarantined ( self , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Args: media_id: in the form of abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/unprotect/ { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"Quarantine Media"},{"location":"endpoints/v1/quarantine_media/#quarantine-media","text":"","title":"Quarantine Media"},{"location":"endpoints/v1/quarantine_media/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/quarantine_media/#quarantinemedia","text":"Quarantining media means that it is marked as inaccessible by users. It applies to any local media, and any locally-cached copies of remote media. The media file itself (and any thumbnails) is not deleted from the server. Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py class QuarantineMedia ( Endpoint ): \"\"\" Quarantining media means that it is marked as inaccessible by users. It applies to any local media, and any locally-cached copies of remote media. The media file itself (and any thumbnails) is not deleted from the server. \"\"\" async def quarantining_media_by_id ( self , server_name : str , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API quarantines a single piece of local or remote media. Args: server_name: e.g. example.org media_id: e.g. abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/quarantine/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result async def remove_media_from_quarantine_by_id ( self , server_name : str , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API removes a single piece of local or remote media from quarantine. Args: server_name: e.g. example.org media_id: e.g. abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/unquarantine/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result async def quarantining_media_in_room ( self , room_id ) -> Dict [ str , int ]: \"\"\" This API quarantines all local and remote media in a room. Args: room_id: e.g. !roomid12345:example.org Returns: {\"num_quarantined\": 10} \"\"\" url = self . url ( f \"room/ { room_id } /media/quarantine\" ) result = await self . request ( RequestMethods . POST , url ) return result async def quarantining_all_media_of_user ( self , user_id : str ) -> Dict [ str , int ]: \"\"\" This API quarantines all local media that a local user has uploaded. That is to say, if you would like to quarantine media uploaded by a user on a remote homeserver, you should instead use one of the other APIs. Args: user_id: User ID in the form of @bob:example.org Returns: {\"num_quarantined\": 10} \"\"\" url = self . url ( f \"user/ { user_id } /media/quarantine\" ) result = await self . request ( RequestMethods . POST , url ) return result async def protecting_media_from_being_quarantined ( self , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Args: media_id: in the form of abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/protect/ { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result async def unprotecting_media_from_being_quarantined ( self , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Args: media_id: in the form of abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/unprotect/ { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"QuarantineMedia"},{"location":"endpoints/v1/quarantine_media/#matrix_admin_sdk.endpoints.v1.quarantine_media.QuarantineMedia.protecting_media_from_being_quarantined","text":"This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Parameters: Name Type Description Default media_id str in the form of abcdefg12345... required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def protecting_media_from_being_quarantined ( self , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Args: media_id: in the form of abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/protect/ { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"protecting_media_from_being_quarantined()"},{"location":"endpoints/v1/quarantine_media/#matrix_admin_sdk.endpoints.v1.quarantine_media.QuarantineMedia.quarantining_all_media_of_user","text":"This API quarantines all local media that a local user has uploaded. That is to say, if you would like to quarantine media uploaded by a user on a remote homeserver, you should instead use one of the other APIs. Parameters: Name Type Description Default user_id str User ID in the form of @bob :example.org required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def quarantining_all_media_of_user ( self , user_id : str ) -> Dict [ str , int ]: \"\"\" This API quarantines all local media that a local user has uploaded. That is to say, if you would like to quarantine media uploaded by a user on a remote homeserver, you should instead use one of the other APIs. Args: user_id: User ID in the form of @bob:example.org Returns: {\"num_quarantined\": 10} \"\"\" url = self . url ( f \"user/ { user_id } /media/quarantine\" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"quarantining_all_media_of_user()"},{"location":"endpoints/v1/quarantine_media/#matrix_admin_sdk.endpoints.v1.quarantine_media.QuarantineMedia.quarantining_media_by_id","text":"This API quarantines a single piece of local or remote media. Parameters: Name Type Description Default server_name str e.g. example.org required media_id str e.g. abcdefg12345... required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def quarantining_media_by_id ( self , server_name : str , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API quarantines a single piece of local or remote media. Args: server_name: e.g. example.org media_id: e.g. abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/quarantine/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"quarantining_media_by_id()"},{"location":"endpoints/v1/quarantine_media/#matrix_admin_sdk.endpoints.v1.quarantine_media.QuarantineMedia.quarantining_media_in_room","text":"This API quarantines all local and remote media in a room. Parameters: Name Type Description Default room_id e.g. !roomid12345:example.org required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def quarantining_media_in_room ( self , room_id ) -> Dict [ str , int ]: \"\"\" This API quarantines all local and remote media in a room. Args: room_id: e.g. !roomid12345:example.org Returns: {\"num_quarantined\": 10} \"\"\" url = self . url ( f \"room/ { room_id } /media/quarantine\" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"quarantining_media_in_room()"},{"location":"endpoints/v1/quarantine_media/#matrix_admin_sdk.endpoints.v1.quarantine_media.QuarantineMedia.remove_media_from_quarantine_by_id","text":"This API removes a single piece of local or remote media from quarantine. Parameters: Name Type Description Default server_name str e.g. example.org required media_id str e.g. abcdefg12345... required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def remove_media_from_quarantine_by_id ( self , server_name : str , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API removes a single piece of local or remote media from quarantine. Args: server_name: e.g. example.org media_id: e.g. abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/unquarantine/ { server_name } / { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"remove_media_from_quarantine_by_id()"},{"location":"endpoints/v1/quarantine_media/#matrix_admin_sdk.endpoints.v1.quarantine_media.QuarantineMedia.unprotecting_media_from_being_quarantined","text":"This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Parameters: Name Type Description Default media_id str in the form of abcdefg12345... required Source code in matrix_admin_sdk/endpoints/v1/quarantine_media.py async def unprotecting_media_from_being_quarantined ( self , media_id : str ) -> Dict [ Any , Any ]: \"\"\" This API protects a single piece of local media from being quarantined using the above APIs. This is useful for sticker packs and other shared media which you do not want to get quarantined, especially when quarantining media in a room. Args: media_id: in the form of abcdefg12345... Returns: dictionary \"\"\" url = self . url ( f \"media/unprotect/ { media_id } \" ) result = await self . request ( RequestMethods . POST , url ) return result","title":"unprotecting_media_from_being_quarantined()"},{"location":"endpoints/v1/querying_media/","text":"Querying Media \u00b6 Endpoints \u00b6 QueryingMedia \u00b6 These APIs allow extracting media information from the homeserver. Details about the format of the media_id and storage of the media in the file system are documented under https://matrix-org.github.io/synapse/latest/media_repository.html Source code in matrix_admin_sdk/endpoints/v1/querying_media.py class QueryingMedia ( Endpoint ): \"\"\" These APIs allow extracting media information from the homeserver. Details about the format of the media_id and storage of the media in the file system are documented under https://matrix-org.github.io/synapse/latest/media_repository.html \"\"\" async def all_media_in_room ( self , room_id : str ) -> QueryingMediaModel : \"\"\" This API gets a list of known media in a room. However, it only shows media from unencrypted events or rooms. Args: room_id: room id Returns: QueryingMediaModel \"\"\" url = self . url ( f \"room/ { room_id } /media\" ) result = await self . request ( RequestMethods . GET , url ) res : QueryingMediaModel = QueryingMediaModel . from_dict ( result ) return res all_media_in_room ( self , room_id ) async \u00b6 This API gets a list of known media in a room. However, it only shows media from unencrypted events or rooms. Parameters: Name Type Description Default room_id str room id required Source code in matrix_admin_sdk/endpoints/v1/querying_media.py async def all_media_in_room ( self , room_id : str ) -> QueryingMediaModel : \"\"\" This API gets a list of known media in a room. However, it only shows media from unencrypted events or rooms. Args: room_id: room id Returns: QueryingMediaModel \"\"\" url = self . url ( f \"room/ { room_id } /media\" ) result = await self . request ( RequestMethods . GET , url ) res : QueryingMediaModel = QueryingMediaModel . from_dict ( result ) return res Models \u00b6 QueryingMediaModel \u00b6 Querying media model. Attributes: Name Type Description local list[str] remote list[str] Source code in matrix_admin_sdk/models/v1/querying_media.py class QueryingMediaModel ( BaseModel ): \"\"\" Querying media model. Attributes: local (list[str]): remote (list[str]): \"\"\" local : List [ str ] remote : List [ str ]","title":"Querying Media"},{"location":"endpoints/v1/querying_media/#querying-media","text":"","title":"Querying Media"},{"location":"endpoints/v1/querying_media/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/querying_media/#queryingmedia","text":"These APIs allow extracting media information from the homeserver. Details about the format of the media_id and storage of the media in the file system are documented under https://matrix-org.github.io/synapse/latest/media_repository.html Source code in matrix_admin_sdk/endpoints/v1/querying_media.py class QueryingMedia ( Endpoint ): \"\"\" These APIs allow extracting media information from the homeserver. Details about the format of the media_id and storage of the media in the file system are documented under https://matrix-org.github.io/synapse/latest/media_repository.html \"\"\" async def all_media_in_room ( self , room_id : str ) -> QueryingMediaModel : \"\"\" This API gets a list of known media in a room. However, it only shows media from unencrypted events or rooms. Args: room_id: room id Returns: QueryingMediaModel \"\"\" url = self . url ( f \"room/ { room_id } /media\" ) result = await self . request ( RequestMethods . GET , url ) res : QueryingMediaModel = QueryingMediaModel . from_dict ( result ) return res","title":"QueryingMedia"},{"location":"endpoints/v1/querying_media/#matrix_admin_sdk.endpoints.v1.querying_media.QueryingMedia.all_media_in_room","text":"This API gets a list of known media in a room. However, it only shows media from unencrypted events or rooms. Parameters: Name Type Description Default room_id str room id required Source code in matrix_admin_sdk/endpoints/v1/querying_media.py async def all_media_in_room ( self , room_id : str ) -> QueryingMediaModel : \"\"\" This API gets a list of known media in a room. However, it only shows media from unencrypted events or rooms. Args: room_id: room id Returns: QueryingMediaModel \"\"\" url = self . url ( f \"room/ { room_id } /media\" ) result = await self . request ( RequestMethods . GET , url ) res : QueryingMediaModel = QueryingMediaModel . from_dict ( result ) return res","title":"all_media_in_room()"},{"location":"endpoints/v1/querying_media/#models","text":"","title":"Models"},{"location":"endpoints/v1/querying_media/#queryingmediamodel","text":"Querying media model. Attributes: Name Type Description local list[str] remote list[str] Source code in matrix_admin_sdk/models/v1/querying_media.py class QueryingMediaModel ( BaseModel ): \"\"\" Querying media model. Attributes: local (list[str]): remote (list[str]): \"\"\" local : List [ str ] remote : List [ str ]","title":"QueryingMediaModel"},{"location":"endpoints/v1/register_user/","text":"Register Users \u00b6 Endpoints \u00b6 RegisterUsers \u00b6 This API allows for the creation of users in an administrative and non-interactive way. This is generally used for bootstrapping a Synapse instance with administrator accounts. Source code in matrix_admin_sdk/endpoints/v1/register_user.py class RegisterUsers ( Endpoint ): \"\"\" This API allows for the creation of users in an administrative and non-interactive way. This is generally used for bootstrapping a Synapse instance with administrator accounts. \"\"\" async def get_nonce ( self ) -> str : \"\"\" To authenticate yourself to the server, you will need both the shared secret (registration_shared_secret in the homeserver configuration), and a one-time nonce. If the registration shared secret is not configured, this API is not enabled. To fetch the nonce, you need to request one from the API \"\"\" url = self . url ( \"register\" ) result = await self . request ( RequestMethods . GET , url ) nonce : str = result [ \"nonce\" ] return nonce async def register ( self , nonce : str , username : str , displayname : str , password : str , admin : bool , mac : str , ) -> NewUserModel : \"\"\" Register a new user. Args: nonce: nonce returned by get_nonce username: user's name displayname: user's display name password: user's password admin: is user an admin mac: please use utils.generate_mac to generate this Returns: new user model \"\"\" url = self . url ( \"register\" ) data = { \"nonce\" : nonce , \"username\" : username , \"displayname\" : displayname , \"password\" : password , \"admin\" : admin , \"mac\" : mac , } result = await self . request ( RequestMethods . POST , url , json = data ) res : NewUserModel = NewUserModel . from_dict ( result ) return res get_nonce ( self ) async \u00b6 To authenticate yourself to the server, you will need both the shared secret (registration_shared_secret in the homeserver configuration), and a one-time nonce. If the registration shared secret is not configured, this API is not enabled. To fetch the nonce, you need to request one from the API Source code in matrix_admin_sdk/endpoints/v1/register_user.py async def get_nonce ( self ) -> str : \"\"\" To authenticate yourself to the server, you will need both the shared secret (registration_shared_secret in the homeserver configuration), and a one-time nonce. If the registration shared secret is not configured, this API is not enabled. To fetch the nonce, you need to request one from the API \"\"\" url = self . url ( \"register\" ) result = await self . request ( RequestMethods . GET , url ) nonce : str = result [ \"nonce\" ] return nonce register ( self , nonce , username , displayname , password , admin , mac ) async \u00b6 Register a new user. Parameters: Name Type Description Default nonce str nonce returned by get_nonce required username str user's name required displayname str user's display name required password str user's password required admin bool is user an admin required mac str please use utils.generate_mac to generate this required Source code in matrix_admin_sdk/endpoints/v1/register_user.py async def register ( self , nonce : str , username : str , displayname : str , password : str , admin : bool , mac : str , ) -> NewUserModel : \"\"\" Register a new user. Args: nonce: nonce returned by get_nonce username: user's name displayname: user's display name password: user's password admin: is user an admin mac: please use utils.generate_mac to generate this Returns: new user model \"\"\" url = self . url ( \"register\" ) data = { \"nonce\" : nonce , \"username\" : username , \"displayname\" : displayname , \"password\" : password , \"admin\" : admin , \"mac\" : mac , } result = await self . request ( RequestMethods . POST , url , json = data ) res : NewUserModel = NewUserModel . from_dict ( result ) return res Models \u00b6 NewUserModel \u00b6 NewUserModel(access_token: str, user_id: str, home_server: str, device_id: str) Source code in matrix_admin_sdk/models/v1/register_user.py class NewUserModel ( BaseModel ): access_token : str user_id : str home_server : str device_id : str","title":"Register Users"},{"location":"endpoints/v1/register_user/#register-users","text":"","title":"Register Users"},{"location":"endpoints/v1/register_user/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/register_user/#registerusers","text":"This API allows for the creation of users in an administrative and non-interactive way. This is generally used for bootstrapping a Synapse instance with administrator accounts. Source code in matrix_admin_sdk/endpoints/v1/register_user.py class RegisterUsers ( Endpoint ): \"\"\" This API allows for the creation of users in an administrative and non-interactive way. This is generally used for bootstrapping a Synapse instance with administrator accounts. \"\"\" async def get_nonce ( self ) -> str : \"\"\" To authenticate yourself to the server, you will need both the shared secret (registration_shared_secret in the homeserver configuration), and a one-time nonce. If the registration shared secret is not configured, this API is not enabled. To fetch the nonce, you need to request one from the API \"\"\" url = self . url ( \"register\" ) result = await self . request ( RequestMethods . GET , url ) nonce : str = result [ \"nonce\" ] return nonce async def register ( self , nonce : str , username : str , displayname : str , password : str , admin : bool , mac : str , ) -> NewUserModel : \"\"\" Register a new user. Args: nonce: nonce returned by get_nonce username: user's name displayname: user's display name password: user's password admin: is user an admin mac: please use utils.generate_mac to generate this Returns: new user model \"\"\" url = self . url ( \"register\" ) data = { \"nonce\" : nonce , \"username\" : username , \"displayname\" : displayname , \"password\" : password , \"admin\" : admin , \"mac\" : mac , } result = await self . request ( RequestMethods . POST , url , json = data ) res : NewUserModel = NewUserModel . from_dict ( result ) return res","title":"RegisterUsers"},{"location":"endpoints/v1/register_user/#matrix_admin_sdk.endpoints.v1.register_user.RegisterUsers.get_nonce","text":"To authenticate yourself to the server, you will need both the shared secret (registration_shared_secret in the homeserver configuration), and a one-time nonce. If the registration shared secret is not configured, this API is not enabled. To fetch the nonce, you need to request one from the API Source code in matrix_admin_sdk/endpoints/v1/register_user.py async def get_nonce ( self ) -> str : \"\"\" To authenticate yourself to the server, you will need both the shared secret (registration_shared_secret in the homeserver configuration), and a one-time nonce. If the registration shared secret is not configured, this API is not enabled. To fetch the nonce, you need to request one from the API \"\"\" url = self . url ( \"register\" ) result = await self . request ( RequestMethods . GET , url ) nonce : str = result [ \"nonce\" ] return nonce","title":"get_nonce()"},{"location":"endpoints/v1/register_user/#matrix_admin_sdk.endpoints.v1.register_user.RegisterUsers.register","text":"Register a new user. Parameters: Name Type Description Default nonce str nonce returned by get_nonce required username str user's name required displayname str user's display name required password str user's password required admin bool is user an admin required mac str please use utils.generate_mac to generate this required Source code in matrix_admin_sdk/endpoints/v1/register_user.py async def register ( self , nonce : str , username : str , displayname : str , password : str , admin : bool , mac : str , ) -> NewUserModel : \"\"\" Register a new user. Args: nonce: nonce returned by get_nonce username: user's name displayname: user's display name password: user's password admin: is user an admin mac: please use utils.generate_mac to generate this Returns: new user model \"\"\" url = self . url ( \"register\" ) data = { \"nonce\" : nonce , \"username\" : username , \"displayname\" : displayname , \"password\" : password , \"admin\" : admin , \"mac\" : mac , } result = await self . request ( RequestMethods . POST , url , json = data ) res : NewUserModel = NewUserModel . from_dict ( result ) return res","title":"register()"},{"location":"endpoints/v1/register_user/#models","text":"","title":"Models"},{"location":"endpoints/v1/register_user/#newusermodel","text":"NewUserModel(access_token: str, user_id: str, home_server: str, device_id: str) Source code in matrix_admin_sdk/models/v1/register_user.py class NewUserModel ( BaseModel ): access_token : str user_id : str home_server : str device_id : str","title":"NewUserModel"},{"location":"endpoints/v1/registration_tokens/","text":"Registration Tokens \u00b6 Endpoints \u00b6 RegistrationTokens \u00b6 This API allows you to manage tokens which can be used to authenticate registration requests, as proposed in MSC3231. To use it, you will need to enable the registration_requires_token config option, and authenticate by providing an access_token for a server admin: see Admin API. Note that this API is still experimental; not all clients may support it yet. Source code in matrix_admin_sdk/endpoints/v1/registration_tokens.py class RegistrationTokens ( Endpoint ): \"\"\" This API allows you to manage tokens which can be used to authenticate registration requests, as proposed in MSC3231. To use it, you will need to enable the registration_requires_token config option, and authenticate by providing an access_token for a server admin: see Admin API. Note that this API is still experimental; not all clients may support it yet. \"\"\" async def list_all_tokens ( self , valid : Optional [ bool ] = None ) -> List [ RegistrationTokensModel ]: url = self . url ( \"registration_tokens\" ) params = { \"valid\" : valid } result = await self . request ( RequestMethods . GET , url , params = params ) res : List [ RegistrationTokensModel ] = [ RegistrationTokensModel . from_dict ( d ) for d in result [ \"registration_tokens\" ] ] return res async def get_one_token ( self , token : str ) -> RegistrationTokensModel : \"\"\" Get details about a single token. If the request is successful, the response body will be a registration token object. Args: token: The registration token to return details of. Returns: RegistrationTokensModel \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) result = await self . request ( RequestMethods . GET , url ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res async def create_token ( self , token : Optional [ str ] = None , uses_allowed : Optional [ int ] = None , expiry_time : Optional [ int ] = None , length : int = 16 , ) -> RegistrationTokensModel : \"\"\" Create a new registration token. If the request is successful, the newly created token will be returned as a registration token object in the response body. Args: token: The registration token. A string of no more than 64 characters that consists only of characters matched by the regex [A-Za-z0-9._~-]. Default: None and will be randomly generated on a server. uses_allowed: The integer number of times the token can be used to complete a registration before it becomes invalid. Default: None (unlimited uses). expiry_time: The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch) length: The length of the token randomly generated if token is not specified. Must be between 1 and 64 inclusive. Default: 16 Returns: RegistrationTokensModel \"\"\" if length < 1 or length > 64 : raise ValueError ( \"length must be between 1 and 64 inclusive\" ) url = self . url ( \"registration_tokens/new\" ) data = { \"token\" : token , \"uses_allowed\" : uses_allowed , \"expiry_time\" : expiry_time , \"length\" : length , } result = await self . request ( RequestMethods . POST , url , data = data ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res async def update_token ( self , token : str , uses_allowed : Optional [ int ] = None , expiry_time : Optional [ int ] = None , ) -> RegistrationTokensModel : \"\"\" Update the number of allowed uses or expiry time of a token. If the request is successful, the updated token will be returned as a registration token object in the response body. Args: token: The registration token to update uses_allowed: The integer number of times the token can be used to complete a registration before it becomes invalid. By setting uses_allowed to 0 the token can be easily made invalid without deleting it. If None the token will have an unlimited number of uses. Default: None (unlimited uses). expiry_time: The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch). If null the token will not expire Default: None (no expiry) Returns: RegistrationTokensModel \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) data = { \"uses_allowed\" : uses_allowed , \"expiry_time\" : expiry_time } result = await self . request ( RequestMethods . PUT , url , json = data ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res async def delete_token ( self , token : str ) -> Dict [ Any , Any ]: \"\"\" Delete a registration token. Args: token: The registration token to delete Returns: Dict[Any, Any] \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) result = await self . request ( RequestMethods . DELETE , url ) return result create_token ( self , token = None , uses_allowed = None , expiry_time = None , length = 16 ) async \u00b6 Create a new registration token. If the request is successful, the newly created token will be returned as a registration token object in the response body. Parameters: Name Type Description Default token Optional[str] The registration token. A string of no more than 64 characters that consists only of characters matched by the regex [A-Za-z0-9._~-]. Default: None and will be randomly generated on a server. None uses_allowed Optional[int] The integer number of times the token can be used to complete a registration before it becomes invalid. Default: None (unlimited uses). None expiry_time Optional[int] The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch) None length int The length of the token randomly generated if token is not specified. Must be between 1 and 64 inclusive. Default: 16 16 Source code in matrix_admin_sdk/endpoints/v1/registration_tokens.py async def create_token ( self , token : Optional [ str ] = None , uses_allowed : Optional [ int ] = None , expiry_time : Optional [ int ] = None , length : int = 16 , ) -> RegistrationTokensModel : \"\"\" Create a new registration token. If the request is successful, the newly created token will be returned as a registration token object in the response body. Args: token: The registration token. A string of no more than 64 characters that consists only of characters matched by the regex [A-Za-z0-9._~-]. Default: None and will be randomly generated on a server. uses_allowed: The integer number of times the token can be used to complete a registration before it becomes invalid. Default: None (unlimited uses). expiry_time: The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch) length: The length of the token randomly generated if token is not specified. Must be between 1 and 64 inclusive. Default: 16 Returns: RegistrationTokensModel \"\"\" if length < 1 or length > 64 : raise ValueError ( \"length must be between 1 and 64 inclusive\" ) url = self . url ( \"registration_tokens/new\" ) data = { \"token\" : token , \"uses_allowed\" : uses_allowed , \"expiry_time\" : expiry_time , \"length\" : length , } result = await self . request ( RequestMethods . POST , url , data = data ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res delete_token ( self , token ) async \u00b6 Delete a registration token. Parameters: Name Type Description Default token str The registration token to delete required Source code in matrix_admin_sdk/endpoints/v1/registration_tokens.py async def delete_token ( self , token : str ) -> Dict [ Any , Any ]: \"\"\" Delete a registration token. Args: token: The registration token to delete Returns: Dict[Any, Any] \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) result = await self . request ( RequestMethods . DELETE , url ) return result get_one_token ( self , token ) async \u00b6 Get details about a single token. If the request is successful, the response body will be a registration token object. Parameters: Name Type Description Default token str The registration token to return details of. required Source code in matrix_admin_sdk/endpoints/v1/registration_tokens.py async def get_one_token ( self , token : str ) -> RegistrationTokensModel : \"\"\" Get details about a single token. If the request is successful, the response body will be a registration token object. Args: token: The registration token to return details of. Returns: RegistrationTokensModel \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) result = await self . request ( RequestMethods . GET , url ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res update_token ( self , token , uses_allowed = None , expiry_time = None ) async \u00b6 Update the number of allowed uses or expiry time of a token. If the request is successful, the updated token will be returned as a registration token object in the response body. Parameters: Name Type Description Default token str The registration token to update required uses_allowed Optional[int] The integer number of times the token can be used to complete a registration before it becomes invalid. By setting uses_allowed to 0 the token can be easily made invalid without deleting it. If None the token will have an unlimited number of uses. Default: None (unlimited uses). None expiry_time Optional[int] The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch). If null the token will not expire Default: None (no expiry) None Source code in matrix_admin_sdk/endpoints/v1/registration_tokens.py async def update_token ( self , token : str , uses_allowed : Optional [ int ] = None , expiry_time : Optional [ int ] = None , ) -> RegistrationTokensModel : \"\"\" Update the number of allowed uses or expiry time of a token. If the request is successful, the updated token will be returned as a registration token object in the response body. Args: token: The registration token to update uses_allowed: The integer number of times the token can be used to complete a registration before it becomes invalid. By setting uses_allowed to 0 the token can be easily made invalid without deleting it. If None the token will have an unlimited number of uses. Default: None (unlimited uses). expiry_time: The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch). If null the token will not expire Default: None (no expiry) Returns: RegistrationTokensModel \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) data = { \"uses_allowed\" : uses_allowed , \"expiry_time\" : expiry_time } result = await self . request ( RequestMethods . PUT , url , json = data ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res Models \u00b6 RegistrationTokensModel \u00b6 Most endpoints make use of JSON objects that contain details about tokens. These objects have the following fields Attributes: Name Type Description token str The token which can be used to authenticate registration. uses_allowed int The number of times the token can be used to complete a registration before it becomes invalid. pending int The number of pending uses the token has. When someone uses the token to authenticate themselves, the pending counter is incremented so that the token is not used more than the permitted number of times. When the person completes registration the pending counter is decremented, and the completed counter is incremented. completed int The number of times the token has been used to successfully complete a registration. expiry_time int|None The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch). Source code in matrix_admin_sdk/models/v1/registration_tokens.py class RegistrationTokensModel ( BaseModel ): \"\"\" Most endpoints make use of JSON objects that contain details about tokens. These objects have the following fields Attributes: token (str): The token which can be used to authenticate registration. uses_allowed (int): The number of times the token can be used to complete a registration before it becomes invalid. pending (int): The number of pending uses the token has. When someone uses the token to authenticate themselves, the pending counter is incremented so that the token is not used more than the permitted number of times. When the person completes registration the pending counter is decremented, and the completed counter is incremented. completed (int): The number of times the token has been used to successfully complete a registration. expiry_time (int|None): The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch). \"\"\" token : str uses_allowed : int pending : int completed : int expiry_time : Optional [ int ]","title":"Registration Tokens"},{"location":"endpoints/v1/registration_tokens/#registration-tokens","text":"","title":"Registration Tokens"},{"location":"endpoints/v1/registration_tokens/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/registration_tokens/#registrationtokens","text":"This API allows you to manage tokens which can be used to authenticate registration requests, as proposed in MSC3231. To use it, you will need to enable the registration_requires_token config option, and authenticate by providing an access_token for a server admin: see Admin API. Note that this API is still experimental; not all clients may support it yet. Source code in matrix_admin_sdk/endpoints/v1/registration_tokens.py class RegistrationTokens ( Endpoint ): \"\"\" This API allows you to manage tokens which can be used to authenticate registration requests, as proposed in MSC3231. To use it, you will need to enable the registration_requires_token config option, and authenticate by providing an access_token for a server admin: see Admin API. Note that this API is still experimental; not all clients may support it yet. \"\"\" async def list_all_tokens ( self , valid : Optional [ bool ] = None ) -> List [ RegistrationTokensModel ]: url = self . url ( \"registration_tokens\" ) params = { \"valid\" : valid } result = await self . request ( RequestMethods . GET , url , params = params ) res : List [ RegistrationTokensModel ] = [ RegistrationTokensModel . from_dict ( d ) for d in result [ \"registration_tokens\" ] ] return res async def get_one_token ( self , token : str ) -> RegistrationTokensModel : \"\"\" Get details about a single token. If the request is successful, the response body will be a registration token object. Args: token: The registration token to return details of. Returns: RegistrationTokensModel \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) result = await self . request ( RequestMethods . GET , url ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res async def create_token ( self , token : Optional [ str ] = None , uses_allowed : Optional [ int ] = None , expiry_time : Optional [ int ] = None , length : int = 16 , ) -> RegistrationTokensModel : \"\"\" Create a new registration token. If the request is successful, the newly created token will be returned as a registration token object in the response body. Args: token: The registration token. A string of no more than 64 characters that consists only of characters matched by the regex [A-Za-z0-9._~-]. Default: None and will be randomly generated on a server. uses_allowed: The integer number of times the token can be used to complete a registration before it becomes invalid. Default: None (unlimited uses). expiry_time: The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch) length: The length of the token randomly generated if token is not specified. Must be between 1 and 64 inclusive. Default: 16 Returns: RegistrationTokensModel \"\"\" if length < 1 or length > 64 : raise ValueError ( \"length must be between 1 and 64 inclusive\" ) url = self . url ( \"registration_tokens/new\" ) data = { \"token\" : token , \"uses_allowed\" : uses_allowed , \"expiry_time\" : expiry_time , \"length\" : length , } result = await self . request ( RequestMethods . POST , url , data = data ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res async def update_token ( self , token : str , uses_allowed : Optional [ int ] = None , expiry_time : Optional [ int ] = None , ) -> RegistrationTokensModel : \"\"\" Update the number of allowed uses or expiry time of a token. If the request is successful, the updated token will be returned as a registration token object in the response body. Args: token: The registration token to update uses_allowed: The integer number of times the token can be used to complete a registration before it becomes invalid. By setting uses_allowed to 0 the token can be easily made invalid without deleting it. If None the token will have an unlimited number of uses. Default: None (unlimited uses). expiry_time: The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch). If null the token will not expire Default: None (no expiry) Returns: RegistrationTokensModel \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) data = { \"uses_allowed\" : uses_allowed , \"expiry_time\" : expiry_time } result = await self . request ( RequestMethods . PUT , url , json = data ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res async def delete_token ( self , token : str ) -> Dict [ Any , Any ]: \"\"\" Delete a registration token. Args: token: The registration token to delete Returns: Dict[Any, Any] \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) result = await self . request ( RequestMethods . DELETE , url ) return result","title":"RegistrationTokens"},{"location":"endpoints/v1/registration_tokens/#matrix_admin_sdk.endpoints.v1.registration_tokens.RegistrationTokens.create_token","text":"Create a new registration token. If the request is successful, the newly created token will be returned as a registration token object in the response body. Parameters: Name Type Description Default token Optional[str] The registration token. A string of no more than 64 characters that consists only of characters matched by the regex [A-Za-z0-9._~-]. Default: None and will be randomly generated on a server. None uses_allowed Optional[int] The integer number of times the token can be used to complete a registration before it becomes invalid. Default: None (unlimited uses). None expiry_time Optional[int] The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch) None length int The length of the token randomly generated if token is not specified. Must be between 1 and 64 inclusive. Default: 16 16 Source code in matrix_admin_sdk/endpoints/v1/registration_tokens.py async def create_token ( self , token : Optional [ str ] = None , uses_allowed : Optional [ int ] = None , expiry_time : Optional [ int ] = None , length : int = 16 , ) -> RegistrationTokensModel : \"\"\" Create a new registration token. If the request is successful, the newly created token will be returned as a registration token object in the response body. Args: token: The registration token. A string of no more than 64 characters that consists only of characters matched by the regex [A-Za-z0-9._~-]. Default: None and will be randomly generated on a server. uses_allowed: The integer number of times the token can be used to complete a registration before it becomes invalid. Default: None (unlimited uses). expiry_time: The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch) length: The length of the token randomly generated if token is not specified. Must be between 1 and 64 inclusive. Default: 16 Returns: RegistrationTokensModel \"\"\" if length < 1 or length > 64 : raise ValueError ( \"length must be between 1 and 64 inclusive\" ) url = self . url ( \"registration_tokens/new\" ) data = { \"token\" : token , \"uses_allowed\" : uses_allowed , \"expiry_time\" : expiry_time , \"length\" : length , } result = await self . request ( RequestMethods . POST , url , data = data ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res","title":"create_token()"},{"location":"endpoints/v1/registration_tokens/#matrix_admin_sdk.endpoints.v1.registration_tokens.RegistrationTokens.delete_token","text":"Delete a registration token. Parameters: Name Type Description Default token str The registration token to delete required Source code in matrix_admin_sdk/endpoints/v1/registration_tokens.py async def delete_token ( self , token : str ) -> Dict [ Any , Any ]: \"\"\" Delete a registration token. Args: token: The registration token to delete Returns: Dict[Any, Any] \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) result = await self . request ( RequestMethods . DELETE , url ) return result","title":"delete_token()"},{"location":"endpoints/v1/registration_tokens/#matrix_admin_sdk.endpoints.v1.registration_tokens.RegistrationTokens.get_one_token","text":"Get details about a single token. If the request is successful, the response body will be a registration token object. Parameters: Name Type Description Default token str The registration token to return details of. required Source code in matrix_admin_sdk/endpoints/v1/registration_tokens.py async def get_one_token ( self , token : str ) -> RegistrationTokensModel : \"\"\" Get details about a single token. If the request is successful, the response body will be a registration token object. Args: token: The registration token to return details of. Returns: RegistrationTokensModel \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) result = await self . request ( RequestMethods . GET , url ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res","title":"get_one_token()"},{"location":"endpoints/v1/registration_tokens/#matrix_admin_sdk.endpoints.v1.registration_tokens.RegistrationTokens.update_token","text":"Update the number of allowed uses or expiry time of a token. If the request is successful, the updated token will be returned as a registration token object in the response body. Parameters: Name Type Description Default token str The registration token to update required uses_allowed Optional[int] The integer number of times the token can be used to complete a registration before it becomes invalid. By setting uses_allowed to 0 the token can be easily made invalid without deleting it. If None the token will have an unlimited number of uses. Default: None (unlimited uses). None expiry_time Optional[int] The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch). If null the token will not expire Default: None (no expiry) None Source code in matrix_admin_sdk/endpoints/v1/registration_tokens.py async def update_token ( self , token : str , uses_allowed : Optional [ int ] = None , expiry_time : Optional [ int ] = None , ) -> RegistrationTokensModel : \"\"\" Update the number of allowed uses or expiry time of a token. If the request is successful, the updated token will be returned as a registration token object in the response body. Args: token: The registration token to update uses_allowed: The integer number of times the token can be used to complete a registration before it becomes invalid. By setting uses_allowed to 0 the token can be easily made invalid without deleting it. If None the token will have an unlimited number of uses. Default: None (unlimited uses). expiry_time: The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch). If null the token will not expire Default: None (no expiry) Returns: RegistrationTokensModel \"\"\" url = self . url ( f \"registration_tokens/ { token } \" ) data = { \"uses_allowed\" : uses_allowed , \"expiry_time\" : expiry_time } result = await self . request ( RequestMethods . PUT , url , json = data ) res : RegistrationTokensModel = RegistrationTokensModel . from_dict ( result ) return res","title":"update_token()"},{"location":"endpoints/v1/registration_tokens/#models","text":"","title":"Models"},{"location":"endpoints/v1/registration_tokens/#registrationtokensmodel","text":"Most endpoints make use of JSON objects that contain details about tokens. These objects have the following fields Attributes: Name Type Description token str The token which can be used to authenticate registration. uses_allowed int The number of times the token can be used to complete a registration before it becomes invalid. pending int The number of pending uses the token has. When someone uses the token to authenticate themselves, the pending counter is incremented so that the token is not used more than the permitted number of times. When the person completes registration the pending counter is decremented, and the completed counter is incremented. completed int The number of times the token has been used to successfully complete a registration. expiry_time int|None The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch). Source code in matrix_admin_sdk/models/v1/registration_tokens.py class RegistrationTokensModel ( BaseModel ): \"\"\" Most endpoints make use of JSON objects that contain details about tokens. These objects have the following fields Attributes: token (str): The token which can be used to authenticate registration. uses_allowed (int): The number of times the token can be used to complete a registration before it becomes invalid. pending (int): The number of pending uses the token has. When someone uses the token to authenticate themselves, the pending counter is incremented so that the token is not used more than the permitted number of times. When the person completes registration the pending counter is decremented, and the completed counter is incremented. completed (int): The number of times the token has been used to successfully complete a registration. expiry_time (int|None): The latest time the token is valid. Given as the number of milliseconds since 1970-01-01 00:00:00 UTC (the start of the Unix epoch). \"\"\" token : str uses_allowed : int pending : int completed : int expiry_time : Optional [ int ]","title":"RegistrationTokensModel"},{"location":"endpoints/v1/rooms/","text":"Rooms \u00b6 Endpoints \u00b6 Rooms \u00b6 Rooms Endpoints API Source code in matrix_admin_sdk/endpoints/v1/rooms.py class Rooms ( Endpoint ): \"\"\" Rooms Endpoints API \"\"\" async def list_rooms ( self , from_ : int = 0 , limit : int = 100 , order_by : Optional [ OrderBy ] = None , dir_ : str = \"f\" , search_term : Optional [ str ] = None , ) -> RoomsModel : \"\"\" The List Room admin API allows server admins to get a list of rooms on their server. There are various parameters available that allow for filtering and sorting the returned list. This API supports pagination. Args: from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of rooms to return. Defaults to 100. order_by: The method in which to sort the returned list of rooms. Defaults to OrderBy.NAME. dir_: Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f search_term: Filter rooms by their room name, canonical alias and room id. Specifically, rooms are selected if the search term is contained in: the room's name, the local part of the room's canonical alias, or the complete (local and server part) room's id (case sensitive). Defaults to no filtering. Returns: \"\"\" if order_by is None : order_by = OrderBy . NAME if dir_ not in ( \"f\" , \"b\" ): raise ValueError ( \"dir_ must be either f or b\" ) url = self . url ( \"rooms\" ) params = { \"from\" : from_ , \"limit\" : limit , \"order_by\" : order_by . value , \"dir\" : dir_ , } if search_term is not None : params [ \"search_term\" ] = search_term result = await self . request ( RequestMethods . GET , url , params = params ) return RoomsModel . from_dict ( result ) async def room_details ( self , room_id : str ) -> RoomModel : \"\"\" The Room Details admin API allows server admins to get all details of a room. Args: room_id: The room id to get details for. Returns: \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : RoomModel = RoomModel . from_dict ( result ) return res async def room_members ( self , room_id : str ) -> RoomMembersModel : \"\"\" The Room Members admin API allows server admins to get a list of all members of a room. Args: room_id: The room id to get details for. Returns: RoomMembersModel \"\"\" url = self . url ( f \"rooms/ { room_id } /members\" ) result = await self . request ( RequestMethods . GET , url ) res : RoomMembersModel = RoomMembersModel . from_dict ( result ) return res async def room_state ( self , room_id : str ) -> List [ RoomStateModel ]: \"\"\" The Room State admin API allows server admins to get a list of all state events in a room. Args: room_id: room id to get state for Returns: list of RoomStateModel \"\"\" url = self . url ( f \"rooms/ { room_id } /state\" ) result = await self . request ( RequestMethods . GET , url ) res : List [ RoomStateModel ] = [ RoomStateModel . from_dict ( i ) for i in result [ \"state\" ] ] return res async def block_room ( self , room_id : str , block : bool ) -> Dict [ str , bool ]: \"\"\" The Block Room admin API allows server admins to block and unblock rooms, and query to see if a given room is blocked. This API can be used to pre-emptively block a room, even if it's unknown to this homeserver. Users will be prevented from joining a blocked room. Args: room_id: The room id to block. block: If True the room will be blocked and if False the room will be unblocked. Returns: dictionary \"\"\" url = self . url ( f \"rooms/ { room_id } /block\" ) data = { \"block\" : block } result = await self . request ( RequestMethods . PUT , url , json = data ) return result async def get_block_status ( self , room_id : str ) -> BlockStatusModel : \"\"\" Is room blocked Args: room_id: The room id to checking Returns: BlockStatusModel \"\"\" url = self . url ( f \"rooms/ { room_id } /block\" ) result = await self . request ( RequestMethods . GET , url ) res : BlockStatusModel = BlockStatusModel . from_dict ( result ) return res async def delete_room ( self , room_id : str , new_room_user_id : Optional [ str ] = None , room_name : str = \"Content Violation Notification\" , message : str = \"Sharing illegal content on this server is not permitted and rooms in violation will be blocked\" , block : bool = False , purge : bool = True , force_purge : bool = False , ) -> DeletedRoomModel : \"\"\" The Delete Room admin API allows server admins to remove rooms from the server and block these rooms. Shuts down a room. Moves all local users and room aliases automatically to a new room if new_room_user_id is set. Otherwise local users only leave the room without any information. The new room will be created with the user specified by the new_room_user_id parameter as room administrator and will contain a message explaining what happened. Users invited to the new room will have power level -10 by default, and thus be unable to speak. If block is true, users will be prevented from joining the old room. This option can in sync version also be used to pre-emptively block a room, even if it's unknown to this homeserver. In this case, the room will be blocked, and no further action will be taken. If block is false, attempting to delete an unknown room is invalid and will be rejected as a bad request. This API will remove all trace of the old room from your database after removing all local users. If purge is true (the default), all traces of the old room will be removed from your database after removing all local users. If you do not want this to happen, set purge to false. Depending on the amount of history being purged, a call to the API may take several minutes or longer. The local server will only have the power to move local user and room aliases to the new room. Users on other servers will be unaffected. This version works synchronously. That means you only get the response once the server has finished the action, which may take a long time. If you request the same action a second time, and the server has not finished the first one, the second request will block. This is fixed in version 2 of this API. The parameters are the same in both APIs. This API will become deprecated in the future. Args: room_id: The room id to delete new_room_user_id: If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. room_name: A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification message: A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. block: If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. purge: If set to true, it will remove all traces of the room from your database. Defaults to true. force_purge: Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. Returns: \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) data = { new_room_user_id : new_room_user_id , room_name : room_name , message : message , block : block , purge : purge , force_purge : force_purge , } result = await self . request ( RequestMethods . DELETE , url , json = data ) res : DeletedRoomModel = DeletedRoomModel . from_dict ( result ) return res async def make_room_admin ( self , room_id_or_alias : str , user_id : str ) -> None : \"\"\" Grants another user the highest power available to a local user who is in the room. If the user is not in the room, and it is not publicly joinable, then invite the user. By default the server admin (the caller) is granted power, but another user can optionally be specified Args: room_id_or_alias: The room id or alias to make new admin user_id: The user id to make admin Returns: \"\"\" url = self . url ( f \"rooms/ { room_id_or_alias } /make_room_admin\" ) data = { \"user_id\" : user_id } await self . request ( RequestMethods . POST , url , json = data ) return None async def event_context ( self , room_id : str , event_id : str ) -> Dict [ str , Any ]: \"\"\" This API lets a client find the context of an event. This is designed primarily to investigate abuse reports. Args: room_id: event_id: Returns: \"\"\" raise NotImplementedError ( \"This API is not yet implemented\" ) block_room ( self , room_id , block ) async \u00b6 The Block Room admin API allows server admins to block and unblock rooms, and query to see if a given room is blocked. This API can be used to pre-emptively block a room, even if it's unknown to this homeserver. Users will be prevented from joining a blocked room. Parameters: Name Type Description Default room_id str The room id to block. required block bool If True the room will be blocked and if False the room will be unblocked. required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def block_room ( self , room_id : str , block : bool ) -> Dict [ str , bool ]: \"\"\" The Block Room admin API allows server admins to block and unblock rooms, and query to see if a given room is blocked. This API can be used to pre-emptively block a room, even if it's unknown to this homeserver. Users will be prevented from joining a blocked room. Args: room_id: The room id to block. block: If True the room will be blocked and if False the room will be unblocked. Returns: dictionary \"\"\" url = self . url ( f \"rooms/ { room_id } /block\" ) data = { \"block\" : block } result = await self . request ( RequestMethods . PUT , url , json = data ) return result delete_room ( self , room_id , new_room_user_id = None , room_name = 'Content Violation Notification' , message = 'Sharing illegal content on this server is not permitted and rooms in violation will be blocked' , block = False , purge = True , force_purge = False ) async \u00b6 The Delete Room admin API allows server admins to remove rooms from the server and block these rooms. Shuts down a room. Moves all local users and room aliases automatically to a new room if new_room_user_id is set. Otherwise local users only leave the room without any information. The new room will be created with the user specified by the new_room_user_id parameter as room administrator and will contain a message explaining what happened. Users invited to the new room will have power level -10 by default, and thus be unable to speak. If block is true, users will be prevented from joining the old room. This option can in sync version also be used to pre-emptively block a room, even if it's unknown to this homeserver. In this case, the room will be blocked, and no further action will be taken. If block is false, attempting to delete an unknown room is invalid and will be rejected as a bad request. This API will remove all trace of the old room from your database after removing all local users. If purge is true (the default), all traces of the old room will be removed from your database after removing all local users. If you do not want this to happen, set purge to false. Depending on the amount of history being purged, a call to the API may take several minutes or longer. The local server will only have the power to move local user and room aliases to the new room. Users on other servers will be unaffected. This version works synchronously. That means you only get the response once the server has finished the action, which may take a long time. If you request the same action a second time, and the server has not finished the first one, the second request will block. This is fixed in version 2 of this API. The parameters are the same in both APIs. This API will become deprecated in the future. Parameters: Name Type Description Default room_id str The room id to delete required new_room_user_id Optional[str] If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. None room_name str A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification 'Content Violation Notification' message str A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. 'Sharing illegal content on this server is not permitted and rooms in violation will be blocked' block bool If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. False purge bool If set to true, it will remove all traces of the room from your database. Defaults to true. True force_purge bool Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. False Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def delete_room ( self , room_id : str , new_room_user_id : Optional [ str ] = None , room_name : str = \"Content Violation Notification\" , message : str = \"Sharing illegal content on this server is not permitted and rooms in violation will be blocked\" , block : bool = False , purge : bool = True , force_purge : bool = False , ) -> DeletedRoomModel : \"\"\" The Delete Room admin API allows server admins to remove rooms from the server and block these rooms. Shuts down a room. Moves all local users and room aliases automatically to a new room if new_room_user_id is set. Otherwise local users only leave the room without any information. The new room will be created with the user specified by the new_room_user_id parameter as room administrator and will contain a message explaining what happened. Users invited to the new room will have power level -10 by default, and thus be unable to speak. If block is true, users will be prevented from joining the old room. This option can in sync version also be used to pre-emptively block a room, even if it's unknown to this homeserver. In this case, the room will be blocked, and no further action will be taken. If block is false, attempting to delete an unknown room is invalid and will be rejected as a bad request. This API will remove all trace of the old room from your database after removing all local users. If purge is true (the default), all traces of the old room will be removed from your database after removing all local users. If you do not want this to happen, set purge to false. Depending on the amount of history being purged, a call to the API may take several minutes or longer. The local server will only have the power to move local user and room aliases to the new room. Users on other servers will be unaffected. This version works synchronously. That means you only get the response once the server has finished the action, which may take a long time. If you request the same action a second time, and the server has not finished the first one, the second request will block. This is fixed in version 2 of this API. The parameters are the same in both APIs. This API will become deprecated in the future. Args: room_id: The room id to delete new_room_user_id: If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. room_name: A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification message: A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. block: If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. purge: If set to true, it will remove all traces of the room from your database. Defaults to true. force_purge: Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. Returns: \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) data = { new_room_user_id : new_room_user_id , room_name : room_name , message : message , block : block , purge : purge , force_purge : force_purge , } result = await self . request ( RequestMethods . DELETE , url , json = data ) res : DeletedRoomModel = DeletedRoomModel . from_dict ( result ) return res event_context ( self , room_id , event_id ) async \u00b6 This API lets a client find the context of an event. This is designed primarily to investigate abuse reports. Parameters: Name Type Description Default room_id str required event_id str required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def event_context ( self , room_id : str , event_id : str ) -> Dict [ str , Any ]: \"\"\" This API lets a client find the context of an event. This is designed primarily to investigate abuse reports. Args: room_id: event_id: Returns: \"\"\" raise NotImplementedError ( \"This API is not yet implemented\" ) get_block_status ( self , room_id ) async \u00b6 Is room blocked Parameters: Name Type Description Default room_id str The room id to checking required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def get_block_status ( self , room_id : str ) -> BlockStatusModel : \"\"\" Is room blocked Args: room_id: The room id to checking Returns: BlockStatusModel \"\"\" url = self . url ( f \"rooms/ { room_id } /block\" ) result = await self . request ( RequestMethods . GET , url ) res : BlockStatusModel = BlockStatusModel . from_dict ( result ) return res list_rooms ( self , from_ = 0 , limit = 100 , order_by = None , dir_ = 'f' , search_term = None ) async \u00b6 The List Room admin API allows server admins to get a list of rooms on their server. There are various parameters available that allow for filtering and sorting the returned list. This API supports pagination. Parameters: Name Type Description Default from_ int Offset in the returned list. Defaults to 0 0 limit int Maximum amount of rooms to return. Defaults to 100. 100 order_by Optional[matrix_admin_sdk.endpoints.v1.rooms.OrderBy] The method in which to sort the returned list of rooms. Defaults to OrderBy.NAME. None dir_ str Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f 'f' search_term Optional[str] Filter rooms by their room name, canonical alias and room id. Specifically, rooms are selected if the search term is contained in: the room's name, the local part of the room's canonical alias, or the complete (local and server part) room's id (case sensitive). Defaults to no filtering. None Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def list_rooms ( self , from_ : int = 0 , limit : int = 100 , order_by : Optional [ OrderBy ] = None , dir_ : str = \"f\" , search_term : Optional [ str ] = None , ) -> RoomsModel : \"\"\" The List Room admin API allows server admins to get a list of rooms on their server. There are various parameters available that allow for filtering and sorting the returned list. This API supports pagination. Args: from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of rooms to return. Defaults to 100. order_by: The method in which to sort the returned list of rooms. Defaults to OrderBy.NAME. dir_: Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f search_term: Filter rooms by their room name, canonical alias and room id. Specifically, rooms are selected if the search term is contained in: the room's name, the local part of the room's canonical alias, or the complete (local and server part) room's id (case sensitive). Defaults to no filtering. Returns: \"\"\" if order_by is None : order_by = OrderBy . NAME if dir_ not in ( \"f\" , \"b\" ): raise ValueError ( \"dir_ must be either f or b\" ) url = self . url ( \"rooms\" ) params = { \"from\" : from_ , \"limit\" : limit , \"order_by\" : order_by . value , \"dir\" : dir_ , } if search_term is not None : params [ \"search_term\" ] = search_term result = await self . request ( RequestMethods . GET , url , params = params ) return RoomsModel . from_dict ( result ) make_room_admin ( self , room_id_or_alias , user_id ) async \u00b6 Grants another user the highest power available to a local user who is in the room. If the user is not in the room, and it is not publicly joinable, then invite the user. By default the server admin (the caller) is granted power, but another user can optionally be specified Parameters: Name Type Description Default room_id_or_alias str The room id or alias to make new admin required user_id str The user id to make admin required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def make_room_admin ( self , room_id_or_alias : str , user_id : str ) -> None : \"\"\" Grants another user the highest power available to a local user who is in the room. If the user is not in the room, and it is not publicly joinable, then invite the user. By default the server admin (the caller) is granted power, but another user can optionally be specified Args: room_id_or_alias: The room id or alias to make new admin user_id: The user id to make admin Returns: \"\"\" url = self . url ( f \"rooms/ { room_id_or_alias } /make_room_admin\" ) data = { \"user_id\" : user_id } await self . request ( RequestMethods . POST , url , json = data ) return None room_details ( self , room_id ) async \u00b6 The Room Details admin API allows server admins to get all details of a room. Parameters: Name Type Description Default room_id str The room id to get details for. required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def room_details ( self , room_id : str ) -> RoomModel : \"\"\" The Room Details admin API allows server admins to get all details of a room. Args: room_id: The room id to get details for. Returns: \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : RoomModel = RoomModel . from_dict ( result ) return res room_members ( self , room_id ) async \u00b6 The Room Members admin API allows server admins to get a list of all members of a room. Parameters: Name Type Description Default room_id str The room id to get details for. required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def room_members ( self , room_id : str ) -> RoomMembersModel : \"\"\" The Room Members admin API allows server admins to get a list of all members of a room. Args: room_id: The room id to get details for. Returns: RoomMembersModel \"\"\" url = self . url ( f \"rooms/ { room_id } /members\" ) result = await self . request ( RequestMethods . GET , url ) res : RoomMembersModel = RoomMembersModel . from_dict ( result ) return res room_state ( self , room_id ) async \u00b6 The Room State admin API allows server admins to get a list of all state events in a room. Parameters: Name Type Description Default room_id str room id to get state for required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def room_state ( self , room_id : str ) -> List [ RoomStateModel ]: \"\"\" The Room State admin API allows server admins to get a list of all state events in a room. Args: room_id: room id to get state for Returns: list of RoomStateModel \"\"\" url = self . url ( f \"rooms/ { room_id } /state\" ) result = await self . request ( RequestMethods . GET , url ) res : List [ RoomStateModel ] = [ RoomStateModel . from_dict ( i ) for i in result [ \"state\" ] ] return res Models \u00b6 RoomsModel \u00b6 Rooms model Attributes: Name Type Description rooms list[Room] An array of objects, each containing information about a room offset int The offset of the first room in the list. total_rooms int The total number of rooms. next_batch str|None The token to get the next batch of rooms. prev_batch str|None The token to get the previous batch of rooms. Source code in matrix_admin_sdk/models/v1/rooms.py class RoomsModel ( BaseModel ): \"\"\" Rooms model Attributes: rooms (list[Room]): An array of objects, each containing information about a room offset (int): The offset of the first room in the list. total_rooms (int): The total number of rooms. next_batch (str|None): The token to get the next batch of rooms. prev_batch (str|None): The token to get the previous batch of rooms. \"\"\" rooms : List [ RoomModel ] offset : int total_rooms : int next_batch : Optional [ str ] = None prev_batch : Optional [ str ] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"RoomsModel\" : data = data . copy () rooms : List [ RoomModel ] = [ RoomModel . from_dict ( room ) for room in data [ \"rooms\" ]] del data [ \"rooms\" ] return cls ( ** data , rooms = rooms ) RoomModel \u00b6 Room model Attributes: Name Type Description room_id str The ID of the room. name str The name of the room. canonical_alias str The canonical (main) alias address of the room. joined_members int How many users are currently in the room. joined_local_members int How many local users are currently in the room. version str The version of the room as a string. creator str The user_id of the room creator. encryption str|None Algorithm of end-to-end encryption of messages. Is null if encryption is not active. federatable bool Whether users on other servers can join this room. public bool Whether the room is visible in room directory. join_rules str The type of rules used for users wishing to join this room. One of: [\"public\", \"knock\", \"invite\", \"private\"]. guest_access str|None Whether guests can join the room. One of: [\"can_join\", \"forbidden\"]. history_visibility str Who can see the room history. One of: [\"invited\", \"joined\", \"shared\", \"world_readable\"]. state_events int Total number of state_events of a room. Complexity of the room. Source code in matrix_admin_sdk/models/v1/rooms.py class RoomModel ( BaseModel ): \"\"\" Room model Attributes: room_id (str): The ID of the room. name (str): - The name of the room. canonical_alias (str): The canonical (main) alias address of the room. joined_members (int): How many users are currently in the room. joined_local_members (int): How many local users are currently in the room. version (str): The version of the room as a string. creator (str): The user_id of the room creator. encryption (str|None): Algorithm of end-to-end encryption of messages. Is null if encryption is not active. federatable (bool): Whether users on other servers can join this room. public (bool): Whether the room is visible in room directory. join_rules (str): The type of rules used for users wishing to join this room. One of: [\"public\", \"knock\", \"invite\", \"private\"]. guest_access (str|None): Whether guests can join the room. One of: [\"can_join\", \"forbidden\"]. history_visibility (str): Who can see the room history. One of: [\"invited\", \"joined\", \"shared\", \"world_readable\"]. state_events (int): Total number of state_events of a room. Complexity of the room. \"\"\" room_id : str name : str canonical_alias : str joined_members : int joined_local_members : int version : str creator : str encryption : Optional [ str ] federatable : bool public : bool join_rules : str guest_access : Optional [ str ] history_visibility : str state_events : int RoomMembersModel \u00b6 RoomMembersModel(members: List[str], total: int) Source code in matrix_admin_sdk/models/v1/rooms.py class RoomMembersModel ( BaseModel ): members : List [ str ] total : int RoomStateModel \u00b6 Room state model Attributes type (str): state_key (str): etc (bool): Source code in matrix_admin_sdk/models/v1/rooms.py class RoomStateModel ( BaseModel ): \"\"\" Room state model Attributes type (str): state_key (str): etc (bool): \"\"\" type : str state_key : str etc : bool BlockStatusModel \u00b6 Block status model Attributes: Name Type Description block bool A boolean. True if the room is blocked, otherwise False user_id str An optional string. If the room is blocked (block is True) shows the user who has add the room to blocking list. Otherwise it is not displayed. Source code in matrix_admin_sdk/models/v1/rooms.py class BlockStatusModel ( BaseModel ): \"\"\" Block status model Attributes: block (bool): A boolean. True if the room is blocked, otherwise False user_id (str): An optional string. If the room is blocked (block is True) shows the user who has add the room to blocking list. Otherwise it is not displayed. \"\"\" block : bool user_id : Optional [ str ] = None DeletedRoomModel \u00b6 DeletedRoomModel(kicked_users: List[str], failed_to_kick_users: List[str], local_aliases: List[str], new_room_id: str) Source code in matrix_admin_sdk/models/v1/rooms.py class DeletedRoomModel ( BaseModel ): kicked_users : List [ str ] failed_to_kick_users : List [ str ] local_aliases : List [ str ] new_room_id : str Other \u00b6 OrderBy \u00b6 Enum for the order by parameter Attributes: Name Type Description NAME Rooms are ordered alphabetically by room name. This is the default. CANONICAL_ALIAS Rooms are ordered alphabetically by main alias address of the room. JOINED_LOCAL_MEMBERS Rooms are ordered by the number of members. Largest to smallest. JOINED_LOCAL_MEMBERS Rooms are ordered by the number of local members. Largest to smallest. VERSION Rooms are ordered by room version. Largest to smallest. CREATOR Rooms are ordered alphabetically by creator of the room. ENCRYPTION Rooms are ordered alphabetically by the end-to-end encryption algorithm. FEDERATABLE Rooms are ordered by whether the room is federatable. PUBLIC Rooms are ordered by visibility in room list. JOIN_RULES Rooms are ordered alphabetically by join rules of the room. GUEST_ACCESS Rooms are ordered alphabetically by guest access option of the room. HISTORY_VISIBILITY Rooms are ordered alphabetically by visibility of history of the room. STATE_EVENTS Rooms are ordered by number of state events. Largest to smallest. Source code in matrix_admin_sdk/endpoints/v1/rooms.py class OrderBy ( Enum ): \"\"\" Enum for the order by parameter Attributes: NAME: Rooms are ordered alphabetically by room name. This is the default. CANONICAL_ALIAS: Rooms are ordered alphabetically by main alias address of the room. JOINED_LOCAL_MEMBERS: Rooms are ordered by the number of members. Largest to smallest. JOINED_LOCAL_MEMBERS: Rooms are ordered by the number of local members. Largest to smallest. VERSION: Rooms are ordered by room version. Largest to smallest. CREATOR: Rooms are ordered alphabetically by creator of the room. ENCRYPTION: Rooms are ordered alphabetically by the end-to-end encryption algorithm. FEDERATABLE: Rooms are ordered by whether the room is federatable. PUBLIC: Rooms are ordered by visibility in room list. JOIN_RULES: Rooms are ordered alphabetically by join rules of the room. GUEST_ACCESS: Rooms are ordered alphabetically by guest access option of the room. HISTORY_VISIBILITY: Rooms are ordered alphabetically by visibility of history of the room. STATE_EVENTS: Rooms are ordered by number of state events. Largest to smallest. \"\"\" NAME = \"name\" CANONICAL_ALIAS = \"canonical_alias\" JOINED_MEMBERS = \"joined_members\" JOINED_LOCAL_MEMBERS = \"joined_local_members\" VERSION = \"version\" CREATOR = \"creator\" ENCRYPTION = \"encryption\" FEDERATABLE = \"federatable\" PUBLIC = \"public\" JOIN_RULES = \"join_rules\" GUEST_ACCESS = \"guest_access\" HISTORY_VISIBILITY = \"history_visibility\" STATE_EVENTS = \"state_events\"","title":"Rooms"},{"location":"endpoints/v1/rooms/#rooms","text":"","title":"Rooms"},{"location":"endpoints/v1/rooms/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/rooms/#rooms_1","text":"Rooms Endpoints API Source code in matrix_admin_sdk/endpoints/v1/rooms.py class Rooms ( Endpoint ): \"\"\" Rooms Endpoints API \"\"\" async def list_rooms ( self , from_ : int = 0 , limit : int = 100 , order_by : Optional [ OrderBy ] = None , dir_ : str = \"f\" , search_term : Optional [ str ] = None , ) -> RoomsModel : \"\"\" The List Room admin API allows server admins to get a list of rooms on their server. There are various parameters available that allow for filtering and sorting the returned list. This API supports pagination. Args: from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of rooms to return. Defaults to 100. order_by: The method in which to sort the returned list of rooms. Defaults to OrderBy.NAME. dir_: Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f search_term: Filter rooms by their room name, canonical alias and room id. Specifically, rooms are selected if the search term is contained in: the room's name, the local part of the room's canonical alias, or the complete (local and server part) room's id (case sensitive). Defaults to no filtering. Returns: \"\"\" if order_by is None : order_by = OrderBy . NAME if dir_ not in ( \"f\" , \"b\" ): raise ValueError ( \"dir_ must be either f or b\" ) url = self . url ( \"rooms\" ) params = { \"from\" : from_ , \"limit\" : limit , \"order_by\" : order_by . value , \"dir\" : dir_ , } if search_term is not None : params [ \"search_term\" ] = search_term result = await self . request ( RequestMethods . GET , url , params = params ) return RoomsModel . from_dict ( result ) async def room_details ( self , room_id : str ) -> RoomModel : \"\"\" The Room Details admin API allows server admins to get all details of a room. Args: room_id: The room id to get details for. Returns: \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : RoomModel = RoomModel . from_dict ( result ) return res async def room_members ( self , room_id : str ) -> RoomMembersModel : \"\"\" The Room Members admin API allows server admins to get a list of all members of a room. Args: room_id: The room id to get details for. Returns: RoomMembersModel \"\"\" url = self . url ( f \"rooms/ { room_id } /members\" ) result = await self . request ( RequestMethods . GET , url ) res : RoomMembersModel = RoomMembersModel . from_dict ( result ) return res async def room_state ( self , room_id : str ) -> List [ RoomStateModel ]: \"\"\" The Room State admin API allows server admins to get a list of all state events in a room. Args: room_id: room id to get state for Returns: list of RoomStateModel \"\"\" url = self . url ( f \"rooms/ { room_id } /state\" ) result = await self . request ( RequestMethods . GET , url ) res : List [ RoomStateModel ] = [ RoomStateModel . from_dict ( i ) for i in result [ \"state\" ] ] return res async def block_room ( self , room_id : str , block : bool ) -> Dict [ str , bool ]: \"\"\" The Block Room admin API allows server admins to block and unblock rooms, and query to see if a given room is blocked. This API can be used to pre-emptively block a room, even if it's unknown to this homeserver. Users will be prevented from joining a blocked room. Args: room_id: The room id to block. block: If True the room will be blocked and if False the room will be unblocked. Returns: dictionary \"\"\" url = self . url ( f \"rooms/ { room_id } /block\" ) data = { \"block\" : block } result = await self . request ( RequestMethods . PUT , url , json = data ) return result async def get_block_status ( self , room_id : str ) -> BlockStatusModel : \"\"\" Is room blocked Args: room_id: The room id to checking Returns: BlockStatusModel \"\"\" url = self . url ( f \"rooms/ { room_id } /block\" ) result = await self . request ( RequestMethods . GET , url ) res : BlockStatusModel = BlockStatusModel . from_dict ( result ) return res async def delete_room ( self , room_id : str , new_room_user_id : Optional [ str ] = None , room_name : str = \"Content Violation Notification\" , message : str = \"Sharing illegal content on this server is not permitted and rooms in violation will be blocked\" , block : bool = False , purge : bool = True , force_purge : bool = False , ) -> DeletedRoomModel : \"\"\" The Delete Room admin API allows server admins to remove rooms from the server and block these rooms. Shuts down a room. Moves all local users and room aliases automatically to a new room if new_room_user_id is set. Otherwise local users only leave the room without any information. The new room will be created with the user specified by the new_room_user_id parameter as room administrator and will contain a message explaining what happened. Users invited to the new room will have power level -10 by default, and thus be unable to speak. If block is true, users will be prevented from joining the old room. This option can in sync version also be used to pre-emptively block a room, even if it's unknown to this homeserver. In this case, the room will be blocked, and no further action will be taken. If block is false, attempting to delete an unknown room is invalid and will be rejected as a bad request. This API will remove all trace of the old room from your database after removing all local users. If purge is true (the default), all traces of the old room will be removed from your database after removing all local users. If you do not want this to happen, set purge to false. Depending on the amount of history being purged, a call to the API may take several minutes or longer. The local server will only have the power to move local user and room aliases to the new room. Users on other servers will be unaffected. This version works synchronously. That means you only get the response once the server has finished the action, which may take a long time. If you request the same action a second time, and the server has not finished the first one, the second request will block. This is fixed in version 2 of this API. The parameters are the same in both APIs. This API will become deprecated in the future. Args: room_id: The room id to delete new_room_user_id: If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. room_name: A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification message: A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. block: If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. purge: If set to true, it will remove all traces of the room from your database. Defaults to true. force_purge: Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. Returns: \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) data = { new_room_user_id : new_room_user_id , room_name : room_name , message : message , block : block , purge : purge , force_purge : force_purge , } result = await self . request ( RequestMethods . DELETE , url , json = data ) res : DeletedRoomModel = DeletedRoomModel . from_dict ( result ) return res async def make_room_admin ( self , room_id_or_alias : str , user_id : str ) -> None : \"\"\" Grants another user the highest power available to a local user who is in the room. If the user is not in the room, and it is not publicly joinable, then invite the user. By default the server admin (the caller) is granted power, but another user can optionally be specified Args: room_id_or_alias: The room id or alias to make new admin user_id: The user id to make admin Returns: \"\"\" url = self . url ( f \"rooms/ { room_id_or_alias } /make_room_admin\" ) data = { \"user_id\" : user_id } await self . request ( RequestMethods . POST , url , json = data ) return None async def event_context ( self , room_id : str , event_id : str ) -> Dict [ str , Any ]: \"\"\" This API lets a client find the context of an event. This is designed primarily to investigate abuse reports. Args: room_id: event_id: Returns: \"\"\" raise NotImplementedError ( \"This API is not yet implemented\" )","title":"Rooms"},{"location":"endpoints/v1/rooms/#matrix_admin_sdk.endpoints.v1.rooms.Rooms.block_room","text":"The Block Room admin API allows server admins to block and unblock rooms, and query to see if a given room is blocked. This API can be used to pre-emptively block a room, even if it's unknown to this homeserver. Users will be prevented from joining a blocked room. Parameters: Name Type Description Default room_id str The room id to block. required block bool If True the room will be blocked and if False the room will be unblocked. required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def block_room ( self , room_id : str , block : bool ) -> Dict [ str , bool ]: \"\"\" The Block Room admin API allows server admins to block and unblock rooms, and query to see if a given room is blocked. This API can be used to pre-emptively block a room, even if it's unknown to this homeserver. Users will be prevented from joining a blocked room. Args: room_id: The room id to block. block: If True the room will be blocked and if False the room will be unblocked. Returns: dictionary \"\"\" url = self . url ( f \"rooms/ { room_id } /block\" ) data = { \"block\" : block } result = await self . request ( RequestMethods . PUT , url , json = data ) return result","title":"block_room()"},{"location":"endpoints/v1/rooms/#matrix_admin_sdk.endpoints.v1.rooms.Rooms.delete_room","text":"The Delete Room admin API allows server admins to remove rooms from the server and block these rooms. Shuts down a room. Moves all local users and room aliases automatically to a new room if new_room_user_id is set. Otherwise local users only leave the room without any information. The new room will be created with the user specified by the new_room_user_id parameter as room administrator and will contain a message explaining what happened. Users invited to the new room will have power level -10 by default, and thus be unable to speak. If block is true, users will be prevented from joining the old room. This option can in sync version also be used to pre-emptively block a room, even if it's unknown to this homeserver. In this case, the room will be blocked, and no further action will be taken. If block is false, attempting to delete an unknown room is invalid and will be rejected as a bad request. This API will remove all trace of the old room from your database after removing all local users. If purge is true (the default), all traces of the old room will be removed from your database after removing all local users. If you do not want this to happen, set purge to false. Depending on the amount of history being purged, a call to the API may take several minutes or longer. The local server will only have the power to move local user and room aliases to the new room. Users on other servers will be unaffected. This version works synchronously. That means you only get the response once the server has finished the action, which may take a long time. If you request the same action a second time, and the server has not finished the first one, the second request will block. This is fixed in version 2 of this API. The parameters are the same in both APIs. This API will become deprecated in the future. Parameters: Name Type Description Default room_id str The room id to delete required new_room_user_id Optional[str] If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. None room_name str A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification 'Content Violation Notification' message str A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. 'Sharing illegal content on this server is not permitted and rooms in violation will be blocked' block bool If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. False purge bool If set to true, it will remove all traces of the room from your database. Defaults to true. True force_purge bool Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. False Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def delete_room ( self , room_id : str , new_room_user_id : Optional [ str ] = None , room_name : str = \"Content Violation Notification\" , message : str = \"Sharing illegal content on this server is not permitted and rooms in violation will be blocked\" , block : bool = False , purge : bool = True , force_purge : bool = False , ) -> DeletedRoomModel : \"\"\" The Delete Room admin API allows server admins to remove rooms from the server and block these rooms. Shuts down a room. Moves all local users and room aliases automatically to a new room if new_room_user_id is set. Otherwise local users only leave the room without any information. The new room will be created with the user specified by the new_room_user_id parameter as room administrator and will contain a message explaining what happened. Users invited to the new room will have power level -10 by default, and thus be unable to speak. If block is true, users will be prevented from joining the old room. This option can in sync version also be used to pre-emptively block a room, even if it's unknown to this homeserver. In this case, the room will be blocked, and no further action will be taken. If block is false, attempting to delete an unknown room is invalid and will be rejected as a bad request. This API will remove all trace of the old room from your database after removing all local users. If purge is true (the default), all traces of the old room will be removed from your database after removing all local users. If you do not want this to happen, set purge to false. Depending on the amount of history being purged, a call to the API may take several minutes or longer. The local server will only have the power to move local user and room aliases to the new room. Users on other servers will be unaffected. This version works synchronously. That means you only get the response once the server has finished the action, which may take a long time. If you request the same action a second time, and the server has not finished the first one, the second request will block. This is fixed in version 2 of this API. The parameters are the same in both APIs. This API will become deprecated in the future. Args: room_id: The room id to delete new_room_user_id: If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. room_name: A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification message: A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. block: If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. purge: If set to true, it will remove all traces of the room from your database. Defaults to true. force_purge: Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. Returns: \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) data = { new_room_user_id : new_room_user_id , room_name : room_name , message : message , block : block , purge : purge , force_purge : force_purge , } result = await self . request ( RequestMethods . DELETE , url , json = data ) res : DeletedRoomModel = DeletedRoomModel . from_dict ( result ) return res","title":"delete_room()"},{"location":"endpoints/v1/rooms/#matrix_admin_sdk.endpoints.v1.rooms.Rooms.event_context","text":"This API lets a client find the context of an event. This is designed primarily to investigate abuse reports. Parameters: Name Type Description Default room_id str required event_id str required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def event_context ( self , room_id : str , event_id : str ) -> Dict [ str , Any ]: \"\"\" This API lets a client find the context of an event. This is designed primarily to investigate abuse reports. Args: room_id: event_id: Returns: \"\"\" raise NotImplementedError ( \"This API is not yet implemented\" )","title":"event_context()"},{"location":"endpoints/v1/rooms/#matrix_admin_sdk.endpoints.v1.rooms.Rooms.get_block_status","text":"Is room blocked Parameters: Name Type Description Default room_id str The room id to checking required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def get_block_status ( self , room_id : str ) -> BlockStatusModel : \"\"\" Is room blocked Args: room_id: The room id to checking Returns: BlockStatusModel \"\"\" url = self . url ( f \"rooms/ { room_id } /block\" ) result = await self . request ( RequestMethods . GET , url ) res : BlockStatusModel = BlockStatusModel . from_dict ( result ) return res","title":"get_block_status()"},{"location":"endpoints/v1/rooms/#matrix_admin_sdk.endpoints.v1.rooms.Rooms.list_rooms","text":"The List Room admin API allows server admins to get a list of rooms on their server. There are various parameters available that allow for filtering and sorting the returned list. This API supports pagination. Parameters: Name Type Description Default from_ int Offset in the returned list. Defaults to 0 0 limit int Maximum amount of rooms to return. Defaults to 100. 100 order_by Optional[matrix_admin_sdk.endpoints.v1.rooms.OrderBy] The method in which to sort the returned list of rooms. Defaults to OrderBy.NAME. None dir_ str Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f 'f' search_term Optional[str] Filter rooms by their room name, canonical alias and room id. Specifically, rooms are selected if the search term is contained in: the room's name, the local part of the room's canonical alias, or the complete (local and server part) room's id (case sensitive). Defaults to no filtering. None Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def list_rooms ( self , from_ : int = 0 , limit : int = 100 , order_by : Optional [ OrderBy ] = None , dir_ : str = \"f\" , search_term : Optional [ str ] = None , ) -> RoomsModel : \"\"\" The List Room admin API allows server admins to get a list of rooms on their server. There are various parameters available that allow for filtering and sorting the returned list. This API supports pagination. Args: from_: Offset in the returned list. Defaults to 0 limit: Maximum amount of rooms to return. Defaults to 100. order_by: The method in which to sort the returned list of rooms. Defaults to OrderBy.NAME. dir_: Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f search_term: Filter rooms by their room name, canonical alias and room id. Specifically, rooms are selected if the search term is contained in: the room's name, the local part of the room's canonical alias, or the complete (local and server part) room's id (case sensitive). Defaults to no filtering. Returns: \"\"\" if order_by is None : order_by = OrderBy . NAME if dir_ not in ( \"f\" , \"b\" ): raise ValueError ( \"dir_ must be either f or b\" ) url = self . url ( \"rooms\" ) params = { \"from\" : from_ , \"limit\" : limit , \"order_by\" : order_by . value , \"dir\" : dir_ , } if search_term is not None : params [ \"search_term\" ] = search_term result = await self . request ( RequestMethods . GET , url , params = params ) return RoomsModel . from_dict ( result )","title":"list_rooms()"},{"location":"endpoints/v1/rooms/#matrix_admin_sdk.endpoints.v1.rooms.Rooms.make_room_admin","text":"Grants another user the highest power available to a local user who is in the room. If the user is not in the room, and it is not publicly joinable, then invite the user. By default the server admin (the caller) is granted power, but another user can optionally be specified Parameters: Name Type Description Default room_id_or_alias str The room id or alias to make new admin required user_id str The user id to make admin required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def make_room_admin ( self , room_id_or_alias : str , user_id : str ) -> None : \"\"\" Grants another user the highest power available to a local user who is in the room. If the user is not in the room, and it is not publicly joinable, then invite the user. By default the server admin (the caller) is granted power, but another user can optionally be specified Args: room_id_or_alias: The room id or alias to make new admin user_id: The user id to make admin Returns: \"\"\" url = self . url ( f \"rooms/ { room_id_or_alias } /make_room_admin\" ) data = { \"user_id\" : user_id } await self . request ( RequestMethods . POST , url , json = data ) return None","title":"make_room_admin()"},{"location":"endpoints/v1/rooms/#matrix_admin_sdk.endpoints.v1.rooms.Rooms.room_details","text":"The Room Details admin API allows server admins to get all details of a room. Parameters: Name Type Description Default room_id str The room id to get details for. required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def room_details ( self , room_id : str ) -> RoomModel : \"\"\" The Room Details admin API allows server admins to get all details of a room. Args: room_id: The room id to get details for. Returns: \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : RoomModel = RoomModel . from_dict ( result ) return res","title":"room_details()"},{"location":"endpoints/v1/rooms/#matrix_admin_sdk.endpoints.v1.rooms.Rooms.room_members","text":"The Room Members admin API allows server admins to get a list of all members of a room. Parameters: Name Type Description Default room_id str The room id to get details for. required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def room_members ( self , room_id : str ) -> RoomMembersModel : \"\"\" The Room Members admin API allows server admins to get a list of all members of a room. Args: room_id: The room id to get details for. Returns: RoomMembersModel \"\"\" url = self . url ( f \"rooms/ { room_id } /members\" ) result = await self . request ( RequestMethods . GET , url ) res : RoomMembersModel = RoomMembersModel . from_dict ( result ) return res","title":"room_members()"},{"location":"endpoints/v1/rooms/#matrix_admin_sdk.endpoints.v1.rooms.Rooms.room_state","text":"The Room State admin API allows server admins to get a list of all state events in a room. Parameters: Name Type Description Default room_id str room id to get state for required Source code in matrix_admin_sdk/endpoints/v1/rooms.py async def room_state ( self , room_id : str ) -> List [ RoomStateModel ]: \"\"\" The Room State admin API allows server admins to get a list of all state events in a room. Args: room_id: room id to get state for Returns: list of RoomStateModel \"\"\" url = self . url ( f \"rooms/ { room_id } /state\" ) result = await self . request ( RequestMethods . GET , url ) res : List [ RoomStateModel ] = [ RoomStateModel . from_dict ( i ) for i in result [ \"state\" ] ] return res","title":"room_state()"},{"location":"endpoints/v1/rooms/#models","text":"","title":"Models"},{"location":"endpoints/v1/rooms/#roomsmodel","text":"Rooms model Attributes: Name Type Description rooms list[Room] An array of objects, each containing information about a room offset int The offset of the first room in the list. total_rooms int The total number of rooms. next_batch str|None The token to get the next batch of rooms. prev_batch str|None The token to get the previous batch of rooms. Source code in matrix_admin_sdk/models/v1/rooms.py class RoomsModel ( BaseModel ): \"\"\" Rooms model Attributes: rooms (list[Room]): An array of objects, each containing information about a room offset (int): The offset of the first room in the list. total_rooms (int): The total number of rooms. next_batch (str|None): The token to get the next batch of rooms. prev_batch (str|None): The token to get the previous batch of rooms. \"\"\" rooms : List [ RoomModel ] offset : int total_rooms : int next_batch : Optional [ str ] = None prev_batch : Optional [ str ] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"RoomsModel\" : data = data . copy () rooms : List [ RoomModel ] = [ RoomModel . from_dict ( room ) for room in data [ \"rooms\" ]] del data [ \"rooms\" ] return cls ( ** data , rooms = rooms )","title":"RoomsModel"},{"location":"endpoints/v1/rooms/#roommodel","text":"Room model Attributes: Name Type Description room_id str The ID of the room. name str The name of the room. canonical_alias str The canonical (main) alias address of the room. joined_members int How many users are currently in the room. joined_local_members int How many local users are currently in the room. version str The version of the room as a string. creator str The user_id of the room creator. encryption str|None Algorithm of end-to-end encryption of messages. Is null if encryption is not active. federatable bool Whether users on other servers can join this room. public bool Whether the room is visible in room directory. join_rules str The type of rules used for users wishing to join this room. One of: [\"public\", \"knock\", \"invite\", \"private\"]. guest_access str|None Whether guests can join the room. One of: [\"can_join\", \"forbidden\"]. history_visibility str Who can see the room history. One of: [\"invited\", \"joined\", \"shared\", \"world_readable\"]. state_events int Total number of state_events of a room. Complexity of the room. Source code in matrix_admin_sdk/models/v1/rooms.py class RoomModel ( BaseModel ): \"\"\" Room model Attributes: room_id (str): The ID of the room. name (str): - The name of the room. canonical_alias (str): The canonical (main) alias address of the room. joined_members (int): How many users are currently in the room. joined_local_members (int): How many local users are currently in the room. version (str): The version of the room as a string. creator (str): The user_id of the room creator. encryption (str|None): Algorithm of end-to-end encryption of messages. Is null if encryption is not active. federatable (bool): Whether users on other servers can join this room. public (bool): Whether the room is visible in room directory. join_rules (str): The type of rules used for users wishing to join this room. One of: [\"public\", \"knock\", \"invite\", \"private\"]. guest_access (str|None): Whether guests can join the room. One of: [\"can_join\", \"forbidden\"]. history_visibility (str): Who can see the room history. One of: [\"invited\", \"joined\", \"shared\", \"world_readable\"]. state_events (int): Total number of state_events of a room. Complexity of the room. \"\"\" room_id : str name : str canonical_alias : str joined_members : int joined_local_members : int version : str creator : str encryption : Optional [ str ] federatable : bool public : bool join_rules : str guest_access : Optional [ str ] history_visibility : str state_events : int","title":"RoomModel"},{"location":"endpoints/v1/rooms/#roommembersmodel","text":"RoomMembersModel(members: List[str], total: int) Source code in matrix_admin_sdk/models/v1/rooms.py class RoomMembersModel ( BaseModel ): members : List [ str ] total : int","title":"RoomMembersModel"},{"location":"endpoints/v1/rooms/#roomstatemodel","text":"Room state model Attributes type (str): state_key (str): etc (bool): Source code in matrix_admin_sdk/models/v1/rooms.py class RoomStateModel ( BaseModel ): \"\"\" Room state model Attributes type (str): state_key (str): etc (bool): \"\"\" type : str state_key : str etc : bool","title":"RoomStateModel"},{"location":"endpoints/v1/rooms/#blockstatusmodel","text":"Block status model Attributes: Name Type Description block bool A boolean. True if the room is blocked, otherwise False user_id str An optional string. If the room is blocked (block is True) shows the user who has add the room to blocking list. Otherwise it is not displayed. Source code in matrix_admin_sdk/models/v1/rooms.py class BlockStatusModel ( BaseModel ): \"\"\" Block status model Attributes: block (bool): A boolean. True if the room is blocked, otherwise False user_id (str): An optional string. If the room is blocked (block is True) shows the user who has add the room to blocking list. Otherwise it is not displayed. \"\"\" block : bool user_id : Optional [ str ] = None","title":"BlockStatusModel"},{"location":"endpoints/v1/rooms/#deletedroommodel","text":"DeletedRoomModel(kicked_users: List[str], failed_to_kick_users: List[str], local_aliases: List[str], new_room_id: str) Source code in matrix_admin_sdk/models/v1/rooms.py class DeletedRoomModel ( BaseModel ): kicked_users : List [ str ] failed_to_kick_users : List [ str ] local_aliases : List [ str ] new_room_id : str","title":"DeletedRoomModel"},{"location":"endpoints/v1/rooms/#other","text":"","title":"Other"},{"location":"endpoints/v1/rooms/#orderby","text":"Enum for the order by parameter Attributes: Name Type Description NAME Rooms are ordered alphabetically by room name. This is the default. CANONICAL_ALIAS Rooms are ordered alphabetically by main alias address of the room. JOINED_LOCAL_MEMBERS Rooms are ordered by the number of members. Largest to smallest. JOINED_LOCAL_MEMBERS Rooms are ordered by the number of local members. Largest to smallest. VERSION Rooms are ordered by room version. Largest to smallest. CREATOR Rooms are ordered alphabetically by creator of the room. ENCRYPTION Rooms are ordered alphabetically by the end-to-end encryption algorithm. FEDERATABLE Rooms are ordered by whether the room is federatable. PUBLIC Rooms are ordered by visibility in room list. JOIN_RULES Rooms are ordered alphabetically by join rules of the room. GUEST_ACCESS Rooms are ordered alphabetically by guest access option of the room. HISTORY_VISIBILITY Rooms are ordered alphabetically by visibility of history of the room. STATE_EVENTS Rooms are ordered by number of state events. Largest to smallest. Source code in matrix_admin_sdk/endpoints/v1/rooms.py class OrderBy ( Enum ): \"\"\" Enum for the order by parameter Attributes: NAME: Rooms are ordered alphabetically by room name. This is the default. CANONICAL_ALIAS: Rooms are ordered alphabetically by main alias address of the room. JOINED_LOCAL_MEMBERS: Rooms are ordered by the number of members. Largest to smallest. JOINED_LOCAL_MEMBERS: Rooms are ordered by the number of local members. Largest to smallest. VERSION: Rooms are ordered by room version. Largest to smallest. CREATOR: Rooms are ordered alphabetically by creator of the room. ENCRYPTION: Rooms are ordered alphabetically by the end-to-end encryption algorithm. FEDERATABLE: Rooms are ordered by whether the room is federatable. PUBLIC: Rooms are ordered by visibility in room list. JOIN_RULES: Rooms are ordered alphabetically by join rules of the room. GUEST_ACCESS: Rooms are ordered alphabetically by guest access option of the room. HISTORY_VISIBILITY: Rooms are ordered alphabetically by visibility of history of the room. STATE_EVENTS: Rooms are ordered by number of state events. Largest to smallest. \"\"\" NAME = \"name\" CANONICAL_ALIAS = \"canonical_alias\" JOINED_MEMBERS = \"joined_members\" JOINED_LOCAL_MEMBERS = \"joined_local_members\" VERSION = \"version\" CREATOR = \"creator\" ENCRYPTION = \"encryption\" FEDERATABLE = \"federatable\" PUBLIC = \"public\" JOIN_RULES = \"join_rules\" GUEST_ACCESS = \"guest_access\" HISTORY_VISIBILITY = \"history_visibility\" STATE_EVENTS = \"state_events\"","title":"OrderBy"},{"location":"endpoints/v1/server/","text":"Server \u00b6 Endpoints \u00b6 Server \u00b6 Source code in matrix_admin_sdk/endpoints/v1/server.py class Server ( Endpoint ): async def get_version ( self ) -> ServerVersionModel : \"\"\" This API returns the running Synapse version and the Python version on which Synapse is being run. This is useful when a Synapse instance is behind a proxy that does not forward the 'Server' header (which also contains Synapse version information). Returns: \"\"\" url = self . url ( \"server_version\" ) result = await self . request ( RequestMethods . GET , url ) res : ServerVersionModel = ServerVersionModel . from_dict ( result ) return res get_version ( self ) async \u00b6 This API returns the running Synapse version and the Python version on which Synapse is being run. This is useful when a Synapse instance is behind a proxy that does not forward the 'Server' header (which also contains Synapse version information). Source code in matrix_admin_sdk/endpoints/v1/server.py async def get_version ( self ) -> ServerVersionModel : \"\"\" This API returns the running Synapse version and the Python version on which Synapse is being run. This is useful when a Synapse instance is behind a proxy that does not forward the 'Server' header (which also contains Synapse version information). Returns: \"\"\" url = self . url ( \"server_version\" ) result = await self . request ( RequestMethods . GET , url ) res : ServerVersionModel = ServerVersionModel . from_dict ( result ) return res Models \u00b6 ServerVersionModel \u00b6 Server version model. Attributes: Name Type Description server_version str Synapse version python_version str Python version Source code in matrix_admin_sdk/models/v1/server.py class ServerVersionModel ( BaseModel ): \"\"\" Server version model. Attributes: server_version (str): Synapse version python_version (str): Python version \"\"\" server_version : str python_version : str","title":"Server"},{"location":"endpoints/v1/server/#server","text":"","title":"Server"},{"location":"endpoints/v1/server/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/server/#server_1","text":"Source code in matrix_admin_sdk/endpoints/v1/server.py class Server ( Endpoint ): async def get_version ( self ) -> ServerVersionModel : \"\"\" This API returns the running Synapse version and the Python version on which Synapse is being run. This is useful when a Synapse instance is behind a proxy that does not forward the 'Server' header (which also contains Synapse version information). Returns: \"\"\" url = self . url ( \"server_version\" ) result = await self . request ( RequestMethods . GET , url ) res : ServerVersionModel = ServerVersionModel . from_dict ( result ) return res","title":"Server"},{"location":"endpoints/v1/server/#matrix_admin_sdk.endpoints.v1.server.Server.get_version","text":"This API returns the running Synapse version and the Python version on which Synapse is being run. This is useful when a Synapse instance is behind a proxy that does not forward the 'Server' header (which also contains Synapse version information). Source code in matrix_admin_sdk/endpoints/v1/server.py async def get_version ( self ) -> ServerVersionModel : \"\"\" This API returns the running Synapse version and the Python version on which Synapse is being run. This is useful when a Synapse instance is behind a proxy that does not forward the 'Server' header (which also contains Synapse version information). Returns: \"\"\" url = self . url ( \"server_version\" ) result = await self . request ( RequestMethods . GET , url ) res : ServerVersionModel = ServerVersionModel . from_dict ( result ) return res","title":"get_version()"},{"location":"endpoints/v1/server/#models","text":"","title":"Models"},{"location":"endpoints/v1/server/#serverversionmodel","text":"Server version model. Attributes: Name Type Description server_version str Synapse version python_version str Python version Source code in matrix_admin_sdk/models/v1/server.py class ServerVersionModel ( BaseModel ): \"\"\" Server version model. Attributes: server_version (str): Synapse version python_version (str): Python version \"\"\" server_version : str python_version : str","title":"ServerVersionModel"},{"location":"endpoints/v1/server_notices/","text":"Server Notices \u00b6 Endpoints \u00b6 ServerNotices \u00b6 The API to send notices Source code in matrix_admin_sdk/endpoints/v1/server_notices.py class ServerNotices ( Endpoint ): \"\"\" The API to send notices \"\"\" async def server_notice ( self , user_id : str , body : str , msg_type : str = \"m.text\" , type_ : str = \"m.room.message\" , state_key : Optional [ Any ] = None , ) -> Dict [ str , str ]: \"\"\" The API to send notices Args: user_id: user id to send notice body: the body of the notice msg_type: message type, Default: m.text type_: the type of event. Defaults to m.room.message state_key:Setting this will result in a state event being sent. Returns: {\"event_id\": \"<event_id>\"} \"\"\" url = self . url ( \"send_server_notice\" ) data = { \"user_id\" : user_id , \"content\" : { \"body\" : body , \"msgtype\" : msg_type }, \"type\" : type_ , } if state_key is not None : data [ \"state_key\" ] = state_key result = await self . request ( RequestMethods . POST , url , json = data ) return result server_notice ( self , user_id , body , msg_type = 'm.text' , type_ = 'm.room.message' , state_key = None ) async \u00b6 The API to send notices Parameters: Name Type Description Default user_id str user id to send notice required body str the body of the notice required msg_type str message type, Default: m.text 'm.text' type_ str the type of event. Defaults to m.room.message 'm.room.message' state_key Optional[Any] Setting this will result in a state event being sent. None Source code in matrix_admin_sdk/endpoints/v1/server_notices.py async def server_notice ( self , user_id : str , body : str , msg_type : str = \"m.text\" , type_ : str = \"m.room.message\" , state_key : Optional [ Any ] = None , ) -> Dict [ str , str ]: \"\"\" The API to send notices Args: user_id: user id to send notice body: the body of the notice msg_type: message type, Default: m.text type_: the type of event. Defaults to m.room.message state_key:Setting this will result in a state event being sent. Returns: {\"event_id\": \"<event_id>\"} \"\"\" url = self . url ( \"send_server_notice\" ) data = { \"user_id\" : user_id , \"content\" : { \"body\" : body , \"msgtype\" : msg_type }, \"type\" : type_ , } if state_key is not None : data [ \"state_key\" ] = state_key result = await self . request ( RequestMethods . POST , url , json = data ) return result","title":"Server Notices"},{"location":"endpoints/v1/server_notices/#server-notices","text":"","title":"Server Notices"},{"location":"endpoints/v1/server_notices/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/server_notices/#servernotices","text":"The API to send notices Source code in matrix_admin_sdk/endpoints/v1/server_notices.py class ServerNotices ( Endpoint ): \"\"\" The API to send notices \"\"\" async def server_notice ( self , user_id : str , body : str , msg_type : str = \"m.text\" , type_ : str = \"m.room.message\" , state_key : Optional [ Any ] = None , ) -> Dict [ str , str ]: \"\"\" The API to send notices Args: user_id: user id to send notice body: the body of the notice msg_type: message type, Default: m.text type_: the type of event. Defaults to m.room.message state_key:Setting this will result in a state event being sent. Returns: {\"event_id\": \"<event_id>\"} \"\"\" url = self . url ( \"send_server_notice\" ) data = { \"user_id\" : user_id , \"content\" : { \"body\" : body , \"msgtype\" : msg_type }, \"type\" : type_ , } if state_key is not None : data [ \"state_key\" ] = state_key result = await self . request ( RequestMethods . POST , url , json = data ) return result","title":"ServerNotices"},{"location":"endpoints/v1/server_notices/#matrix_admin_sdk.endpoints.v1.server_notices.ServerNotices.server_notice","text":"The API to send notices Parameters: Name Type Description Default user_id str user id to send notice required body str the body of the notice required msg_type str message type, Default: m.text 'm.text' type_ str the type of event. Defaults to m.room.message 'm.room.message' state_key Optional[Any] Setting this will result in a state event being sent. None Source code in matrix_admin_sdk/endpoints/v1/server_notices.py async def server_notice ( self , user_id : str , body : str , msg_type : str = \"m.text\" , type_ : str = \"m.room.message\" , state_key : Optional [ Any ] = None , ) -> Dict [ str , str ]: \"\"\" The API to send notices Args: user_id: user id to send notice body: the body of the notice msg_type: message type, Default: m.text type_: the type of event. Defaults to m.room.message state_key:Setting this will result in a state event being sent. Returns: {\"event_id\": \"<event_id>\"} \"\"\" url = self . url ( \"send_server_notice\" ) data = { \"user_id\" : user_id , \"content\" : { \"body\" : body , \"msgtype\" : msg_type }, \"type\" : type_ , } if state_key is not None : data [ \"state_key\" ] = state_key result = await self . request ( RequestMethods . POST , url , json = data ) return result","title":"server_notice()"},{"location":"endpoints/v1/user/","text":"User \u00b6 Endpoints \u00b6 User \u00b6 User endpoint Source code in matrix_admin_sdk/endpoints/v1/user.py class User ( Endpoint ): \"\"\" User endpoint \"\"\" def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize User endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: keyword arguments to pass to Endpoint Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs ) async def query_current_sessions ( self ) -> CurrentSessionsModel : \"\"\" This API returns information about the active sessions for a specific user Returns: \"\"\" url = self . url ( f \"whois/ { self . user_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : CurrentSessionsModel = CurrentSessionsModel . from_dict ( result ) return res async def deactivate_account ( self ) -> Dict [ str , bool ]: \"\"\" This API deactivates an account. It removes active access tokens, resets the password, and deletes third-party IDs (to prevent the user requesting a password reset). It can also mark the user as GDPR-erased. This means messages sent by the user will still be visible by anyone that was in the room when these messages were sent, but hidden from users joining the room afterwards. Returns: {\"erase\": True} \"\"\" url = self . url ( f \"deactivate/ { self . user_id } \" ) data : Dict [ str , str ] = {} result = await self . request ( RequestMethods . POST , url , json = data ) return result async def reset_password ( self , new_password : str , logout_devices : bool = True ) -> None : \"\"\" Changes the password of another user. This will automatically log the user out of all their devices Args: new_password: new user's password logout_devices: logout all devices, Default: True Returns: None \"\"\" url = self . url ( f \"reset_password/ { self . user_id } \" ) data = { \"new_password\" : new_password , \"logout_devices\" : logout_devices } await self . request ( RequestMethods . POST , url , json = data ) async def is_admin ( self ) -> bool : \"\"\" Get whether a user is a server administrator or not Returns: True if user is admin, False otherwise \"\"\" url = self . url ( f \"users/ { self . user_id } /admin\" ) result = await self . request ( RequestMethods . GET , url ) res : bool = result [ \"admin\" ] return res async def set_admin ( self , admin : bool ) -> None : \"\"\" Change whether a user is a server administrator or not **NOTE**: you cannot demote yourself Args: admin: True to make user admin, False to remove admin Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /admin\" ) data = { \"admin\" : admin } await self . request ( RequestMethods . POST , url , data = data ) async def get_rooms ( self ) -> RoomModel : \"\"\" Gets a list of all room_id that a specific user_id is member. Returns: list of rooms \"\"\" url = self . url ( f \"users/ { self . user_id } /joined_rooms\" ) result = await self . request ( RequestMethods . GET , url ) res : RoomModel = RoomModel . from_dict ( result ) return res async def get_data ( self ) -> Dict [ str , Any ]: \"\"\" Gets information about account data for a specific user_id. Returns: See response example here https://matrix-org.github.io/synapse/latest/admin_api/user_admin_api.html#account-data \"\"\" url = self . url ( f \"users/ { self . user_id } /accountdata\" ) result = await self . request ( RequestMethods . GET , url ) return result async def get_media ( self , limit : int = 100 , from_ : int = 0 , order_by : Optional [ OrderByMedia ] = None , dir_ : str = \"f\" , ) -> MediaListModel : \"\"\" List media uploaded by a user Gets a list of all local media that a specific user_id has created. These are media that the user has uploaded themselves (local media), as well as URL preview images requested by the user if the feature is enabled. By default, the response is ordered by descending creation date and ascending media ID. The newest media is on top. You can change the order with parameters order_by and dir Args: limit: Is optional but is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 from_: Is optional but used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 order_by: The method by which to sort the returned list of media. If the ordered field has duplicates, the second order is always by ascending OrderByMedia.MEDIA_ID, which guarantees a stable ordering dir_: Direction of media order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f Returns: MediaModel \"\"\" url = self . url ( f \"users/ { self . user_id } /media\" ) if order_by is None : order_by = OrderByMedia . MEDIA_ID params = { \"limit\" : limit , \"from\" : from_ , \"order_by\" : order_by . value , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : MediaListModel = MediaListModel . from_dict ( result ) return res async def delete_media ( self ) -> DeletedMediaModel : \"\"\" This API deletes the local media from the disk of your own server that a specific user_id has created. This includes any local thumbnails. This API will not affect media that has been uploaded to external media repositories (e.g https://github.com/turt2live/matrix-media-repo/). By default, the API deletes media ordered by descending creation date and ascending media ID. The newest media is deleted first. You can change the order with parameters order_by and dir. If no limit is set the API deletes 100 files per request. Returns: \"\"\" url = self . url ( f \"users/ { self . user_id } /media\" ) result = await self . request ( RequestMethods . DELETE , url ) res : DeletedMediaModel = DeletedMediaModel . from_dict ( result ) return res async def login_as_user ( self , valid_until_ms : Optional [ int ] = None ) -> Dict [ str , str ]: \"\"\" Get an access token that can be used to authenticate as that user. Useful for when admins wish to do actions on behalf of a user. This API does not generate a new device for the user, and so will not appear their /devices list, and in general the target user should not be able to tell they have been logged in as. To expire the token call the standard /logout API with the token. **Note**: The token will expire if the admin user calls /logout/all from any of their devices, but the token will not expire if the target user does the same. Args: valid_until_ms: An optional valid_until_ms field can be specified in the request body as an integer timestamp that specifies when the token should expire. By default tokens do not expire. Returns: {\"access_token\": \"<opaque_access_token_string>\"} \"\"\" url = self . url ( f \"users/ { self . user_id } /login\" ) data = { \"valid_until_ms\" : valid_until_ms } result = await self . request ( RequestMethods . POST , url , json = data ) return result async def get_all_pushers ( self ) -> PushersModel : \"\"\" Gets information about all pushers for a specific user_id. Returns: PushersModel \"\"\" url = self . url ( f \"users/ { self . user_id } /pushers\" ) result = await self . request ( RequestMethods . GET , url ) res : PushersModel = PushersModel . from_dict ( result ) return res async def shadow_bann ( self , bann_user : bool ) -> None : \"\"\" Shadow-banning is a useful tool for moderating malicious or egregiously abusive users. A shadow-banned users receives successful responses to their client-server API requests, but the events are not propagated into rooms. This can be an effective tool as it (hopefully) takes longer for the user to realise they are being moderated before pivoting to another account. Shadow-banning a user should be used as a tool of last resort and may lead to confusing or broken behaviour for the client. A shadow-banned user will not receive any notification and it is generally more appropriate to ban or kick abusive users. A shadow-banned user will be unable to contact anyone on the server. Args: bann_user: True to shadow-ban the user, False to un-shadow-ban the user. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /shadow_ban\" ) if bann_user : method = RequestMethods . POST else : method = RequestMethods . DELETE await self . request ( method , url ) __int__ ( self , user_id , ** kwargs ) special \u00b6 Initialize User endpoint Parameters: Name Type Description Default user_id str fully-qualified user id: for example, @user :server.com required **kwargs keyword arguments to pass to Endpoint {} Source code in matrix_admin_sdk/endpoints/v1/user.py def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize User endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: keyword arguments to pass to Endpoint Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs ) deactivate_account ( self ) async \u00b6 This API deactivates an account. It removes active access tokens, resets the password, and deletes third-party IDs (to prevent the user requesting a password reset). It can also mark the user as GDPR-erased. This means messages sent by the user will still be visible by anyone that was in the room when these messages were sent, but hidden from users joining the room afterwards. Returns: {\"erase\": True} Source code in matrix_admin_sdk/endpoints/v1/user.py async def deactivate_account ( self ) -> Dict [ str , bool ]: \"\"\" This API deactivates an account. It removes active access tokens, resets the password, and deletes third-party IDs (to prevent the user requesting a password reset). It can also mark the user as GDPR-erased. This means messages sent by the user will still be visible by anyone that was in the room when these messages were sent, but hidden from users joining the room afterwards. Returns: {\"erase\": True} \"\"\" url = self . url ( f \"deactivate/ { self . user_id } \" ) data : Dict [ str , str ] = {} result = await self . request ( RequestMethods . POST , url , json = data ) return result delete_media ( self ) async \u00b6 This API deletes the local media from the disk of your own server that a specific user_id has created. This includes any local thumbnails. This API will not affect media that has been uploaded to external media repositories (e.g https://github.com/turt2live/matrix-media-repo/ ). By default, the API deletes media ordered by descending creation date and ascending media ID. The newest media is deleted first. You can change the order with parameters order_by and dir. If no limit is set the API deletes 100 files per request. Source code in matrix_admin_sdk/endpoints/v1/user.py async def delete_media ( self ) -> DeletedMediaModel : \"\"\" This API deletes the local media from the disk of your own server that a specific user_id has created. This includes any local thumbnails. This API will not affect media that has been uploaded to external media repositories (e.g https://github.com/turt2live/matrix-media-repo/). By default, the API deletes media ordered by descending creation date and ascending media ID. The newest media is deleted first. You can change the order with parameters order_by and dir. If no limit is set the API deletes 100 files per request. Returns: \"\"\" url = self . url ( f \"users/ { self . user_id } /media\" ) result = await self . request ( RequestMethods . DELETE , url ) res : DeletedMediaModel = DeletedMediaModel . from_dict ( result ) return res get_all_pushers ( self ) async \u00b6 Gets information about all pushers for a specific user_id. Returns: PushersModel Source code in matrix_admin_sdk/endpoints/v1/user.py async def get_all_pushers ( self ) -> PushersModel : \"\"\" Gets information about all pushers for a specific user_id. Returns: PushersModel \"\"\" url = self . url ( f \"users/ { self . user_id } /pushers\" ) result = await self . request ( RequestMethods . GET , url ) res : PushersModel = PushersModel . from_dict ( result ) return res get_data ( self ) async \u00b6 Gets information about account data for a specific user_id. Returns: See response example here https://matrix-org.github.io/synapse/latest/admin_api/user_admin_api.html#account-data Source code in matrix_admin_sdk/endpoints/v1/user.py async def get_data ( self ) -> Dict [ str , Any ]: \"\"\" Gets information about account data for a specific user_id. Returns: See response example here https://matrix-org.github.io/synapse/latest/admin_api/user_admin_api.html#account-data \"\"\" url = self . url ( f \"users/ { self . user_id } /accountdata\" ) result = await self . request ( RequestMethods . GET , url ) return result get_media ( self , limit = 100 , from_ = 0 , order_by = None , dir_ = 'f' ) async \u00b6 List media uploaded by a user Gets a list of all local media that a specific user_id has created. These are media that the user has uploaded themselves (local media), as well as URL preview images requested by the user if the feature is enabled. By default, the response is ordered by descending creation date and ascending media ID. The newest media is on top. You can change the order with parameters order_by and dir Parameters: Name Type Description Default limit int Is optional but is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 100 from_ int Is optional but used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 0 order_by Optional[matrix_admin_sdk.endpoints.v1.user.OrderByMedia] The method by which to sort the returned list of media. If the ordered field has duplicates, the second order is always by ascending OrderByMedia.MEDIA_ID, which guarantees a stable ordering None dir_ str Direction of media order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f 'f' Source code in matrix_admin_sdk/endpoints/v1/user.py async def get_media ( self , limit : int = 100 , from_ : int = 0 , order_by : Optional [ OrderByMedia ] = None , dir_ : str = \"f\" , ) -> MediaListModel : \"\"\" List media uploaded by a user Gets a list of all local media that a specific user_id has created. These are media that the user has uploaded themselves (local media), as well as URL preview images requested by the user if the feature is enabled. By default, the response is ordered by descending creation date and ascending media ID. The newest media is on top. You can change the order with parameters order_by and dir Args: limit: Is optional but is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 from_: Is optional but used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 order_by: The method by which to sort the returned list of media. If the ordered field has duplicates, the second order is always by ascending OrderByMedia.MEDIA_ID, which guarantees a stable ordering dir_: Direction of media order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f Returns: MediaModel \"\"\" url = self . url ( f \"users/ { self . user_id } /media\" ) if order_by is None : order_by = OrderByMedia . MEDIA_ID params = { \"limit\" : limit , \"from\" : from_ , \"order_by\" : order_by . value , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : MediaListModel = MediaListModel . from_dict ( result ) return res get_rooms ( self ) async \u00b6 Gets a list of all room_id that a specific user_id is member. Returns: list of rooms Source code in matrix_admin_sdk/endpoints/v1/user.py async def get_rooms ( self ) -> RoomModel : \"\"\" Gets a list of all room_id that a specific user_id is member. Returns: list of rooms \"\"\" url = self . url ( f \"users/ { self . user_id } /joined_rooms\" ) result = await self . request ( RequestMethods . GET , url ) res : RoomModel = RoomModel . from_dict ( result ) return res is_admin ( self ) async \u00b6 Get whether a user is a server administrator or not Returns: True if user is admin, False otherwise Source code in matrix_admin_sdk/endpoints/v1/user.py async def is_admin ( self ) -> bool : \"\"\" Get whether a user is a server administrator or not Returns: True if user is admin, False otherwise \"\"\" url = self . url ( f \"users/ { self . user_id } /admin\" ) result = await self . request ( RequestMethods . GET , url ) res : bool = result [ \"admin\" ] return res login_as_user ( self , valid_until_ms = None ) async \u00b6 Get an access token that can be used to authenticate as that user. Useful for when admins wish to do actions on behalf of a user. This API does not generate a new device for the user, and so will not appear their /devices list, and in general the target user should not be able to tell they have been logged in as. To expire the token call the standard /logout API with the token. Note : The token will expire if the admin user calls /logout/all from any of their devices, but the token will not expire if the target user does the same. Parameters: Name Type Description Default valid_until_ms Optional[int] An optional valid_until_ms field can be specified in the request body as an integer timestamp that specifies when the token should expire. By default tokens do not expire. None Source code in matrix_admin_sdk/endpoints/v1/user.py async def login_as_user ( self , valid_until_ms : Optional [ int ] = None ) -> Dict [ str , str ]: \"\"\" Get an access token that can be used to authenticate as that user. Useful for when admins wish to do actions on behalf of a user. This API does not generate a new device for the user, and so will not appear their /devices list, and in general the target user should not be able to tell they have been logged in as. To expire the token call the standard /logout API with the token. **Note**: The token will expire if the admin user calls /logout/all from any of their devices, but the token will not expire if the target user does the same. Args: valid_until_ms: An optional valid_until_ms field can be specified in the request body as an integer timestamp that specifies when the token should expire. By default tokens do not expire. Returns: {\"access_token\": \"<opaque_access_token_string>\"} \"\"\" url = self . url ( f \"users/ { self . user_id } /login\" ) data = { \"valid_until_ms\" : valid_until_ms } result = await self . request ( RequestMethods . POST , url , json = data ) return result query_current_sessions ( self ) async \u00b6 This API returns information about the active sessions for a specific user Source code in matrix_admin_sdk/endpoints/v1/user.py async def query_current_sessions ( self ) -> CurrentSessionsModel : \"\"\" This API returns information about the active sessions for a specific user Returns: \"\"\" url = self . url ( f \"whois/ { self . user_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : CurrentSessionsModel = CurrentSessionsModel . from_dict ( result ) return res reset_password ( self , new_password , logout_devices = True ) async \u00b6 Changes the password of another user. This will automatically log the user out of all their devices Parameters: Name Type Description Default new_password str new user's password required logout_devices bool logout all devices, Default: True True Source code in matrix_admin_sdk/endpoints/v1/user.py async def reset_password ( self , new_password : str , logout_devices : bool = True ) -> None : \"\"\" Changes the password of another user. This will automatically log the user out of all their devices Args: new_password: new user's password logout_devices: logout all devices, Default: True Returns: None \"\"\" url = self . url ( f \"reset_password/ { self . user_id } \" ) data = { \"new_password\" : new_password , \"logout_devices\" : logout_devices } await self . request ( RequestMethods . POST , url , json = data ) set_admin ( self , admin ) async \u00b6 Change whether a user is a server administrator or not NOTE : you cannot demote yourself Parameters: Name Type Description Default admin bool True to make user admin, False to remove admin required Source code in matrix_admin_sdk/endpoints/v1/user.py async def set_admin ( self , admin : bool ) -> None : \"\"\" Change whether a user is a server administrator or not **NOTE**: you cannot demote yourself Args: admin: True to make user admin, False to remove admin Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /admin\" ) data = { \"admin\" : admin } await self . request ( RequestMethods . POST , url , data = data ) shadow_bann ( self , bann_user ) async \u00b6 Shadow-banning is a useful tool for moderating malicious or egregiously abusive users. A shadow-banned users receives successful responses to their client-server API requests, but the events are not propagated into rooms. This can be an effective tool as it (hopefully) takes longer for the user to realise they are being moderated before pivoting to another account. Shadow-banning a user should be used as a tool of last resort and may lead to confusing or broken behaviour for the client. A shadow-banned user will not receive any notification and it is generally more appropriate to ban or kick abusive users. A shadow-banned user will be unable to contact anyone on the server. Parameters: Name Type Description Default bann_user bool True to shadow-ban the user, False to un-shadow-ban the user. required Source code in matrix_admin_sdk/endpoints/v1/user.py async def shadow_bann ( self , bann_user : bool ) -> None : \"\"\" Shadow-banning is a useful tool for moderating malicious or egregiously abusive users. A shadow-banned users receives successful responses to their client-server API requests, but the events are not propagated into rooms. This can be an effective tool as it (hopefully) takes longer for the user to realise they are being moderated before pivoting to another account. Shadow-banning a user should be used as a tool of last resort and may lead to confusing or broken behaviour for the client. A shadow-banned user will not receive any notification and it is generally more appropriate to ban or kick abusive users. A shadow-banned user will be unable to contact anyone on the server. Args: bann_user: True to shadow-ban the user, False to un-shadow-ban the user. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /shadow_ban\" ) if bann_user : method = RequestMethods . POST else : method = RequestMethods . DELETE await self . request ( method , url ) Models \u00b6 CurrentSessionsModel \u00b6 CurrentSessionsModel(user_id: str, devices: Dict[str, List[matrix_admin_sdk.models.v1.user.ConnectionModel]]) Source code in matrix_admin_sdk/models/v1/user.py class CurrentSessionsModel ( BaseModel ): user_id : str devices : Dict [ str , List [ ConnectionModel ]] @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"CurrentSessionsModel\" : devices = {} for k , v in data [ \"devices\" ] . items (): for session in v [ \"sessions\" ]: devices [ k ] = [ ConnectionModel ( ** i ) for i in session [ \"connections\" ]] return cls ( user_id = data [ \"user_id\" ], devices = devices , ) ConnectionModel \u00b6 ConnectionModel(ip: str, last_seen: int, user_agent: str) Source code in matrix_admin_sdk/models/v1/user.py class ConnectionModel ( BaseModel ): ip : str last_seen : int user_agent : str RoomModel \u00b6 Room model Attributes: Name Type Description joined_rooms list[str] An array of room_id total int Number of rooms Source code in matrix_admin_sdk/models/v1/user.py class RoomModel ( BaseModel ): \"\"\" Room model Attributes: joined_rooms (list[str]): An array of room_id total (int): Number of rooms \"\"\" joined_rooms : List [ str ] total : int MediaListModel \u00b6 MediaListModel(media: List[matrix_admin_sdk.models.v1.user.MediaModel], next_token: Union[int, NoneType], total: int) Source code in matrix_admin_sdk/models/v1/user.py class MediaListModel ( BaseModel ): media : List [ MediaModel ] next_token : Optional [ int ] total : int @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"MediaListModel\" : media = [ MediaModel . from_dict ( i ) for i in data [ \"media\" ]] return cls ( media = media , next_token = data . get ( \"next_token\" ), total = data [ \"total\" ], ) MediaModel \u00b6 MediaModel(created_ts: int, media_id: str, media_length: int, media_type: str, safe_from_quarantine: bool, upload_name: str, last_access_ts: Union[int, NoneType] = None, quarantined_by: Union[str, NoneType] = None) Source code in matrix_admin_sdk/models/v1/user.py class MediaModel ( BaseModel ): created_ts : int media_id : str media_length : int media_type : str safe_from_quarantine : bool upload_name : str last_access_ts : Optional [ int ] = None quarantined_by : Optional [ str ] = None DeletedMediaModel \u00b6 Deleted media model Attributes: Name Type Description deleted_media list[str] List of deleted media_id total int Total number of deleted media Source code in matrix_admin_sdk/models/v1/user.py class DeletedMediaModel ( BaseModel ): \"\"\" Deleted media model Attributes: deleted_media (list[str]): List of deleted media_id total (int): Total number of deleted media \"\"\" deleted_media : List [ str ] total : int PushersModel \u00b6 Pushers model Attributes: Name Type Description pushers list[PusherModel] An array containing the current pushers for the user total int Total number of pushers Source code in matrix_admin_sdk/models/v1/user.py class PushersModel ( BaseModel ): \"\"\" Pushers model Attributes: pushers (list[PusherModel]): An array containing the current pushers for the user total (int): Total number of pushers \"\"\" pushers : List [ PusherModel ] total : int @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"PushersModel\" : pushers = [ PusherModel . from_dict ( i ) for i in data [ \"pushers\" ]] return cls ( pushers = pushers , total = data [ \"total\" ], ) PusherModel \u00b6 Pusher model Attributes: Name Type Description app_display_name str A string that will allow the user to identify what application owns this pusher. app_id str This is a reverse-DNS style identifier for the application. Max length, 64 chars. data PusherDataModel information for the pusher implementation itself device_display_name str A string that will allow the user to identify what device owns this pusher. profile_tag str This string determines which set of device specific rules this pusher executes. kind str The kind of pusher. \"http\" is a pusher that sends HTTP pokes. lang str The preferred language for receiving notifications (e.g. 'en' or 'en-US') pushkey str This is a unique identifier for this pusher. Max length, 512 bytes. Source code in matrix_admin_sdk/models/v1/user.py class PusherModel ( BaseModel ): \"\"\" Pusher model Attributes: app_display_name (str): A string that will allow the user to identify what application owns this pusher. app_id (str): This is a reverse-DNS style identifier for the application. Max length, 64 chars. data (PusherDataModel): information for the pusher implementation itself device_display_name (str): A string that will allow the user to identify what device owns this pusher. profile_tag (str): This string determines which set of device specific rules this pusher executes. kind (str): The kind of pusher. \"http\" is a pusher that sends HTTP pokes. lang (str): The preferred language for receiving notifications (e.g. 'en' or 'en-US') pushkey (str): This is a unique identifier for this pusher. Max length, 512 bytes. \"\"\" app_display_name : str app_id : str data : PusherDataModel device_display_name : str profile_tag : str kind : str lang : str pushkey : str @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"PusherModel\" : data = data . copy () data_field = PusherDataModel . from_dict ( data . pop ( \"data\" )) return cls ( data = data_field , ** data ) PusherDataModel \u00b6 Pusher data model Attributes: Name Type Description url str Required if kind is http. The URL to use to send notifications to format str The format to use when sending notifications to the Push Gateway. Source code in matrix_admin_sdk/models/v1/user.py class PusherDataModel ( BaseModel ): \"\"\" Pusher data model Attributes: url (str): Required if kind is http. The URL to use to send notifications to format (str): The format to use when sending notifications to the Push Gateway. \"\"\" url : str format : Optional [ str ] = None","title":"User"},{"location":"endpoints/v1/user/#user","text":"","title":"User"},{"location":"endpoints/v1/user/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/user/#user_1","text":"User endpoint Source code in matrix_admin_sdk/endpoints/v1/user.py class User ( Endpoint ): \"\"\" User endpoint \"\"\" def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize User endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: keyword arguments to pass to Endpoint Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs ) async def query_current_sessions ( self ) -> CurrentSessionsModel : \"\"\" This API returns information about the active sessions for a specific user Returns: \"\"\" url = self . url ( f \"whois/ { self . user_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : CurrentSessionsModel = CurrentSessionsModel . from_dict ( result ) return res async def deactivate_account ( self ) -> Dict [ str , bool ]: \"\"\" This API deactivates an account. It removes active access tokens, resets the password, and deletes third-party IDs (to prevent the user requesting a password reset). It can also mark the user as GDPR-erased. This means messages sent by the user will still be visible by anyone that was in the room when these messages were sent, but hidden from users joining the room afterwards. Returns: {\"erase\": True} \"\"\" url = self . url ( f \"deactivate/ { self . user_id } \" ) data : Dict [ str , str ] = {} result = await self . request ( RequestMethods . POST , url , json = data ) return result async def reset_password ( self , new_password : str , logout_devices : bool = True ) -> None : \"\"\" Changes the password of another user. This will automatically log the user out of all their devices Args: new_password: new user's password logout_devices: logout all devices, Default: True Returns: None \"\"\" url = self . url ( f \"reset_password/ { self . user_id } \" ) data = { \"new_password\" : new_password , \"logout_devices\" : logout_devices } await self . request ( RequestMethods . POST , url , json = data ) async def is_admin ( self ) -> bool : \"\"\" Get whether a user is a server administrator or not Returns: True if user is admin, False otherwise \"\"\" url = self . url ( f \"users/ { self . user_id } /admin\" ) result = await self . request ( RequestMethods . GET , url ) res : bool = result [ \"admin\" ] return res async def set_admin ( self , admin : bool ) -> None : \"\"\" Change whether a user is a server administrator or not **NOTE**: you cannot demote yourself Args: admin: True to make user admin, False to remove admin Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /admin\" ) data = { \"admin\" : admin } await self . request ( RequestMethods . POST , url , data = data ) async def get_rooms ( self ) -> RoomModel : \"\"\" Gets a list of all room_id that a specific user_id is member. Returns: list of rooms \"\"\" url = self . url ( f \"users/ { self . user_id } /joined_rooms\" ) result = await self . request ( RequestMethods . GET , url ) res : RoomModel = RoomModel . from_dict ( result ) return res async def get_data ( self ) -> Dict [ str , Any ]: \"\"\" Gets information about account data for a specific user_id. Returns: See response example here https://matrix-org.github.io/synapse/latest/admin_api/user_admin_api.html#account-data \"\"\" url = self . url ( f \"users/ { self . user_id } /accountdata\" ) result = await self . request ( RequestMethods . GET , url ) return result async def get_media ( self , limit : int = 100 , from_ : int = 0 , order_by : Optional [ OrderByMedia ] = None , dir_ : str = \"f\" , ) -> MediaListModel : \"\"\" List media uploaded by a user Gets a list of all local media that a specific user_id has created. These are media that the user has uploaded themselves (local media), as well as URL preview images requested by the user if the feature is enabled. By default, the response is ordered by descending creation date and ascending media ID. The newest media is on top. You can change the order with parameters order_by and dir Args: limit: Is optional but is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 from_: Is optional but used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 order_by: The method by which to sort the returned list of media. If the ordered field has duplicates, the second order is always by ascending OrderByMedia.MEDIA_ID, which guarantees a stable ordering dir_: Direction of media order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f Returns: MediaModel \"\"\" url = self . url ( f \"users/ { self . user_id } /media\" ) if order_by is None : order_by = OrderByMedia . MEDIA_ID params = { \"limit\" : limit , \"from\" : from_ , \"order_by\" : order_by . value , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : MediaListModel = MediaListModel . from_dict ( result ) return res async def delete_media ( self ) -> DeletedMediaModel : \"\"\" This API deletes the local media from the disk of your own server that a specific user_id has created. This includes any local thumbnails. This API will not affect media that has been uploaded to external media repositories (e.g https://github.com/turt2live/matrix-media-repo/). By default, the API deletes media ordered by descending creation date and ascending media ID. The newest media is deleted first. You can change the order with parameters order_by and dir. If no limit is set the API deletes 100 files per request. Returns: \"\"\" url = self . url ( f \"users/ { self . user_id } /media\" ) result = await self . request ( RequestMethods . DELETE , url ) res : DeletedMediaModel = DeletedMediaModel . from_dict ( result ) return res async def login_as_user ( self , valid_until_ms : Optional [ int ] = None ) -> Dict [ str , str ]: \"\"\" Get an access token that can be used to authenticate as that user. Useful for when admins wish to do actions on behalf of a user. This API does not generate a new device for the user, and so will not appear their /devices list, and in general the target user should not be able to tell they have been logged in as. To expire the token call the standard /logout API with the token. **Note**: The token will expire if the admin user calls /logout/all from any of their devices, but the token will not expire if the target user does the same. Args: valid_until_ms: An optional valid_until_ms field can be specified in the request body as an integer timestamp that specifies when the token should expire. By default tokens do not expire. Returns: {\"access_token\": \"<opaque_access_token_string>\"} \"\"\" url = self . url ( f \"users/ { self . user_id } /login\" ) data = { \"valid_until_ms\" : valid_until_ms } result = await self . request ( RequestMethods . POST , url , json = data ) return result async def get_all_pushers ( self ) -> PushersModel : \"\"\" Gets information about all pushers for a specific user_id. Returns: PushersModel \"\"\" url = self . url ( f \"users/ { self . user_id } /pushers\" ) result = await self . request ( RequestMethods . GET , url ) res : PushersModel = PushersModel . from_dict ( result ) return res async def shadow_bann ( self , bann_user : bool ) -> None : \"\"\" Shadow-banning is a useful tool for moderating malicious or egregiously abusive users. A shadow-banned users receives successful responses to their client-server API requests, but the events are not propagated into rooms. This can be an effective tool as it (hopefully) takes longer for the user to realise they are being moderated before pivoting to another account. Shadow-banning a user should be used as a tool of last resort and may lead to confusing or broken behaviour for the client. A shadow-banned user will not receive any notification and it is generally more appropriate to ban or kick abusive users. A shadow-banned user will be unable to contact anyone on the server. Args: bann_user: True to shadow-ban the user, False to un-shadow-ban the user. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /shadow_ban\" ) if bann_user : method = RequestMethods . POST else : method = RequestMethods . DELETE await self . request ( method , url )","title":"User"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.__int__","text":"Initialize User endpoint Parameters: Name Type Description Default user_id str fully-qualified user id: for example, @user :server.com required **kwargs keyword arguments to pass to Endpoint {} Source code in matrix_admin_sdk/endpoints/v1/user.py def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize User endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: keyword arguments to pass to Endpoint Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs )","title":"__int__()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.deactivate_account","text":"This API deactivates an account. It removes active access tokens, resets the password, and deletes third-party IDs (to prevent the user requesting a password reset). It can also mark the user as GDPR-erased. This means messages sent by the user will still be visible by anyone that was in the room when these messages were sent, but hidden from users joining the room afterwards. Returns: {\"erase\": True} Source code in matrix_admin_sdk/endpoints/v1/user.py async def deactivate_account ( self ) -> Dict [ str , bool ]: \"\"\" This API deactivates an account. It removes active access tokens, resets the password, and deletes third-party IDs (to prevent the user requesting a password reset). It can also mark the user as GDPR-erased. This means messages sent by the user will still be visible by anyone that was in the room when these messages were sent, but hidden from users joining the room afterwards. Returns: {\"erase\": True} \"\"\" url = self . url ( f \"deactivate/ { self . user_id } \" ) data : Dict [ str , str ] = {} result = await self . request ( RequestMethods . POST , url , json = data ) return result","title":"deactivate_account()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.delete_media","text":"This API deletes the local media from the disk of your own server that a specific user_id has created. This includes any local thumbnails. This API will not affect media that has been uploaded to external media repositories (e.g https://github.com/turt2live/matrix-media-repo/ ). By default, the API deletes media ordered by descending creation date and ascending media ID. The newest media is deleted first. You can change the order with parameters order_by and dir. If no limit is set the API deletes 100 files per request. Source code in matrix_admin_sdk/endpoints/v1/user.py async def delete_media ( self ) -> DeletedMediaModel : \"\"\" This API deletes the local media from the disk of your own server that a specific user_id has created. This includes any local thumbnails. This API will not affect media that has been uploaded to external media repositories (e.g https://github.com/turt2live/matrix-media-repo/). By default, the API deletes media ordered by descending creation date and ascending media ID. The newest media is deleted first. You can change the order with parameters order_by and dir. If no limit is set the API deletes 100 files per request. Returns: \"\"\" url = self . url ( f \"users/ { self . user_id } /media\" ) result = await self . request ( RequestMethods . DELETE , url ) res : DeletedMediaModel = DeletedMediaModel . from_dict ( result ) return res","title":"delete_media()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.get_all_pushers","text":"Gets information about all pushers for a specific user_id. Returns: PushersModel Source code in matrix_admin_sdk/endpoints/v1/user.py async def get_all_pushers ( self ) -> PushersModel : \"\"\" Gets information about all pushers for a specific user_id. Returns: PushersModel \"\"\" url = self . url ( f \"users/ { self . user_id } /pushers\" ) result = await self . request ( RequestMethods . GET , url ) res : PushersModel = PushersModel . from_dict ( result ) return res","title":"get_all_pushers()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.get_data","text":"Gets information about account data for a specific user_id. Returns: See response example here https://matrix-org.github.io/synapse/latest/admin_api/user_admin_api.html#account-data Source code in matrix_admin_sdk/endpoints/v1/user.py async def get_data ( self ) -> Dict [ str , Any ]: \"\"\" Gets information about account data for a specific user_id. Returns: See response example here https://matrix-org.github.io/synapse/latest/admin_api/user_admin_api.html#account-data \"\"\" url = self . url ( f \"users/ { self . user_id } /accountdata\" ) result = await self . request ( RequestMethods . GET , url ) return result","title":"get_data()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.get_media","text":"List media uploaded by a user Gets a list of all local media that a specific user_id has created. These are media that the user has uploaded themselves (local media), as well as URL preview images requested by the user if the feature is enabled. By default, the response is ordered by descending creation date and ascending media ID. The newest media is on top. You can change the order with parameters order_by and dir Parameters: Name Type Description Default limit int Is optional but is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 100 from_ int Is optional but used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 0 order_by Optional[matrix_admin_sdk.endpoints.v1.user.OrderByMedia] The method by which to sort the returned list of media. If the ordered field has duplicates, the second order is always by ascending OrderByMedia.MEDIA_ID, which guarantees a stable ordering None dir_ str Direction of media order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f 'f' Source code in matrix_admin_sdk/endpoints/v1/user.py async def get_media ( self , limit : int = 100 , from_ : int = 0 , order_by : Optional [ OrderByMedia ] = None , dir_ : str = \"f\" , ) -> MediaListModel : \"\"\" List media uploaded by a user Gets a list of all local media that a specific user_id has created. These are media that the user has uploaded themselves (local media), as well as URL preview images requested by the user if the feature is enabled. By default, the response is ordered by descending creation date and ascending media ID. The newest media is on top. You can change the order with parameters order_by and dir Args: limit: Is optional but is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 from_: Is optional but used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 order_by: The method by which to sort the returned list of media. If the ordered field has duplicates, the second order is always by ascending OrderByMedia.MEDIA_ID, which guarantees a stable ordering dir_: Direction of media order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f Returns: MediaModel \"\"\" url = self . url ( f \"users/ { self . user_id } /media\" ) if order_by is None : order_by = OrderByMedia . MEDIA_ID params = { \"limit\" : limit , \"from\" : from_ , \"order_by\" : order_by . value , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : MediaListModel = MediaListModel . from_dict ( result ) return res","title":"get_media()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.get_rooms","text":"Gets a list of all room_id that a specific user_id is member. Returns: list of rooms Source code in matrix_admin_sdk/endpoints/v1/user.py async def get_rooms ( self ) -> RoomModel : \"\"\" Gets a list of all room_id that a specific user_id is member. Returns: list of rooms \"\"\" url = self . url ( f \"users/ { self . user_id } /joined_rooms\" ) result = await self . request ( RequestMethods . GET , url ) res : RoomModel = RoomModel . from_dict ( result ) return res","title":"get_rooms()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.is_admin","text":"Get whether a user is a server administrator or not Returns: True if user is admin, False otherwise Source code in matrix_admin_sdk/endpoints/v1/user.py async def is_admin ( self ) -> bool : \"\"\" Get whether a user is a server administrator or not Returns: True if user is admin, False otherwise \"\"\" url = self . url ( f \"users/ { self . user_id } /admin\" ) result = await self . request ( RequestMethods . GET , url ) res : bool = result [ \"admin\" ] return res","title":"is_admin()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.login_as_user","text":"Get an access token that can be used to authenticate as that user. Useful for when admins wish to do actions on behalf of a user. This API does not generate a new device for the user, and so will not appear their /devices list, and in general the target user should not be able to tell they have been logged in as. To expire the token call the standard /logout API with the token. Note : The token will expire if the admin user calls /logout/all from any of their devices, but the token will not expire if the target user does the same. Parameters: Name Type Description Default valid_until_ms Optional[int] An optional valid_until_ms field can be specified in the request body as an integer timestamp that specifies when the token should expire. By default tokens do not expire. None Source code in matrix_admin_sdk/endpoints/v1/user.py async def login_as_user ( self , valid_until_ms : Optional [ int ] = None ) -> Dict [ str , str ]: \"\"\" Get an access token that can be used to authenticate as that user. Useful for when admins wish to do actions on behalf of a user. This API does not generate a new device for the user, and so will not appear their /devices list, and in general the target user should not be able to tell they have been logged in as. To expire the token call the standard /logout API with the token. **Note**: The token will expire if the admin user calls /logout/all from any of their devices, but the token will not expire if the target user does the same. Args: valid_until_ms: An optional valid_until_ms field can be specified in the request body as an integer timestamp that specifies when the token should expire. By default tokens do not expire. Returns: {\"access_token\": \"<opaque_access_token_string>\"} \"\"\" url = self . url ( f \"users/ { self . user_id } /login\" ) data = { \"valid_until_ms\" : valid_until_ms } result = await self . request ( RequestMethods . POST , url , json = data ) return result","title":"login_as_user()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.query_current_sessions","text":"This API returns information about the active sessions for a specific user Source code in matrix_admin_sdk/endpoints/v1/user.py async def query_current_sessions ( self ) -> CurrentSessionsModel : \"\"\" This API returns information about the active sessions for a specific user Returns: \"\"\" url = self . url ( f \"whois/ { self . user_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : CurrentSessionsModel = CurrentSessionsModel . from_dict ( result ) return res","title":"query_current_sessions()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.reset_password","text":"Changes the password of another user. This will automatically log the user out of all their devices Parameters: Name Type Description Default new_password str new user's password required logout_devices bool logout all devices, Default: True True Source code in matrix_admin_sdk/endpoints/v1/user.py async def reset_password ( self , new_password : str , logout_devices : bool = True ) -> None : \"\"\" Changes the password of another user. This will automatically log the user out of all their devices Args: new_password: new user's password logout_devices: logout all devices, Default: True Returns: None \"\"\" url = self . url ( f \"reset_password/ { self . user_id } \" ) data = { \"new_password\" : new_password , \"logout_devices\" : logout_devices } await self . request ( RequestMethods . POST , url , json = data )","title":"reset_password()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.set_admin","text":"Change whether a user is a server administrator or not NOTE : you cannot demote yourself Parameters: Name Type Description Default admin bool True to make user admin, False to remove admin required Source code in matrix_admin_sdk/endpoints/v1/user.py async def set_admin ( self , admin : bool ) -> None : \"\"\" Change whether a user is a server administrator or not **NOTE**: you cannot demote yourself Args: admin: True to make user admin, False to remove admin Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /admin\" ) data = { \"admin\" : admin } await self . request ( RequestMethods . POST , url , data = data )","title":"set_admin()"},{"location":"endpoints/v1/user/#matrix_admin_sdk.endpoints.v1.user.User.shadow_bann","text":"Shadow-banning is a useful tool for moderating malicious or egregiously abusive users. A shadow-banned users receives successful responses to their client-server API requests, but the events are not propagated into rooms. This can be an effective tool as it (hopefully) takes longer for the user to realise they are being moderated before pivoting to another account. Shadow-banning a user should be used as a tool of last resort and may lead to confusing or broken behaviour for the client. A shadow-banned user will not receive any notification and it is generally more appropriate to ban or kick abusive users. A shadow-banned user will be unable to contact anyone on the server. Parameters: Name Type Description Default bann_user bool True to shadow-ban the user, False to un-shadow-ban the user. required Source code in matrix_admin_sdk/endpoints/v1/user.py async def shadow_bann ( self , bann_user : bool ) -> None : \"\"\" Shadow-banning is a useful tool for moderating malicious or egregiously abusive users. A shadow-banned users receives successful responses to their client-server API requests, but the events are not propagated into rooms. This can be an effective tool as it (hopefully) takes longer for the user to realise they are being moderated before pivoting to another account. Shadow-banning a user should be used as a tool of last resort and may lead to confusing or broken behaviour for the client. A shadow-banned user will not receive any notification and it is generally more appropriate to ban or kick abusive users. A shadow-banned user will be unable to contact anyone on the server. Args: bann_user: True to shadow-ban the user, False to un-shadow-ban the user. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /shadow_ban\" ) if bann_user : method = RequestMethods . POST else : method = RequestMethods . DELETE await self . request ( method , url )","title":"shadow_bann()"},{"location":"endpoints/v1/user/#models","text":"","title":"Models"},{"location":"endpoints/v1/user/#currentsessionsmodel","text":"CurrentSessionsModel(user_id: str, devices: Dict[str, List[matrix_admin_sdk.models.v1.user.ConnectionModel]]) Source code in matrix_admin_sdk/models/v1/user.py class CurrentSessionsModel ( BaseModel ): user_id : str devices : Dict [ str , List [ ConnectionModel ]] @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"CurrentSessionsModel\" : devices = {} for k , v in data [ \"devices\" ] . items (): for session in v [ \"sessions\" ]: devices [ k ] = [ ConnectionModel ( ** i ) for i in session [ \"connections\" ]] return cls ( user_id = data [ \"user_id\" ], devices = devices , )","title":"CurrentSessionsModel"},{"location":"endpoints/v1/user/#connectionmodel","text":"ConnectionModel(ip: str, last_seen: int, user_agent: str) Source code in matrix_admin_sdk/models/v1/user.py class ConnectionModel ( BaseModel ): ip : str last_seen : int user_agent : str","title":"ConnectionModel"},{"location":"endpoints/v1/user/#roommodel","text":"Room model Attributes: Name Type Description joined_rooms list[str] An array of room_id total int Number of rooms Source code in matrix_admin_sdk/models/v1/user.py class RoomModel ( BaseModel ): \"\"\" Room model Attributes: joined_rooms (list[str]): An array of room_id total (int): Number of rooms \"\"\" joined_rooms : List [ str ] total : int","title":"RoomModel"},{"location":"endpoints/v1/user/#medialistmodel","text":"MediaListModel(media: List[matrix_admin_sdk.models.v1.user.MediaModel], next_token: Union[int, NoneType], total: int) Source code in matrix_admin_sdk/models/v1/user.py class MediaListModel ( BaseModel ): media : List [ MediaModel ] next_token : Optional [ int ] total : int @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"MediaListModel\" : media = [ MediaModel . from_dict ( i ) for i in data [ \"media\" ]] return cls ( media = media , next_token = data . get ( \"next_token\" ), total = data [ \"total\" ], )","title":"MediaListModel"},{"location":"endpoints/v1/user/#mediamodel","text":"MediaModel(created_ts: int, media_id: str, media_length: int, media_type: str, safe_from_quarantine: bool, upload_name: str, last_access_ts: Union[int, NoneType] = None, quarantined_by: Union[str, NoneType] = None) Source code in matrix_admin_sdk/models/v1/user.py class MediaModel ( BaseModel ): created_ts : int media_id : str media_length : int media_type : str safe_from_quarantine : bool upload_name : str last_access_ts : Optional [ int ] = None quarantined_by : Optional [ str ] = None","title":"MediaModel"},{"location":"endpoints/v1/user/#deletedmediamodel","text":"Deleted media model Attributes: Name Type Description deleted_media list[str] List of deleted media_id total int Total number of deleted media Source code in matrix_admin_sdk/models/v1/user.py class DeletedMediaModel ( BaseModel ): \"\"\" Deleted media model Attributes: deleted_media (list[str]): List of deleted media_id total (int): Total number of deleted media \"\"\" deleted_media : List [ str ] total : int","title":"DeletedMediaModel"},{"location":"endpoints/v1/user/#pushersmodel","text":"Pushers model Attributes: Name Type Description pushers list[PusherModel] An array containing the current pushers for the user total int Total number of pushers Source code in matrix_admin_sdk/models/v1/user.py class PushersModel ( BaseModel ): \"\"\" Pushers model Attributes: pushers (list[PusherModel]): An array containing the current pushers for the user total (int): Total number of pushers \"\"\" pushers : List [ PusherModel ] total : int @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"PushersModel\" : pushers = [ PusherModel . from_dict ( i ) for i in data [ \"pushers\" ]] return cls ( pushers = pushers , total = data [ \"total\" ], )","title":"PushersModel"},{"location":"endpoints/v1/user/#pushermodel","text":"Pusher model Attributes: Name Type Description app_display_name str A string that will allow the user to identify what application owns this pusher. app_id str This is a reverse-DNS style identifier for the application. Max length, 64 chars. data PusherDataModel information for the pusher implementation itself device_display_name str A string that will allow the user to identify what device owns this pusher. profile_tag str This string determines which set of device specific rules this pusher executes. kind str The kind of pusher. \"http\" is a pusher that sends HTTP pokes. lang str The preferred language for receiving notifications (e.g. 'en' or 'en-US') pushkey str This is a unique identifier for this pusher. Max length, 512 bytes. Source code in matrix_admin_sdk/models/v1/user.py class PusherModel ( BaseModel ): \"\"\" Pusher model Attributes: app_display_name (str): A string that will allow the user to identify what application owns this pusher. app_id (str): This is a reverse-DNS style identifier for the application. Max length, 64 chars. data (PusherDataModel): information for the pusher implementation itself device_display_name (str): A string that will allow the user to identify what device owns this pusher. profile_tag (str): This string determines which set of device specific rules this pusher executes. kind (str): The kind of pusher. \"http\" is a pusher that sends HTTP pokes. lang (str): The preferred language for receiving notifications (e.g. 'en' or 'en-US') pushkey (str): This is a unique identifier for this pusher. Max length, 512 bytes. \"\"\" app_display_name : str app_id : str data : PusherDataModel device_display_name : str profile_tag : str kind : str lang : str pushkey : str @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"PusherModel\" : data = data . copy () data_field = PusherDataModel . from_dict ( data . pop ( \"data\" )) return cls ( data = data_field , ** data )","title":"PusherModel"},{"location":"endpoints/v1/user/#pusherdatamodel","text":"Pusher data model Attributes: Name Type Description url str Required if kind is http. The URL to use to send notifications to format str The format to use when sending notifications to the Push Gateway. Source code in matrix_admin_sdk/models/v1/user.py class PusherDataModel ( BaseModel ): \"\"\" Pusher data model Attributes: url (str): Required if kind is http. The URL to use to send notifications to format (str): The format to use when sending notifications to the Push Gateway. \"\"\" url : str format : Optional [ str ] = None","title":"PusherDataModel"},{"location":"endpoints/v1/user_media_statistics/","text":"User Media Statistics \u00b6 Endpoints \u00b6 UserMediaStatistics \u00b6 User Media Statistics Endpoint Source code in matrix_admin_sdk/endpoints/v1/user_media_statistics.py class UserMediaStatistics ( Endpoint ): \"\"\" User Media Statistics Endpoint \"\"\" async def user_media_statistics ( self , limit : int = 100 , from_ : int = 0 , order_by : Optional [ OrderBy ] = None , from_ts : Optional [ int ] = None , until_ts : Optional [ int ] = None , search_term : Optional [ str ] = None , dir_ : str = \"f\" , ) -> UsersMediaStatisticsModel : \"\"\" Returns information about all local media usage of users. Gives the possibility to filter them by time and user Args: limit: is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 from_: used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 order_by: The method in which to sort the returned list of users. Defaults to OrderBy.USER_ID from_ts: Considers only files created at this timestamp or later. Unix timestamp in ms. until_ts: Considers only files created at this timestamp or earlier. Unix timestamp in ms. search_term: Filter users by their user ID localpart or displayname. The search term can be found in any part of the string. Defaults to no filtering. dir_: Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f. Returns: \"\"\" if order_by is None : order_by = OrderBy . USER_ID url = self . url ( \"statistics/users/media\" ) params = { \"limit\" : limit , \"from\" : from_ , \"order_by\" : order_by . value , \"from_ts\" : from_ts , \"until_ts\" : until_ts , \"dir\" : dir_ , } if search_term is not None : params [ \"search_term\" ] = search_term result = await self . request ( RequestMethods . GET , url , params = params ) res : UsersMediaStatisticsModel = UsersMediaStatisticsModel . from_dict ( result ) return res user_media_statistics ( self , limit = 100 , from_ = 0 , order_by = None , from_ts = None , until_ts = None , search_term = None , dir_ = 'f' ) async \u00b6 Returns information about all local media usage of users. Gives the possibility to filter them by time and user Parameters: Name Type Description Default limit int is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 100 from_ int used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 0 order_by Optional[matrix_admin_sdk.endpoints.v1.user_media_statistics.OrderBy] The method in which to sort the returned list of users. Defaults to OrderBy.USER_ID None from_ts Optional[int] Considers only files created at this timestamp or later. Unix timestamp in ms. None until_ts Optional[int] Considers only files created at this timestamp or earlier. Unix timestamp in ms. None search_term Optional[str] Filter users by their user ID localpart or displayname. The search term can be found in any part of the string. Defaults to no filtering. None dir_ str Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f. 'f' Source code in matrix_admin_sdk/endpoints/v1/user_media_statistics.py async def user_media_statistics ( self , limit : int = 100 , from_ : int = 0 , order_by : Optional [ OrderBy ] = None , from_ts : Optional [ int ] = None , until_ts : Optional [ int ] = None , search_term : Optional [ str ] = None , dir_ : str = \"f\" , ) -> UsersMediaStatisticsModel : \"\"\" Returns information about all local media usage of users. Gives the possibility to filter them by time and user Args: limit: is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 from_: used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 order_by: The method in which to sort the returned list of users. Defaults to OrderBy.USER_ID from_ts: Considers only files created at this timestamp or later. Unix timestamp in ms. until_ts: Considers only files created at this timestamp or earlier. Unix timestamp in ms. search_term: Filter users by their user ID localpart or displayname. The search term can be found in any part of the string. Defaults to no filtering. dir_: Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f. Returns: \"\"\" if order_by is None : order_by = OrderBy . USER_ID url = self . url ( \"statistics/users/media\" ) params = { \"limit\" : limit , \"from\" : from_ , \"order_by\" : order_by . value , \"from_ts\" : from_ts , \"until_ts\" : until_ts , \"dir\" : dir_ , } if search_term is not None : params [ \"search_term\" ] = search_term result = await self . request ( RequestMethods . GET , url , params = params ) res : UsersMediaStatisticsModel = UsersMediaStatisticsModel . from_dict ( result ) return res Models \u00b6 RenewAccountModel \u00b6 Attributes: Name Type Description expiration_ts int new expiration date for this account, as a timestamp in milliseconds since epoch expiration_date datetime new expiration date for this account, as a datetime object Source code in matrix_admin_sdk/models/v1/account_validity.py class RenewAccountModel ( BaseModel ): \"\"\" Attributes: expiration_ts (int): new expiration date for this account, as a timestamp in milliseconds since epoch expiration_date (datetime): new expiration date for this account, as a datetime object \"\"\" expiration_ts : int @property def expiration_date ( self ) -> datetime : return datetime . fromtimestamp ( self . expiration_ts / 1000 ) Other \u00b6 OrderBy \u00b6 Enum for order by for user media statistics Attributes: Name Type Description USER_ID str Users are ordered alphabetically DISPLAY_NAME str Users are ordered alphabetically by displayname MEDIA_LENGTH str Users are ordered by the total size of uploaded media in bytes. Smallest to largest. MEDIA_COUNT str Users are ordered by number of uploaded media. Smallest to largest Source code in matrix_admin_sdk/endpoints/v1/user_media_statistics.py class OrderBy ( Enum ): \"\"\" Enum for order by for user media statistics Attributes: USER_ID (str): Users are ordered alphabetically DISPLAY_NAME (str): Users are ordered alphabetically by displayname MEDIA_LENGTH (str): Users are ordered by the total size of uploaded media in bytes. Smallest to largest. MEDIA_COUNT (str): Users are ordered by number of uploaded media. Smallest to largest \"\"\" USER_ID = \"user_id\" DISPLAY_NAME = \"displayname\" MEDIA_LENGTH = \"media_length\" MEDIA_COUNT = \"media_count\"","title":"User Media Statistics"},{"location":"endpoints/v1/user_media_statistics/#user-media-statistics","text":"","title":"User Media Statistics"},{"location":"endpoints/v1/user_media_statistics/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/user_media_statistics/#usermediastatistics","text":"User Media Statistics Endpoint Source code in matrix_admin_sdk/endpoints/v1/user_media_statistics.py class UserMediaStatistics ( Endpoint ): \"\"\" User Media Statistics Endpoint \"\"\" async def user_media_statistics ( self , limit : int = 100 , from_ : int = 0 , order_by : Optional [ OrderBy ] = None , from_ts : Optional [ int ] = None , until_ts : Optional [ int ] = None , search_term : Optional [ str ] = None , dir_ : str = \"f\" , ) -> UsersMediaStatisticsModel : \"\"\" Returns information about all local media usage of users. Gives the possibility to filter them by time and user Args: limit: is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 from_: used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 order_by: The method in which to sort the returned list of users. Defaults to OrderBy.USER_ID from_ts: Considers only files created at this timestamp or later. Unix timestamp in ms. until_ts: Considers only files created at this timestamp or earlier. Unix timestamp in ms. search_term: Filter users by their user ID localpart or displayname. The search term can be found in any part of the string. Defaults to no filtering. dir_: Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f. Returns: \"\"\" if order_by is None : order_by = OrderBy . USER_ID url = self . url ( \"statistics/users/media\" ) params = { \"limit\" : limit , \"from\" : from_ , \"order_by\" : order_by . value , \"from_ts\" : from_ts , \"until_ts\" : until_ts , \"dir\" : dir_ , } if search_term is not None : params [ \"search_term\" ] = search_term result = await self . request ( RequestMethods . GET , url , params = params ) res : UsersMediaStatisticsModel = UsersMediaStatisticsModel . from_dict ( result ) return res","title":"UserMediaStatistics"},{"location":"endpoints/v1/user_media_statistics/#matrix_admin_sdk.endpoints.v1.user_media_statistics.UserMediaStatistics.user_media_statistics","text":"Returns information about all local media usage of users. Gives the possibility to filter them by time and user Parameters: Name Type Description Default limit int is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 100 from_ int used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 0 order_by Optional[matrix_admin_sdk.endpoints.v1.user_media_statistics.OrderBy] The method in which to sort the returned list of users. Defaults to OrderBy.USER_ID None from_ts Optional[int] Considers only files created at this timestamp or later. Unix timestamp in ms. None until_ts Optional[int] Considers only files created at this timestamp or earlier. Unix timestamp in ms. None search_term Optional[str] Filter users by their user ID localpart or displayname. The search term can be found in any part of the string. Defaults to no filtering. None dir_ str Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f. 'f' Source code in matrix_admin_sdk/endpoints/v1/user_media_statistics.py async def user_media_statistics ( self , limit : int = 100 , from_ : int = 0 , order_by : Optional [ OrderBy ] = None , from_ts : Optional [ int ] = None , until_ts : Optional [ int ] = None , search_term : Optional [ str ] = None , dir_ : str = \"f\" , ) -> UsersMediaStatisticsModel : \"\"\" Returns information about all local media usage of users. Gives the possibility to filter them by time and user Args: limit: is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100 from_: used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0 order_by: The method in which to sort the returned list of users. Defaults to OrderBy.USER_ID from_ts: Considers only files created at this timestamp or later. Unix timestamp in ms. until_ts: Considers only files created at this timestamp or earlier. Unix timestamp in ms. search_term: Filter users by their user ID localpart or displayname. The search term can be found in any part of the string. Defaults to no filtering. dir_: Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f. Returns: \"\"\" if order_by is None : order_by = OrderBy . USER_ID url = self . url ( \"statistics/users/media\" ) params = { \"limit\" : limit , \"from\" : from_ , \"order_by\" : order_by . value , \"from_ts\" : from_ts , \"until_ts\" : until_ts , \"dir\" : dir_ , } if search_term is not None : params [ \"search_term\" ] = search_term result = await self . request ( RequestMethods . GET , url , params = params ) res : UsersMediaStatisticsModel = UsersMediaStatisticsModel . from_dict ( result ) return res","title":"user_media_statistics()"},{"location":"endpoints/v1/user_media_statistics/#models","text":"","title":"Models"},{"location":"endpoints/v1/user_media_statistics/#renewaccountmodel","text":"Attributes: Name Type Description expiration_ts int new expiration date for this account, as a timestamp in milliseconds since epoch expiration_date datetime new expiration date for this account, as a datetime object Source code in matrix_admin_sdk/models/v1/account_validity.py class RenewAccountModel ( BaseModel ): \"\"\" Attributes: expiration_ts (int): new expiration date for this account, as a timestamp in milliseconds since epoch expiration_date (datetime): new expiration date for this account, as a datetime object \"\"\" expiration_ts : int @property def expiration_date ( self ) -> datetime : return datetime . fromtimestamp ( self . expiration_ts / 1000 )","title":"RenewAccountModel"},{"location":"endpoints/v1/user_media_statistics/#other","text":"","title":"Other"},{"location":"endpoints/v1/user_media_statistics/#orderby","text":"Enum for order by for user media statistics Attributes: Name Type Description USER_ID str Users are ordered alphabetically DISPLAY_NAME str Users are ordered alphabetically by displayname MEDIA_LENGTH str Users are ordered by the total size of uploaded media in bytes. Smallest to largest. MEDIA_COUNT str Users are ordered by number of uploaded media. Smallest to largest Source code in matrix_admin_sdk/endpoints/v1/user_media_statistics.py class OrderBy ( Enum ): \"\"\" Enum for order by for user media statistics Attributes: USER_ID (str): Users are ordered alphabetically DISPLAY_NAME (str): Users are ordered alphabetically by displayname MEDIA_LENGTH (str): Users are ordered by the total size of uploaded media in bytes. Smallest to largest. MEDIA_COUNT (str): Users are ordered by number of uploaded media. Smallest to largest \"\"\" USER_ID = \"user_id\" DISPLAY_NAME = \"displayname\" MEDIA_LENGTH = \"media_length\" MEDIA_COUNT = \"media_count\"","title":"OrderBy"},{"location":"endpoints/v1/user_rate_limits/","text":"User Rate Limits \u00b6 Endpoints \u00b6 UserRateLimits \u00b6 This API allows to override or disable ratelimiting for a specific user. There are specific APIs to set, get and delete a ratelimit. Source code in matrix_admin_sdk/endpoints/v1/user_rate_limits.py class UserRateLimits ( Endpoint ): \"\"\" This API allows to override or disable ratelimiting for a specific user. There are specific APIs to set, get and delete a ratelimit. \"\"\" def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize User endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: key Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs ) async def get_status ( self ) -> RateLimitsStatusModel : \"\"\" Get the ratelimit status for a user. Returns: RateLimitsStatusModel \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) result = await self . request ( RequestMethods . GET , url ) res : RateLimitsStatusModel = RateLimitsStatusModel . from_dict ( result ) return res async def set ( self , messages_per_second : int , burst_count : int ) -> RateLimitsStatusModel : \"\"\" Set the ratelimit for a user. Args: messages_per_second: The number of actions that can be performed in a second burst_count: How many actions that can be performed before being limited Returns: RateLimitsStatusModel \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) data = { \"messages_per_second\" : messages_per_second , \"burst_count\" : burst_count } result = await self . request ( RequestMethods . POST , url , json = data ) res : RateLimitsStatusModel = RateLimitsStatusModel . from_dict ( result ) return res async def delete ( self ) -> None : \"\"\" Delete the ratelimit for a user. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) await self . request ( RequestMethods . DELETE , url ) __int__ ( self , user_id , ** kwargs ) special \u00b6 Initialize User endpoint Parameters: Name Type Description Default user_id str fully-qualified user id: for example, @user :server.com required **kwargs key {} Source code in matrix_admin_sdk/endpoints/v1/user_rate_limits.py def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize User endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: key Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs ) delete ( self ) async \u00b6 Delete the ratelimit for a user. Returns: None Source code in matrix_admin_sdk/endpoints/v1/user_rate_limits.py async def delete ( self ) -> None : \"\"\" Delete the ratelimit for a user. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) await self . request ( RequestMethods . DELETE , url ) get_status ( self ) async \u00b6 Get the ratelimit status for a user. Returns: RateLimitsStatusModel Source code in matrix_admin_sdk/endpoints/v1/user_rate_limits.py async def get_status ( self ) -> RateLimitsStatusModel : \"\"\" Get the ratelimit status for a user. Returns: RateLimitsStatusModel \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) result = await self . request ( RequestMethods . GET , url ) res : RateLimitsStatusModel = RateLimitsStatusModel . from_dict ( result ) return res set ( self , messages_per_second , burst_count ) async \u00b6 Set the ratelimit for a user. Parameters: Name Type Description Default messages_per_second int The number of actions that can be performed in a second required burst_count int How many actions that can be performed before being limited required Source code in matrix_admin_sdk/endpoints/v1/user_rate_limits.py async def set ( self , messages_per_second : int , burst_count : int ) -> RateLimitsStatusModel : \"\"\" Set the ratelimit for a user. Args: messages_per_second: The number of actions that can be performed in a second burst_count: How many actions that can be performed before being limited Returns: RateLimitsStatusModel \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) data = { \"messages_per_second\" : messages_per_second , \"burst_count\" : burst_count } result = await self . request ( RequestMethods . POST , url , json = data ) res : RateLimitsStatusModel = RateLimitsStatusModel . from_dict ( result ) return res Models \u00b6 RateLimitsStatusModel \u00b6 Class representing the rate limits status model. Attributes: Name Type Description messages_per_second int The number of actions that can be performed in a second. 0 mean that ratelimiting is disabled for this user burst_count int How many actions that can be performed before being limited. Source code in matrix_admin_sdk/models/v1/user_rate_limits.py class RateLimitsStatusModel ( BaseModel ): \"\"\" Class representing the rate limits status model. Attributes: messages_per_second (int): The number of actions that can be performed in a second. 0 mean that ratelimiting is disabled for this user burst_count (int): How many actions that can be performed before being limited. \"\"\" messages_per_second : Optional [ int ] = None burst_count : Optional [ int ] = None","title":"User Rate Limits"},{"location":"endpoints/v1/user_rate_limits/#user-rate-limits","text":"","title":"User Rate Limits"},{"location":"endpoints/v1/user_rate_limits/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v1/user_rate_limits/#userratelimits","text":"This API allows to override or disable ratelimiting for a specific user. There are specific APIs to set, get and delete a ratelimit. Source code in matrix_admin_sdk/endpoints/v1/user_rate_limits.py class UserRateLimits ( Endpoint ): \"\"\" This API allows to override or disable ratelimiting for a specific user. There are specific APIs to set, get and delete a ratelimit. \"\"\" def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize User endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: key Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs ) async def get_status ( self ) -> RateLimitsStatusModel : \"\"\" Get the ratelimit status for a user. Returns: RateLimitsStatusModel \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) result = await self . request ( RequestMethods . GET , url ) res : RateLimitsStatusModel = RateLimitsStatusModel . from_dict ( result ) return res async def set ( self , messages_per_second : int , burst_count : int ) -> RateLimitsStatusModel : \"\"\" Set the ratelimit for a user. Args: messages_per_second: The number of actions that can be performed in a second burst_count: How many actions that can be performed before being limited Returns: RateLimitsStatusModel \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) data = { \"messages_per_second\" : messages_per_second , \"burst_count\" : burst_count } result = await self . request ( RequestMethods . POST , url , json = data ) res : RateLimitsStatusModel = RateLimitsStatusModel . from_dict ( result ) return res async def delete ( self ) -> None : \"\"\" Delete the ratelimit for a user. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) await self . request ( RequestMethods . DELETE , url )","title":"UserRateLimits"},{"location":"endpoints/v1/user_rate_limits/#matrix_admin_sdk.endpoints.v1.user_rate_limits.UserRateLimits.__int__","text":"Initialize User endpoint Parameters: Name Type Description Default user_id str fully-qualified user id: for example, @user :server.com required **kwargs key {} Source code in matrix_admin_sdk/endpoints/v1/user_rate_limits.py def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize User endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: key Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs )","title":"__int__()"},{"location":"endpoints/v1/user_rate_limits/#matrix_admin_sdk.endpoints.v1.user_rate_limits.UserRateLimits.delete","text":"Delete the ratelimit for a user. Returns: None Source code in matrix_admin_sdk/endpoints/v1/user_rate_limits.py async def delete ( self ) -> None : \"\"\" Delete the ratelimit for a user. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) await self . request ( RequestMethods . DELETE , url )","title":"delete()"},{"location":"endpoints/v1/user_rate_limits/#matrix_admin_sdk.endpoints.v1.user_rate_limits.UserRateLimits.get_status","text":"Get the ratelimit status for a user. Returns: RateLimitsStatusModel Source code in matrix_admin_sdk/endpoints/v1/user_rate_limits.py async def get_status ( self ) -> RateLimitsStatusModel : \"\"\" Get the ratelimit status for a user. Returns: RateLimitsStatusModel \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) result = await self . request ( RequestMethods . GET , url ) res : RateLimitsStatusModel = RateLimitsStatusModel . from_dict ( result ) return res","title":"get_status()"},{"location":"endpoints/v1/user_rate_limits/#matrix_admin_sdk.endpoints.v1.user_rate_limits.UserRateLimits.set","text":"Set the ratelimit for a user. Parameters: Name Type Description Default messages_per_second int The number of actions that can be performed in a second required burst_count int How many actions that can be performed before being limited required Source code in matrix_admin_sdk/endpoints/v1/user_rate_limits.py async def set ( self , messages_per_second : int , burst_count : int ) -> RateLimitsStatusModel : \"\"\" Set the ratelimit for a user. Args: messages_per_second: The number of actions that can be performed in a second burst_count: How many actions that can be performed before being limited Returns: RateLimitsStatusModel \"\"\" url = self . url ( f \"users/ { self . user_id } /override_ratelimit\" ) data = { \"messages_per_second\" : messages_per_second , \"burst_count\" : burst_count } result = await self . request ( RequestMethods . POST , url , json = data ) res : RateLimitsStatusModel = RateLimitsStatusModel . from_dict ( result ) return res","title":"set()"},{"location":"endpoints/v1/user_rate_limits/#models","text":"","title":"Models"},{"location":"endpoints/v1/user_rate_limits/#ratelimitsstatusmodel","text":"Class representing the rate limits status model. Attributes: Name Type Description messages_per_second int The number of actions that can be performed in a second. 0 mean that ratelimiting is disabled for this user burst_count int How many actions that can be performed before being limited. Source code in matrix_admin_sdk/models/v1/user_rate_limits.py class RateLimitsStatusModel ( BaseModel ): \"\"\" Class representing the rate limits status model. Attributes: messages_per_second (int): The number of actions that can be performed in a second. 0 mean that ratelimiting is disabled for this user burst_count (int): How many actions that can be performed before being limited. \"\"\" messages_per_second : Optional [ int ] = None burst_count : Optional [ int ] = None","title":"RateLimitsStatusModel"},{"location":"endpoints/v2/rooms/","text":"Rooms \u00b6 Endpoints \u00b6 Rooms \u00b6 Source code in matrix_admin_sdk/endpoints/v2/rooms.py class Rooms ( Endpoint ): async def delete ( self , room_id : str , new_room_user_id : Optional [ str ] = None , room_name : str = \"Content Violation Notification\" , message : Optional [ str ] = None , block : bool = False , purge : bool = True , force_purge : bool = False , ) -> Dict [ str , str ]: \"\"\" **Note**: This API is new, experimental and \"subject to change\". This version works asynchronously, meaning you get the response from server immediately while the server works on that task in background. You can then request the status of the action to check if it has completed. Args: room_id: room id to delete new_room_user_id: If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. room_name: A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification message: A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. block: If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. purge: If set to true, it will remove all traces of the room from your database. Defaults to true. force_purge: Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. Returns: {\"delete_id\": \"<opaque id>\"} \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) data = { \"new_room_user_id\" : new_room_user_id , \"room_name\" : room_name , \"message\" : message , \"block\" : block , \"purge\" : purge , \"force_purge\" : force_purge , } result = await self . request ( RequestMethods . DELETE , url , json = data ) return result delete ( self , room_id , new_room_user_id = None , room_name = 'Content Violation Notification' , message = None , block = False , purge = True , force_purge = False ) async \u00b6 Note : This API is new, experimental and \"subject to change\". This version works asynchronously, meaning you get the response from server immediately while the server works on that task in background. You can then request the status of the action to check if it has completed. Parameters: Name Type Description Default room_id str room id to delete required new_room_user_id Optional[str] If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. None room_name str A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification 'Content Violation Notification' message Optional[str] A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. None block bool If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. False purge bool If set to true, it will remove all traces of the room from your database. Defaults to true. True force_purge bool Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. False Source code in matrix_admin_sdk/endpoints/v2/rooms.py async def delete ( self , room_id : str , new_room_user_id : Optional [ str ] = None , room_name : str = \"Content Violation Notification\" , message : Optional [ str ] = None , block : bool = False , purge : bool = True , force_purge : bool = False , ) -> Dict [ str , str ]: \"\"\" **Note**: This API is new, experimental and \"subject to change\". This version works asynchronously, meaning you get the response from server immediately while the server works on that task in background. You can then request the status of the action to check if it has completed. Args: room_id: room id to delete new_room_user_id: If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. room_name: A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification message: A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. block: If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. purge: If set to true, it will remove all traces of the room from your database. Defaults to true. force_purge: Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. Returns: {\"delete_id\": \"<opaque id>\"} \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) data = { \"new_room_user_id\" : new_room_user_id , \"room_name\" : room_name , \"message\" : message , \"block\" : block , \"purge\" : purge , \"force_purge\" : force_purge , } result = await self . request ( RequestMethods . DELETE , url , json = data ) return result","title":"Rooms"},{"location":"endpoints/v2/rooms/#rooms","text":"","title":"Rooms"},{"location":"endpoints/v2/rooms/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v2/rooms/#rooms_1","text":"Source code in matrix_admin_sdk/endpoints/v2/rooms.py class Rooms ( Endpoint ): async def delete ( self , room_id : str , new_room_user_id : Optional [ str ] = None , room_name : str = \"Content Violation Notification\" , message : Optional [ str ] = None , block : bool = False , purge : bool = True , force_purge : bool = False , ) -> Dict [ str , str ]: \"\"\" **Note**: This API is new, experimental and \"subject to change\". This version works asynchronously, meaning you get the response from server immediately while the server works on that task in background. You can then request the status of the action to check if it has completed. Args: room_id: room id to delete new_room_user_id: If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. room_name: A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification message: A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. block: If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. purge: If set to true, it will remove all traces of the room from your database. Defaults to true. force_purge: Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. Returns: {\"delete_id\": \"<opaque id>\"} \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) data = { \"new_room_user_id\" : new_room_user_id , \"room_name\" : room_name , \"message\" : message , \"block\" : block , \"purge\" : purge , \"force_purge\" : force_purge , } result = await self . request ( RequestMethods . DELETE , url , json = data ) return result","title":"Rooms"},{"location":"endpoints/v2/rooms/#matrix_admin_sdk.endpoints.v2.rooms.Rooms.delete","text":"Note : This API is new, experimental and \"subject to change\". This version works asynchronously, meaning you get the response from server immediately while the server works on that task in background. You can then request the status of the action to check if it has completed. Parameters: Name Type Description Default room_id str room id to delete required new_room_user_id Optional[str] If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. None room_name str A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification 'Content Violation Notification' message Optional[str] A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. None block bool If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. False purge bool If set to true, it will remove all traces of the room from your database. Defaults to true. True force_purge bool Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. False Source code in matrix_admin_sdk/endpoints/v2/rooms.py async def delete ( self , room_id : str , new_room_user_id : Optional [ str ] = None , room_name : str = \"Content Violation Notification\" , message : Optional [ str ] = None , block : bool = False , purge : bool = True , force_purge : bool = False , ) -> Dict [ str , str ]: \"\"\" **Note**: This API is new, experimental and \"subject to change\". This version works asynchronously, meaning you get the response from server immediately while the server works on that task in background. You can then request the status of the action to check if it has completed. Args: room_id: room id to delete new_room_user_id: If set, a new room will be created with this user ID as the creator and admin, and all users in the old room will be moved into that room. If not set, no new room will be created and the users will just be removed from the old room. The user ID must be on the local server, but does not necessarily have to belong to a registered user. room_name: A string representing the name of the room that new users will be invited to. Defaults to Content Violation Notification message: A string containing the first message that will be sent as new_room_user_id in the new room. Ideally this will clearly convey why the original room was shut down. Defaults to Sharing illegal content on this server is not permitted and rooms in violation will be blocked. block: If set to true, this room will be added to a blocking list, preventing future attempts to join the room. Rooms can be blocked even if they're not yet known to the homeserver (only with Version 1 of the API). Defaults to false. purge: If set to true, it will remove all traces of the room from your database. Defaults to true. force_purge: Optional, and ignored unless purge is true. If set to true, it will force a purge to go ahead even if there are local users still in the room. Do not use this unless a regular purge operation fails, as it could leave those users' clients in a confused state. Returns: {\"delete_id\": \"<opaque id>\"} \"\"\" url = self . url ( f \"rooms/ { room_id } \" ) data = { \"new_room_user_id\" : new_room_user_id , \"room_name\" : room_name , \"message\" : message , \"block\" : block , \"purge\" : purge , \"force_purge\" : force_purge , } result = await self . request ( RequestMethods . DELETE , url , json = data ) return result","title":"delete()"},{"location":"endpoints/v2/user_devices/","text":"Users Devices \u00b6 Endpoints \u00b6 UserDevices \u00b6 Source code in matrix_admin_sdk/endpoints/v2/user_devices.py class UserDevices ( Endpoint ): def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize UserDevices endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: keyword arguments to pass to Endpoint Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs ) async def get_all ( self ) -> UserDevicesModel : \"\"\" Gets information about all devices for a specific user_id. Returns: UserDevicesModel \"\"\" url = self . url ( f \"users/ { self . user_id } /devices\" ) result = await self . request ( RequestMethods . GET , url ) res : UserDevicesModel = UserDevicesModel . from_dict ( result ) return res async def delete_multiple ( self , devices : List [ str ]) -> None : \"\"\" Deletes the given devices for a specific user_id, and invalidates any access token associated with them. Args: devices: The list of device IDs to delete. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /delete_devices\" ) data = { \"devices\" : devices } await self . request ( RequestMethods . POST , url , json = data ) async def show ( self , device_id : str ) -> UserDeviceModel : \"\"\" Gets information on a single device, by device_id for a specific user_id. Args: device_id: The device to retrieve. Returns: \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : UserDeviceModel = UserDeviceModel . from_dict ( result ) return res async def update ( self , device_id : str , display_name : str ) -> None : \"\"\" Updates the metadata on the given device_id for a specific user_id. Args: device_id: The device to update. display_name: The new display name for this device. If not given, the display name is unchanged. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) data = { \"display_name\" : display_name } await self . request ( RequestMethods . PUT , url , json = data ) async def delete ( self , device_id : str ) -> None : \"\"\" Deletes the given device_id for a specific user_id, and invalidates any access token associated with it. Args: device_id: The device to delete. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) await self . request ( RequestMethods . DELETE , url ) __int__ ( self , user_id , ** kwargs ) special \u00b6 Initialize UserDevices endpoint Parameters: Name Type Description Default user_id str fully-qualified user id: for example, @user :server.com required **kwargs keyword arguments to pass to Endpoint {} Source code in matrix_admin_sdk/endpoints/v2/user_devices.py def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize UserDevices endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: keyword arguments to pass to Endpoint Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs ) delete ( self , device_id ) async \u00b6 Deletes the given device_id for a specific user_id, and invalidates any access token associated with it. Parameters: Name Type Description Default device_id str The device to delete. required Source code in matrix_admin_sdk/endpoints/v2/user_devices.py async def delete ( self , device_id : str ) -> None : \"\"\" Deletes the given device_id for a specific user_id, and invalidates any access token associated with it. Args: device_id: The device to delete. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) await self . request ( RequestMethods . DELETE , url ) delete_multiple ( self , devices ) async \u00b6 Deletes the given devices for a specific user_id, and invalidates any access token associated with them. Parameters: Name Type Description Default devices List[str] The list of device IDs to delete. required Source code in matrix_admin_sdk/endpoints/v2/user_devices.py async def delete_multiple ( self , devices : List [ str ]) -> None : \"\"\" Deletes the given devices for a specific user_id, and invalidates any access token associated with them. Args: devices: The list of device IDs to delete. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /delete_devices\" ) data = { \"devices\" : devices } await self . request ( RequestMethods . POST , url , json = data ) get_all ( self ) async \u00b6 Gets information about all devices for a specific user_id. Returns: UserDevicesModel Source code in matrix_admin_sdk/endpoints/v2/user_devices.py async def get_all ( self ) -> UserDevicesModel : \"\"\" Gets information about all devices for a specific user_id. Returns: UserDevicesModel \"\"\" url = self . url ( f \"users/ { self . user_id } /devices\" ) result = await self . request ( RequestMethods . GET , url ) res : UserDevicesModel = UserDevicesModel . from_dict ( result ) return res show ( self , device_id ) async \u00b6 Gets information on a single device, by device_id for a specific user_id. Parameters: Name Type Description Default device_id str The device to retrieve. required Source code in matrix_admin_sdk/endpoints/v2/user_devices.py async def show ( self , device_id : str ) -> UserDeviceModel : \"\"\" Gets information on a single device, by device_id for a specific user_id. Args: device_id: The device to retrieve. Returns: \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : UserDeviceModel = UserDeviceModel . from_dict ( result ) return res update ( self , device_id , display_name ) async \u00b6 Updates the metadata on the given device_id for a specific user_id. Parameters: Name Type Description Default device_id str The device to update. required display_name str The new display name for this device. If not given, the display name is unchanged. required Source code in matrix_admin_sdk/endpoints/v2/user_devices.py async def update ( self , device_id : str , display_name : str ) -> None : \"\"\" Updates the metadata on the given device_id for a specific user_id. Args: device_id: The device to update. display_name: The new display name for this device. If not given, the display name is unchanged. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) data = { \"display_name\" : display_name } await self . request ( RequestMethods . PUT , url , json = data ) Models \u00b6 UserDevicesModel \u00b6 UserDevicesModel Attributes: Name Type Description devices list An array of objects, each containing information about a device total int Total number of devices Source code in matrix_admin_sdk/models/v2/user_devices.py class UserDevicesModel ( BaseModel ): \"\"\" UserDevicesModel Attributes: devices (list): An array of objects, each containing information about a device total (int): Total number of devices \"\"\" devices : List [ UserDeviceModel ] total : int @classmethod def from_dict ( cls , data : Dict [ str , Any ]): user_devices = [ UserDeviceModel . from_dict ( i ) for i in data . get ( \"devices\" , [])] return cls ( devices = user_devices , total = data . get ( \"total\" , 0 )) UserDeviceModel \u00b6 UserDeviceModel class Attributes: Name Type Description device_id str Identifier of device display_name str Display name set by the user for this device. Absent if no name has been set. last_seen_ip str The IP address where this device was last seen. (May be a few minutes out of date, for efficiency reasons). last_seen_ts int The timestamp (in milliseconds since the unix epoch) when this devices was last seen. (May be a few minutes out of date, for efficiency reasons). user_id str Owner of device. Source code in matrix_admin_sdk/models/v2/user_devices.py class UserDeviceModel ( BaseModel ): \"\"\" UserDeviceModel class Attributes: device_id (str): Identifier of device display_name (str): Display name set by the user for this device. Absent if no name has been set. last_seen_ip (str): The IP address where this device was last seen. (May be a few minutes out of date, for efficiency reasons). last_seen_ts (int): The timestamp (in milliseconds since the unix epoch) when this devices was last seen. (May be a few minutes out of date, for efficiency reasons). user_id (str): Owner of device. \"\"\" device_id : str display_name : str last_seen_ip : str last_seen_ts : int user_id : str","title":"User Devices"},{"location":"endpoints/v2/user_devices/#users-devices","text":"","title":"Users Devices"},{"location":"endpoints/v2/user_devices/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v2/user_devices/#userdevices","text":"Source code in matrix_admin_sdk/endpoints/v2/user_devices.py class UserDevices ( Endpoint ): def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize UserDevices endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: keyword arguments to pass to Endpoint Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs ) async def get_all ( self ) -> UserDevicesModel : \"\"\" Gets information about all devices for a specific user_id. Returns: UserDevicesModel \"\"\" url = self . url ( f \"users/ { self . user_id } /devices\" ) result = await self . request ( RequestMethods . GET , url ) res : UserDevicesModel = UserDevicesModel . from_dict ( result ) return res async def delete_multiple ( self , devices : List [ str ]) -> None : \"\"\" Deletes the given devices for a specific user_id, and invalidates any access token associated with them. Args: devices: The list of device IDs to delete. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /delete_devices\" ) data = { \"devices\" : devices } await self . request ( RequestMethods . POST , url , json = data ) async def show ( self , device_id : str ) -> UserDeviceModel : \"\"\" Gets information on a single device, by device_id for a specific user_id. Args: device_id: The device to retrieve. Returns: \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : UserDeviceModel = UserDeviceModel . from_dict ( result ) return res async def update ( self , device_id : str , display_name : str ) -> None : \"\"\" Updates the metadata on the given device_id for a specific user_id. Args: device_id: The device to update. display_name: The new display name for this device. If not given, the display name is unchanged. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) data = { \"display_name\" : display_name } await self . request ( RequestMethods . PUT , url , json = data ) async def delete ( self , device_id : str ) -> None : \"\"\" Deletes the given device_id for a specific user_id, and invalidates any access token associated with it. Args: device_id: The device to delete. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) await self . request ( RequestMethods . DELETE , url )","title":"UserDevices"},{"location":"endpoints/v2/user_devices/#matrix_admin_sdk.endpoints.v2.user_devices.UserDevices.__int__","text":"Initialize UserDevices endpoint Parameters: Name Type Description Default user_id str fully-qualified user id: for example, @user :server.com required **kwargs keyword arguments to pass to Endpoint {} Source code in matrix_admin_sdk/endpoints/v2/user_devices.py def __int__ ( self , user_id : str , ** kwargs ): \"\"\" Initialize UserDevices endpoint Args: user_id: fully-qualified user id: for example, @user:server.com **kwargs: keyword arguments to pass to Endpoint Returns: None \"\"\" self . user_id = user_id super () . __init__ ( ** kwargs )","title":"__int__()"},{"location":"endpoints/v2/user_devices/#matrix_admin_sdk.endpoints.v2.user_devices.UserDevices.delete","text":"Deletes the given device_id for a specific user_id, and invalidates any access token associated with it. Parameters: Name Type Description Default device_id str The device to delete. required Source code in matrix_admin_sdk/endpoints/v2/user_devices.py async def delete ( self , device_id : str ) -> None : \"\"\" Deletes the given device_id for a specific user_id, and invalidates any access token associated with it. Args: device_id: The device to delete. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) await self . request ( RequestMethods . DELETE , url )","title":"delete()"},{"location":"endpoints/v2/user_devices/#matrix_admin_sdk.endpoints.v2.user_devices.UserDevices.delete_multiple","text":"Deletes the given devices for a specific user_id, and invalidates any access token associated with them. Parameters: Name Type Description Default devices List[str] The list of device IDs to delete. required Source code in matrix_admin_sdk/endpoints/v2/user_devices.py async def delete_multiple ( self , devices : List [ str ]) -> None : \"\"\" Deletes the given devices for a specific user_id, and invalidates any access token associated with them. Args: devices: The list of device IDs to delete. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /delete_devices\" ) data = { \"devices\" : devices } await self . request ( RequestMethods . POST , url , json = data )","title":"delete_multiple()"},{"location":"endpoints/v2/user_devices/#matrix_admin_sdk.endpoints.v2.user_devices.UserDevices.get_all","text":"Gets information about all devices for a specific user_id. Returns: UserDevicesModel Source code in matrix_admin_sdk/endpoints/v2/user_devices.py async def get_all ( self ) -> UserDevicesModel : \"\"\" Gets information about all devices for a specific user_id. Returns: UserDevicesModel \"\"\" url = self . url ( f \"users/ { self . user_id } /devices\" ) result = await self . request ( RequestMethods . GET , url ) res : UserDevicesModel = UserDevicesModel . from_dict ( result ) return res","title":"get_all()"},{"location":"endpoints/v2/user_devices/#matrix_admin_sdk.endpoints.v2.user_devices.UserDevices.show","text":"Gets information on a single device, by device_id for a specific user_id. Parameters: Name Type Description Default device_id str The device to retrieve. required Source code in matrix_admin_sdk/endpoints/v2/user_devices.py async def show ( self , device_id : str ) -> UserDeviceModel : \"\"\" Gets information on a single device, by device_id for a specific user_id. Args: device_id: The device to retrieve. Returns: \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : UserDeviceModel = UserDeviceModel . from_dict ( result ) return res","title":"show()"},{"location":"endpoints/v2/user_devices/#matrix_admin_sdk.endpoints.v2.user_devices.UserDevices.update","text":"Updates the metadata on the given device_id for a specific user_id. Parameters: Name Type Description Default device_id str The device to update. required display_name str The new display name for this device. If not given, the display name is unchanged. required Source code in matrix_admin_sdk/endpoints/v2/user_devices.py async def update ( self , device_id : str , display_name : str ) -> None : \"\"\" Updates the metadata on the given device_id for a specific user_id. Args: device_id: The device to update. display_name: The new display name for this device. If not given, the display name is unchanged. Returns: None \"\"\" url = self . url ( f \"users/ { self . user_id } /devices/ { device_id } \" ) data = { \"display_name\" : display_name } await self . request ( RequestMethods . PUT , url , json = data )","title":"update()"},{"location":"endpoints/v2/user_devices/#models","text":"","title":"Models"},{"location":"endpoints/v2/user_devices/#userdevicesmodel","text":"UserDevicesModel Attributes: Name Type Description devices list An array of objects, each containing information about a device total int Total number of devices Source code in matrix_admin_sdk/models/v2/user_devices.py class UserDevicesModel ( BaseModel ): \"\"\" UserDevicesModel Attributes: devices (list): An array of objects, each containing information about a device total (int): Total number of devices \"\"\" devices : List [ UserDeviceModel ] total : int @classmethod def from_dict ( cls , data : Dict [ str , Any ]): user_devices = [ UserDeviceModel . from_dict ( i ) for i in data . get ( \"devices\" , [])] return cls ( devices = user_devices , total = data . get ( \"total\" , 0 ))","title":"UserDevicesModel"},{"location":"endpoints/v2/user_devices/#userdevicemodel","text":"UserDeviceModel class Attributes: Name Type Description device_id str Identifier of device display_name str Display name set by the user for this device. Absent if no name has been set. last_seen_ip str The IP address where this device was last seen. (May be a few minutes out of date, for efficiency reasons). last_seen_ts int The timestamp (in milliseconds since the unix epoch) when this devices was last seen. (May be a few minutes out of date, for efficiency reasons). user_id str Owner of device. Source code in matrix_admin_sdk/models/v2/user_devices.py class UserDeviceModel ( BaseModel ): \"\"\" UserDeviceModel class Attributes: device_id (str): Identifier of device display_name (str): Display name set by the user for this device. Absent if no name has been set. last_seen_ip (str): The IP address where this device was last seen. (May be a few minutes out of date, for efficiency reasons). last_seen_ts (int): The timestamp (in milliseconds since the unix epoch) when this devices was last seen. (May be a few minutes out of date, for efficiency reasons). user_id (str): Owner of device. \"\"\" device_id : str display_name : str last_seen_ip : str last_seen_ts : int user_id : str","title":"UserDeviceModel"},{"location":"endpoints/v2/users/","text":"Users \u00b6 Endpoints \u00b6 Users \u00b6 Source code in matrix_admin_sdk/endpoints/v2/users.py class Users ( Endpoint ): async def get_all ( self , user_id : Optional [ str ] = None , name : Optional [ str ] = None , guests : bool = True , deactivated : bool = False , limit : int = 100 , from_ : int = 0 , order_by : Optional [ OrderBy ] = None , dir_ : str = \"f\" , ) -> UsersModel : order_by = OrderBy . NAME if order_by is None else order_by url = self . url ( \"users\" ) params = { \"user_id\" : user_id , \"name\" : name , \"guests\" : guests , \"deactivated\" : deactivated , \"limit\" : limit , \"from\" : from_ , \"order_by\" : order_by . value , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : UsersModel = UsersModel . from_dict ( result ) return res async def query_user_account ( self , user_id : str ) -> UserDetailsModel : \"\"\" This API returns information about a specific user account. Args: user_id: fully-qualified user id: for example, @user:server.com Returns: UserDetailsModel \"\"\" url = self . url ( f \"users/ { user_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : UserDetailsModel = UserDetailsModel . from_dict ( result ) return res async def create_or_modify_account ( self , user_id : str , password : Optional [ str ] = None , displayname : Optional [ str ] = None , avatar_url : Optional [ str ] = None , admin : bool = False , deactivated : bool = False , user_type : Optional [ str ] = None , threepids : Optional [ List [ Threepid ]] = None , external_ids : Optional [ List [ ExternalId ]] = None , ) -> None : \"\"\" This API allows an administrator to create or modify a user account with a specific user_id. If the user already exists then optional parameters default to the current value. In order to re-activate an account deactivated must be set to false. If users do not login via single-sign-on, a new password must be provided. Args: user_id: fully-qualified user id: for example, @user:server.com. password: If provided, the user's password is updated and all devices are logged out. displayname: defaults to the value of user_id. avatar_url: must be a MXC URI admin: is user an admin deactivated: If unspecified, deactivation state will be left unchanged on existing accounts and set to false for new accounts. A user cannot be erased by deactivating with this API. For details on deactivating users see Deactivate Account. user_type: If provided, the user type will be adjusted. If null given, the user type will be cleared. Other allowed options are: bot and support threepids: allows setting the third-party IDs (email, msisdn) external_ids: Allow setting the identifier of the external identity provider for SSO (Single sign-on). Details in Sample Configuration File section sso and oidc_providers Returns: None \"\"\" if threepids is None : threepids = [] if external_ids is None : external_ids = [] if displayname is None : displayname = user_id threepids_list = [ asdict ( i ) for i in threepids ] external_ids_list = [ asdict ( i ) for i in external_ids ] data = { \"displayname\" : displayname , \"threepids\" : threepids_list , \"external_ids\" : external_ids_list , \"avatar_url\" : avatar_url , \"admin\" : admin , \"deactivated\" : deactivated , \"user_type\" : user_type , } if password is not None : data [ \"password\" ] = password url = self . url ( f \"users/ { user_id } \" ) await self . request ( RequestMethods . PUT , url , data = data ) create_or_modify_account ( self , user_id , password = None , displayname = None , avatar_url = None , admin = False , deactivated = False , user_type = None , threepids = None , external_ids = None ) async \u00b6 This API allows an administrator to create or modify a user account with a specific user_id. If the user already exists then optional parameters default to the current value. In order to re-activate an account deactivated must be set to false. If users do not login via single-sign-on, a new password must be provided. Parameters: Name Type Description Default user_id str fully-qualified user id: for example, @user :server.com. required password Optional[str] If provided, the user's password is updated and all devices are logged out. None displayname Optional[str] defaults to the value of user_id. None avatar_url Optional[str] must be a MXC URI None admin bool is user an admin False deactivated bool If unspecified, deactivation state will be left unchanged on existing accounts and set to false for new accounts. A user cannot be erased by deactivating with this API. For details on deactivating users see Deactivate Account. False user_type Optional[str] If provided, the user type will be adjusted. If null given, the user type will be cleared. Other allowed options are: bot and support None threepids Optional[List[matrix_admin_sdk.endpoints.v2.users.Threepid]] allows setting the third-party IDs (email, msisdn) None external_ids Optional[List[matrix_admin_sdk.endpoints.v2.users.ExternalId]] Allow setting the identifier of the external identity provider for SSO (Single sign-on). Details in Sample Configuration File section sso and oidc_providers None Source code in matrix_admin_sdk/endpoints/v2/users.py async def create_or_modify_account ( self , user_id : str , password : Optional [ str ] = None , displayname : Optional [ str ] = None , avatar_url : Optional [ str ] = None , admin : bool = False , deactivated : bool = False , user_type : Optional [ str ] = None , threepids : Optional [ List [ Threepid ]] = None , external_ids : Optional [ List [ ExternalId ]] = None , ) -> None : \"\"\" This API allows an administrator to create or modify a user account with a specific user_id. If the user already exists then optional parameters default to the current value. In order to re-activate an account deactivated must be set to false. If users do not login via single-sign-on, a new password must be provided. Args: user_id: fully-qualified user id: for example, @user:server.com. password: If provided, the user's password is updated and all devices are logged out. displayname: defaults to the value of user_id. avatar_url: must be a MXC URI admin: is user an admin deactivated: If unspecified, deactivation state will be left unchanged on existing accounts and set to false for new accounts. A user cannot be erased by deactivating with this API. For details on deactivating users see Deactivate Account. user_type: If provided, the user type will be adjusted. If null given, the user type will be cleared. Other allowed options are: bot and support threepids: allows setting the third-party IDs (email, msisdn) external_ids: Allow setting the identifier of the external identity provider for SSO (Single sign-on). Details in Sample Configuration File section sso and oidc_providers Returns: None \"\"\" if threepids is None : threepids = [] if external_ids is None : external_ids = [] if displayname is None : displayname = user_id threepids_list = [ asdict ( i ) for i in threepids ] external_ids_list = [ asdict ( i ) for i in external_ids ] data = { \"displayname\" : displayname , \"threepids\" : threepids_list , \"external_ids\" : external_ids_list , \"avatar_url\" : avatar_url , \"admin\" : admin , \"deactivated\" : deactivated , \"user_type\" : user_type , } if password is not None : data [ \"password\" ] = password url = self . url ( f \"users/ { user_id } \" ) await self . request ( RequestMethods . PUT , url , data = data ) query_user_account ( self , user_id ) async \u00b6 This API returns information about a specific user account. Parameters: Name Type Description Default user_id str fully-qualified user id: for example, @user :server.com required Source code in matrix_admin_sdk/endpoints/v2/users.py async def query_user_account ( self , user_id : str ) -> UserDetailsModel : \"\"\" This API returns information about a specific user account. Args: user_id: fully-qualified user id: for example, @user:server.com Returns: UserDetailsModel \"\"\" url = self . url ( f \"users/ { user_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : UserDetailsModel = UserDetailsModel . from_dict ( result ) return res Models \u00b6 UsersModel \u00b6 List of users Attributes: Name Type Description users list[UserModel] List of users total int total number of users next_token str|None next token Source code in matrix_admin_sdk/models/v2/users.py class UsersModel ( BaseModel ): \"\"\" List of users Attributes: users (list[UserModel]): List of users total (int): total number of users next_token (str|None): next token \"\"\" users : List [ UserModel ] total : int next_token : Optional [ str ] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]): users = [ UserModel . from_dict ( i ) for i in data [ \"users\" ]] return cls ( users = users , total = data [ \"total\" ], next_token = data . get ( \"next_token\" )) UserModel \u00b6 User model Attributes: Name Type Description name str Fully-qualified user ID (ex. @user :server.com). is_guest bool Status if that user is a guest account. admin bool Status if that user is an admin account. deactivated bool Status if that user has been marked as deactivated. shadow_banned bool Status if that user has been marked as shadow banned. displayname str|None The user's display name if they have set one. creation_ts int The user's creation timestamp in ms. avatar_url str|None he user's avatar URL if they have set one user_type str|None Type of the user. Normal users are type None. This allows user type specific behaviour. There are also types support and bot Source code in matrix_admin_sdk/models/v2/users.py class UserModel ( BaseModel ): \"\"\" User model Attributes: name (str): Fully-qualified user ID (ex. @user:server.com). is_guest (bool): Status if that user is a guest account. admin (bool): Status if that user is an admin account. deactivated (bool): Status if that user has been marked as deactivated. shadow_banned (bool): Status if that user has been marked as shadow banned. displayname (str|None): The user's display name if they have set one. creation_ts (int): The user's creation timestamp in ms. avatar_url (str|None): he user's avatar URL if they have set one user_type (str|None): Type of the user. Normal users are type None. This allows user type specific behaviour. There are also types support and bot \"\"\" name : str is_guest : bool admin : bool deactivated : bool shadow_banned : bool creation_ts : int displayname : Optional [ str ] avatar_url : Optional [ str ] user_type : Optional [ str ] @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserModel\" : displayname = data . get ( \"displayname\" ) avatar_url = data . get ( \"avatar_url\" ) user_type = data . get ( \"user_type\" ) return cls ( name = data [ \"name\" ], is_guest = data [ \"is_guest\" ], admin = data [ \"admin\" ], deactivated = data [ \"deactivated\" ], shadow_banned = data [ \"shadow_banned\" ], creation_ts = data [ \"creation_ts\" ], displayname = displayname , avatar_url = avatar_url , user_type = user_type , ) UserDetailsModel \u00b6 UserDetailsModel(name: str, is_guest: bool, admin: bool, deactivated: bool, shadow_banned: bool, creation_ts: int, displayname: Union[str, NoneType], avatar_url: Union[str, NoneType], user_type: Union[str, NoneType], threepids: List[matrix_admin_sdk.models.v2.users.ThreepidModel], appservice_id: Union[str, NoneType], consent_server_notice_sent: Union[str, NoneType], consent_version: Union[str, NoneType], external_ids: List[matrix_admin_sdk.models.v2.users.ExternalId]) Source code in matrix_admin_sdk/models/v2/users.py class UserDetailsModel ( UserModel ): threepids : List [ ThreepidModel ] appservice_id : Optional [ str ] consent_server_notice_sent : Optional [ str ] consent_version : Optional [ str ] external_ids : List [ ExternalId ] @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserDetailsModel\" : user_data = asdict ( UserModel . from_dict ( data )) user_data [ \"threepids\" ] = [ ThreepidModel . from_dict ( i ) for i in data . get ( \"threepids\" , []) ] user_data [ \"external_ids\" ] = [ ExternalId . from_dict ( i ) for i in data . get ( \"external_ids\" , []) ] user_data [ \"consent_server_notice_sent\" ] = data . get ( \"consent_server_notice_sent\" , None ) user_data [ \"consent_version\" ] = data . get ( \"consent_version\" , None ) user_data [ \"appservice_id\" ] = data . get ( \"appservice_id\" , None ) return cls ( ** user_data ) ExternalId \u00b6 ExternalId(auth_provider: str, external_id: str) Source code in matrix_admin_sdk/models/v2/users.py class ExternalId ( BaseModel ): auth_provider : str external_id : str ThreepidModel \u00b6 ThreepidModel(medium: str, address: str, added_at: int, validated_at: int) Source code in matrix_admin_sdk/models/v2/users.py class ThreepidModel ( BaseModel ): medium : str address : str added_at : int validated_at : int","title":"Users"},{"location":"endpoints/v2/users/#users","text":"","title":"Users"},{"location":"endpoints/v2/users/#endpoints","text":"","title":"Endpoints"},{"location":"endpoints/v2/users/#users_1","text":"Source code in matrix_admin_sdk/endpoints/v2/users.py class Users ( Endpoint ): async def get_all ( self , user_id : Optional [ str ] = None , name : Optional [ str ] = None , guests : bool = True , deactivated : bool = False , limit : int = 100 , from_ : int = 0 , order_by : Optional [ OrderBy ] = None , dir_ : str = \"f\" , ) -> UsersModel : order_by = OrderBy . NAME if order_by is None else order_by url = self . url ( \"users\" ) params = { \"user_id\" : user_id , \"name\" : name , \"guests\" : guests , \"deactivated\" : deactivated , \"limit\" : limit , \"from\" : from_ , \"order_by\" : order_by . value , \"dir\" : dir_ , } result = await self . request ( RequestMethods . GET , url , params = params ) res : UsersModel = UsersModel . from_dict ( result ) return res async def query_user_account ( self , user_id : str ) -> UserDetailsModel : \"\"\" This API returns information about a specific user account. Args: user_id: fully-qualified user id: for example, @user:server.com Returns: UserDetailsModel \"\"\" url = self . url ( f \"users/ { user_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : UserDetailsModel = UserDetailsModel . from_dict ( result ) return res async def create_or_modify_account ( self , user_id : str , password : Optional [ str ] = None , displayname : Optional [ str ] = None , avatar_url : Optional [ str ] = None , admin : bool = False , deactivated : bool = False , user_type : Optional [ str ] = None , threepids : Optional [ List [ Threepid ]] = None , external_ids : Optional [ List [ ExternalId ]] = None , ) -> None : \"\"\" This API allows an administrator to create or modify a user account with a specific user_id. If the user already exists then optional parameters default to the current value. In order to re-activate an account deactivated must be set to false. If users do not login via single-sign-on, a new password must be provided. Args: user_id: fully-qualified user id: for example, @user:server.com. password: If provided, the user's password is updated and all devices are logged out. displayname: defaults to the value of user_id. avatar_url: must be a MXC URI admin: is user an admin deactivated: If unspecified, deactivation state will be left unchanged on existing accounts and set to false for new accounts. A user cannot be erased by deactivating with this API. For details on deactivating users see Deactivate Account. user_type: If provided, the user type will be adjusted. If null given, the user type will be cleared. Other allowed options are: bot and support threepids: allows setting the third-party IDs (email, msisdn) external_ids: Allow setting the identifier of the external identity provider for SSO (Single sign-on). Details in Sample Configuration File section sso and oidc_providers Returns: None \"\"\" if threepids is None : threepids = [] if external_ids is None : external_ids = [] if displayname is None : displayname = user_id threepids_list = [ asdict ( i ) for i in threepids ] external_ids_list = [ asdict ( i ) for i in external_ids ] data = { \"displayname\" : displayname , \"threepids\" : threepids_list , \"external_ids\" : external_ids_list , \"avatar_url\" : avatar_url , \"admin\" : admin , \"deactivated\" : deactivated , \"user_type\" : user_type , } if password is not None : data [ \"password\" ] = password url = self . url ( f \"users/ { user_id } \" ) await self . request ( RequestMethods . PUT , url , data = data )","title":"Users"},{"location":"endpoints/v2/users/#matrix_admin_sdk.endpoints.v2.users.Users.create_or_modify_account","text":"This API allows an administrator to create or modify a user account with a specific user_id. If the user already exists then optional parameters default to the current value. In order to re-activate an account deactivated must be set to false. If users do not login via single-sign-on, a new password must be provided. Parameters: Name Type Description Default user_id str fully-qualified user id: for example, @user :server.com. required password Optional[str] If provided, the user's password is updated and all devices are logged out. None displayname Optional[str] defaults to the value of user_id. None avatar_url Optional[str] must be a MXC URI None admin bool is user an admin False deactivated bool If unspecified, deactivation state will be left unchanged on existing accounts and set to false for new accounts. A user cannot be erased by deactivating with this API. For details on deactivating users see Deactivate Account. False user_type Optional[str] If provided, the user type will be adjusted. If null given, the user type will be cleared. Other allowed options are: bot and support None threepids Optional[List[matrix_admin_sdk.endpoints.v2.users.Threepid]] allows setting the third-party IDs (email, msisdn) None external_ids Optional[List[matrix_admin_sdk.endpoints.v2.users.ExternalId]] Allow setting the identifier of the external identity provider for SSO (Single sign-on). Details in Sample Configuration File section sso and oidc_providers None Source code in matrix_admin_sdk/endpoints/v2/users.py async def create_or_modify_account ( self , user_id : str , password : Optional [ str ] = None , displayname : Optional [ str ] = None , avatar_url : Optional [ str ] = None , admin : bool = False , deactivated : bool = False , user_type : Optional [ str ] = None , threepids : Optional [ List [ Threepid ]] = None , external_ids : Optional [ List [ ExternalId ]] = None , ) -> None : \"\"\" This API allows an administrator to create or modify a user account with a specific user_id. If the user already exists then optional parameters default to the current value. In order to re-activate an account deactivated must be set to false. If users do not login via single-sign-on, a new password must be provided. Args: user_id: fully-qualified user id: for example, @user:server.com. password: If provided, the user's password is updated and all devices are logged out. displayname: defaults to the value of user_id. avatar_url: must be a MXC URI admin: is user an admin deactivated: If unspecified, deactivation state will be left unchanged on existing accounts and set to false for new accounts. A user cannot be erased by deactivating with this API. For details on deactivating users see Deactivate Account. user_type: If provided, the user type will be adjusted. If null given, the user type will be cleared. Other allowed options are: bot and support threepids: allows setting the third-party IDs (email, msisdn) external_ids: Allow setting the identifier of the external identity provider for SSO (Single sign-on). Details in Sample Configuration File section sso and oidc_providers Returns: None \"\"\" if threepids is None : threepids = [] if external_ids is None : external_ids = [] if displayname is None : displayname = user_id threepids_list = [ asdict ( i ) for i in threepids ] external_ids_list = [ asdict ( i ) for i in external_ids ] data = { \"displayname\" : displayname , \"threepids\" : threepids_list , \"external_ids\" : external_ids_list , \"avatar_url\" : avatar_url , \"admin\" : admin , \"deactivated\" : deactivated , \"user_type\" : user_type , } if password is not None : data [ \"password\" ] = password url = self . url ( f \"users/ { user_id } \" ) await self . request ( RequestMethods . PUT , url , data = data )","title":"create_or_modify_account()"},{"location":"endpoints/v2/users/#matrix_admin_sdk.endpoints.v2.users.Users.query_user_account","text":"This API returns information about a specific user account. Parameters: Name Type Description Default user_id str fully-qualified user id: for example, @user :server.com required Source code in matrix_admin_sdk/endpoints/v2/users.py async def query_user_account ( self , user_id : str ) -> UserDetailsModel : \"\"\" This API returns information about a specific user account. Args: user_id: fully-qualified user id: for example, @user:server.com Returns: UserDetailsModel \"\"\" url = self . url ( f \"users/ { user_id } \" ) result = await self . request ( RequestMethods . GET , url ) res : UserDetailsModel = UserDetailsModel . from_dict ( result ) return res","title":"query_user_account()"},{"location":"endpoints/v2/users/#models","text":"","title":"Models"},{"location":"endpoints/v2/users/#usersmodel","text":"List of users Attributes: Name Type Description users list[UserModel] List of users total int total number of users next_token str|None next token Source code in matrix_admin_sdk/models/v2/users.py class UsersModel ( BaseModel ): \"\"\" List of users Attributes: users (list[UserModel]): List of users total (int): total number of users next_token (str|None): next token \"\"\" users : List [ UserModel ] total : int next_token : Optional [ str ] = None @classmethod def from_dict ( cls , data : Dict [ str , Any ]): users = [ UserModel . from_dict ( i ) for i in data [ \"users\" ]] return cls ( users = users , total = data [ \"total\" ], next_token = data . get ( \"next_token\" ))","title":"UsersModel"},{"location":"endpoints/v2/users/#usermodel","text":"User model Attributes: Name Type Description name str Fully-qualified user ID (ex. @user :server.com). is_guest bool Status if that user is a guest account. admin bool Status if that user is an admin account. deactivated bool Status if that user has been marked as deactivated. shadow_banned bool Status if that user has been marked as shadow banned. displayname str|None The user's display name if they have set one. creation_ts int The user's creation timestamp in ms. avatar_url str|None he user's avatar URL if they have set one user_type str|None Type of the user. Normal users are type None. This allows user type specific behaviour. There are also types support and bot Source code in matrix_admin_sdk/models/v2/users.py class UserModel ( BaseModel ): \"\"\" User model Attributes: name (str): Fully-qualified user ID (ex. @user:server.com). is_guest (bool): Status if that user is a guest account. admin (bool): Status if that user is an admin account. deactivated (bool): Status if that user has been marked as deactivated. shadow_banned (bool): Status if that user has been marked as shadow banned. displayname (str|None): The user's display name if they have set one. creation_ts (int): The user's creation timestamp in ms. avatar_url (str|None): he user's avatar URL if they have set one user_type (str|None): Type of the user. Normal users are type None. This allows user type specific behaviour. There are also types support and bot \"\"\" name : str is_guest : bool admin : bool deactivated : bool shadow_banned : bool creation_ts : int displayname : Optional [ str ] avatar_url : Optional [ str ] user_type : Optional [ str ] @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserModel\" : displayname = data . get ( \"displayname\" ) avatar_url = data . get ( \"avatar_url\" ) user_type = data . get ( \"user_type\" ) return cls ( name = data [ \"name\" ], is_guest = data [ \"is_guest\" ], admin = data [ \"admin\" ], deactivated = data [ \"deactivated\" ], shadow_banned = data [ \"shadow_banned\" ], creation_ts = data [ \"creation_ts\" ], displayname = displayname , avatar_url = avatar_url , user_type = user_type , )","title":"UserModel"},{"location":"endpoints/v2/users/#userdetailsmodel","text":"UserDetailsModel(name: str, is_guest: bool, admin: bool, deactivated: bool, shadow_banned: bool, creation_ts: int, displayname: Union[str, NoneType], avatar_url: Union[str, NoneType], user_type: Union[str, NoneType], threepids: List[matrix_admin_sdk.models.v2.users.ThreepidModel], appservice_id: Union[str, NoneType], consent_server_notice_sent: Union[str, NoneType], consent_version: Union[str, NoneType], external_ids: List[matrix_admin_sdk.models.v2.users.ExternalId]) Source code in matrix_admin_sdk/models/v2/users.py class UserDetailsModel ( UserModel ): threepids : List [ ThreepidModel ] appservice_id : Optional [ str ] consent_server_notice_sent : Optional [ str ] consent_version : Optional [ str ] external_ids : List [ ExternalId ] @classmethod def from_dict ( cls , data : Dict [ str , Any ]) -> \"UserDetailsModel\" : user_data = asdict ( UserModel . from_dict ( data )) user_data [ \"threepids\" ] = [ ThreepidModel . from_dict ( i ) for i in data . get ( \"threepids\" , []) ] user_data [ \"external_ids\" ] = [ ExternalId . from_dict ( i ) for i in data . get ( \"external_ids\" , []) ] user_data [ \"consent_server_notice_sent\" ] = data . get ( \"consent_server_notice_sent\" , None ) user_data [ \"consent_version\" ] = data . get ( \"consent_version\" , None ) user_data [ \"appservice_id\" ] = data . get ( \"appservice_id\" , None ) return cls ( ** user_data )","title":"UserDetailsModel"},{"location":"endpoints/v2/users/#externalid","text":"ExternalId(auth_provider: str, external_id: str) Source code in matrix_admin_sdk/models/v2/users.py class ExternalId ( BaseModel ): auth_provider : str external_id : str","title":"ExternalId"},{"location":"endpoints/v2/users/#threepidmodel","text":"ThreepidModel(medium: str, address: str, added_at: int, validated_at: int) Source code in matrix_admin_sdk/models/v2/users.py class ThreepidModel ( BaseModel ): medium : str address : str added_at : int validated_at : int","title":"ThreepidModel"}]}